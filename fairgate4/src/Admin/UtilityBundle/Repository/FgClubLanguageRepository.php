<?php

namespace Admin\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgClubLanguage;

/**
 * FgClubLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgClubLanguageRepository extends EntityRepository {

    /**
     * Function to get club active club languages
     *
     * @param integer $club club object
     * @param Integer $clubCacheKey  Cachekey used for caching
     * @param Integer $cacheLifeTime Cache expiry time
     *
     * @return array
     */
    public function getAllClubLanguages($club) {
        $clubId=$club->get('id');
        $fedId=$club->get('federation_id');
        $fedQ=($fedId>1)? "cl.club=$fedId AND":"cl.club=$clubId AND";
        //$cacheKey = str_replace('{{cache_area}}', 'club_language', $clubCacheKey);
        $result = $this->createQueryBuilder("cl")
                ->select('cl.id,cl.correspondanceLang,cl.systemLang,CLS.isActive,cl.dateFormat,cl.timeFormat,cl.thousandSeparator,cl.decimalMarker,CLS.sortOrder')
                ->innerJoin('CommonUtilityBundle:FgClubLanguageSettings', 'CLS', 'WITH', 'CLS.clubLanguage = cl.id')
                ->where("$fedQ CLS.club=:clubId")
                ->orderBy('CLS.sortOrder,cl.id', 'ASC')
                ->setParameter('clubId', $clubId)
                ->getQuery()                
                ->getResult();

        return $result;
    }

    /**
     * Method to insert to fg_club_language table
     *
     * @param array $insertArray array to insert
     *
     * @return int
     */
    public function insertClubLanguage($insertArray) {
        $ClubLanguageObj = new FgClubLanguage();
        $ClubLanguageObj->setClub($insertArray['clubobj']);
        if (isset($insertArray['correspondance_lang'])) {
            $ClubLanguageObj->setCorrespondanceLang($insertArray['correspondance_lang']);
        } else {
            $ClubLanguageObj->setCorrespondanceLang('de');
        }
        if (isset($insertArray['system_lang'])) {
            $ClubLanguageObj->setSystemLang($insertArray['system_lang']);
        } else {
            $ClubLanguageObj->setSystemLang('de');
        }
        if (isset($insertArray['visible_for_club'])) {
            $ClubLanguageObj->setVisibleForClub($insertArray['visible_for_club']);
        } else {
            $ClubLanguageObj->setVisibleForClub(0);
        }
        if (isset($insertArray['date_format'])) {
            $ClubLanguageObj->setDateFormat($insertArray['date_format']);
        } else {
            $ClubLanguageObj->setDateFormat("");
        }
        if (isset($insertArray['time_format'])) {
            $ClubLanguageObj->setTimeFormat($insertArray['time_format']);
        } else {
            $ClubLanguageObj->setTimeFormat("");
        }
        if (isset($insertArray['thousand_separator'])) {
            $ClubLanguageObj->setThousandSeparator($insertArray['thousand_separator']);
        } else {
            $ClubLanguageObj->setThousandSeparator("");
        }
        if (isset($insertArray['decimal_marker'])) {
            $ClubLanguageObj->setDecimalMarker($insertArray['decimal_marker']);
        } else {
            $ClubLanguageObj->setDecimalMarker("");
        }

        $this->_em->persist($ClubLanguageObj);
        $this->_em->flush();

        return $ClubLanguageObj->getId();
    }

    /**
     * Method to update fg_club_language table
     *
     * @param object $ClubLanguageObj
     * @param array  $insertArray
     *
     * @return int
     */
    public function editClubLanguage($ClubLanguageObj, $insertArray) {
        if (isset($insertArray['clubobj'])) {
            $ClubLanguageObj->setClub($insertArray['clubobj']);
        }
        if (isset($insertArray['correspondance_lang'])) {
            $ClubLanguageObj->setCorrespondanceLang($insertArray['correspondance_lang']);
        }
        if (isset($insertArray['system_lang'])) {
            $ClubLanguageObj->setSystemLang($insertArray['system_lang']);
        }
        if (isset($insertArray['visible_for_club'])) {
            $ClubLanguageObj->setVisibleForClub($insertArray['visible_for_club']);
        }
        if (isset($insertArray['date_format'])) {
            $ClubLanguageObj->setDateFormat($insertArray['date_format']);
        }
        if (isset($insertArray['time_format'])) {
            $ClubLanguageObj->setTimeFormat($insertArray['time_format']);
        }
        if (isset($insertArray['thousand_separator'])) {
            $ClubLanguageObj->setThousandSeparator($insertArray['thousand_separator']);
        }
        if (isset($insertArray['decimal_marker'])) {
            $ClubLanguageObj->setDecimalMarker($insertArray['decimal_marker']);
        }
        $this->_em->flush();

        return $ClubLanguageObj->getId();
    }

    /**
     * Function to save languages
     * @param type $data
     * @param type $clubId
     */
    public function updateLanguages($data, $container) {
        $club=$container->get('club');
        $objClubId = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($club->get('id'));
        $contacts = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getContactCountByCorrLang($container);
        $isNew = 0;
        $deleteArray = array();
        foreach ($data as $key => $value) {
            $clubLanguageObj = $this->_em->getRepository('CommonUtilityBundle:FgClubLanguage')->find($key);

            if (!$clubLanguageObj) {
                $clubLanguageObj = new FgClubLanguage();
                $isNew = 1;
            } else {
              $lang = $clubLanguageObj->getCorrespondanceLang();
            }
            if ($value['isActive']==0 && isset($contacts[$lang])) {
                unset($value['isActive']);
            }
            if ($value['isDeleted'] == 1) {
                $clubSettingsArr = $this->_em->getRepository('CommonUtilityBundle:FgClubLanguageSettings')->findBy(array('club' => $club->get('id')));
                if (count($clubSettingsArr) > 1 && $isNew == 0 && !isset($contacts[$lang])) {
                    $deleteArray[] = $key;
                }
                continue;
            } elseif($club->get('type')=='federation' || $club->get('type')=='standard_club') {
                if (isset($value['language'])) {
                    $clubLanguageObj->setCorrespondanceLang($value['language']);
                }
                if (isset($value['defSysLang'])) {
                    $clubLanguageObj->setSystemLang($value['defSysLang']);
                }
                if (isset($value['dateFormat'])) {
                    $clubLanguageObj->setDateFormat($value['dateFormat']);
                }
                if (isset($value['timeFormat'])) {
                    $clubLanguageObj->setTimeFormat($value['timeFormat']);
                }
                if (isset($value['thousandSeparator'])) {
                    $clubLanguageObj->setThousandSeparator($value['thousandSeparator']);
                }
                if (isset($value['decimalMarker'])) {
                    $clubLanguageObj->setDecimalMarker($value['decimalMarker']);
                }
                if($isNew){
                    $clubLanguageObj->setClub($objClubId);
                    $clubLanguageObj->setVisibleForClub(1);
                }
                $this->_em->persist($clubLanguageObj);
                $this->_em->flush();
            }
            $this->_em->getRepository('CommonUtilityBundle:FgClubLanguageSettings')->updateClubLanguageSettings($club, $value, $objClubId, $clubLanguageObj, $isNew, $container);
        }
        if (count($deleteArray) > 0) {
            $this->deleteLang($deleteArray);
        }
    }
    /**
     * Get system languge of corr lang
     * @param type $clubId
     * @param type $corrLang
     * @return type
     */
    public function getSystemLangOfCorr($clubId,$corrLang){
        $result = $this->createQueryBuilder("cl")
                ->select('cl.systemLang')
                ->leftJoin('CommonUtilityBundle:FgClubLanguageSettings', 'CLS', 'WITH', 'CLS.clubLanguage = cl.id')
                ->where('CLS.club=:clubId')
                ->andWhere("cl.correspondanceLang=:corr")
                ->setParameter('clubId', $clubId)
                ->setParameter('corr', $corrLang)
                ->getQuery()
                ->getResult();

        return $result[0]['systemLang'];
    }

     /**
     * Function to delete a particular language
     *
     * @param array $deleteArray language id delete array
     *
     * @return
     */
    public function deleteLang($deleteArray)
    {
        foreach ($deleteArray as $langId) {
            $clubLanguageObj = $this->_em->getRepository('CommonUtilityBundle:FgClubLanguage')->find($langId);
            $this->_em->remove($clubLanguageObj);
        }
        $this->_em->flush();
    }
}
