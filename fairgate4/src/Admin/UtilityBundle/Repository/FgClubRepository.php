<?php

/**
 * FgClubRepository.
 */
namespace Admin\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FgClubRepository.
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgClubRepository extends EntityRepository
{

    /**
     * Function to get club details.
     *
     * @param Integer $domainCacheKey Cache key used for caching
     * @param Integer $lifetime       Cache expiry time
     * @param string  $clubIdentifier club url identifier
     *
     * @return Integer
     */
    public function getClubDetails($domainCacheKey, $cacheLifeTime, $cachingEnabled, $clubIdentifier = '', $id = 0)
    {
        $cacheKey = $domainCacheKey . '_clubadmindetails_' . ($clubIdentifier != '' ? $clubIdentifier : $id);
        $bookedmodules = $this->getBookedModules();
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        $resultQuery = $this->createQueryBuilder('c')
            ->select("c.id, c.title, c.parentClubId, c.isFederation, c.federationId, c.isSubFederation, c.hasSubfederation, c.clubType, c.urlIdentifier, c.settingsUpdated,"
                . "CASE WHEN c.clubMembershipAvailable = 1 THEN 1 ELSE 0 END as clubMembershipAvailable, "
                . "CASE WHEN c.fedMembershipMandatory = 1 THEN 1 ELSE 0 END as fedMembershipMandatory, "
                . "CASE WHEN c.assignFedmembershipWithApplication = 1 THEN 1 ELSE 0 END as assignFedmembershipWithApplication,  "
                . "CASE WHEN c.addExistingFedMemberClub = 2 THEN 2 ELSE CASE WHEN c.addExistingFedMemberClub = 1 THEN 1 ELSE 0 END END as addExistingFedMemberClub, "
                . "CASE WHEN c.fedAdminAccess = 1 THEN 1 ELSE 0 END as fedAdminAccess, "
                . "CASE WHEN c.hasPromobox = 1 THEN 1 ELSE 0 END as hasPromobox")
            ->addSelect('(' . $bookedmodules->getDQL() . ') as bookedModules');

        if ($clubIdentifier != '') {
            $resultQuery->where('c.urlIdentifier=:clubIdentifier')
                ->setParameter('clubIdentifier', $clubIdentifier);
        } elseif ($id > 0) {
            $resultQuery->where('c.id=:id')
                ->setParameter('id', $id);
        }
        $result = $cacheDriver->getCachedResult($resultQuery, $cacheKey, $cacheLifeTime, $cachingEnabled);

        return (count($result) > 0 ? $result[0] : false);
    }

    /**
     * Function to get the booked modules of a club.
     *
     * @return Integer
     */
    private function getBookedModules()
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select('GROUP_CONCAT(m.moduleKey)')
            ->from('AdminUtilityBundle:FgMbModule', 'm')
            ->leftJoin('AdminUtilityBundle:FgMbClubModules', 'cm', 'WITH', 'cm.module = m.id')
            ->where('cm.club=c.id')
            ->andWhere('cm.isModuleActive = 1');

        return $moduleQuery;
    }

    /**
     * Method to get club details of clubids
     *
     * @param array   $clubIds        Array containing sub level ids
     * @param Integer $clubCacheKey   Cachekey used for caching
     * @param Integer $cacheLifeTime  Cache expiry time
     * @param Integer $cachingEnabled Cache enabled or not
     * 
     * @return array
     */
    public function getClubsValues($clubIds, $language, $clubCacheKey, $cacheLifeTime, $cachingEnabled)
    {
        $cacheKey = str_replace('{{cache_area}}', '_clubdetails_', $clubCacheKey);
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();

        $club = $this->createQueryBuilder('c')
            ->select('c.id, c.parentClubId, c.isFederation, c.federationId as federationId, c.isSubFederation, c.hasSubfederation, c.clubType as clubType, c.settingsUpdated')
            ->addSelect("CASE WHEN cI18n.titleLang IS NULL OR cI18n.titleLang = '' THEN c.title ELSE cI18n.titleLang END AS title")
            ->leftJoin('AdminUtilityBundle:FgClubI18n', 'cI18n', 'WITH', 'cI18n.id = c.id AND cI18n.lang = :language')
            ->where('c.id IN (:ids)')
            ->setParameters(array('ids' => $clubIds, 'language' => $language))
            ->orderBy('c.title', 'ASC');

        return $result = $cacheDriver->getCachedResult($club, $cacheKey, $cacheLifeTime, $cachingEnabled);
    }

    /**
     * 
     * @param string  $type type of field 
     * @param integer $clubId current clubid
     * @param integer $value inserting value
     * @param object $em club admin entity manager
     * @param string $clubType club type 
     */
    public function syncClubdata($type, $clubId, $value = null, $em, $clubType = '')
    {
        $clubObj = $em->getRepository('AdminUtilityBundle:FgClub')->find($clubId);

        switch ($type) {
            case 'notecount':
                if ($clubType == 'sub_federation') {
                    $clubObj->setSubfedNoteCount($value);
                } else {
                    $clubObj->setFedNoteCount($value);
                }
                break;
            case 'documentcount':
                $clubObj->setDocumentCount($value);
                break;
            case 'fedmembercount':
                $clubObj->setFedmemberCount($value);
                break;
            case 'lastcontactupdated':
                $clubObj->setLastContactUpdated(new \DateTime($value));

                break;
        }
        $em->persist($clubObj);
        $em->flush();
    }

    /**
     * function to get clubtitle
     *
     * @param int $clubid      clubId
     * @param int $defaultLang club defalt language
     *
     * @return  array
     */
    public function getClubname($clubid, $defaultLang)
    {
        $clubObj = $this->createQueryBuilder('C')
            ->select("CASE WHEN ci18n.titleLang IS NULL OR ci18n.titleLang = '' THEN C.title ELSE ci18n.titleLang END as title")
            ->leftJoin('AdminUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'ci18n.id = C.id AND ci18n.lang = :defaultLang')
            ->where("C.id=:clubId")
            ->setParameters(array('clubId' => $clubid, 'defaultLang' => $defaultLang));

        $result = $clubObj->getQuery()->getResult();

        return $result;
    }

    /**
     * TO get the all club under a particular federation/subfederation
     * @param type $clubid club/subfederation/federation id
     * @param type $clubType type of club
     * @return array
     */
    public function getAllClub($clubid, $clubType)
    {
        $clubTypes = array('sub_federation', 'sub_federation_club', 'federation_club', 'standard_club');

        $clubObj = $this->createQueryBuilder('C')
            ->select("C.id as clubId,C.federationId as federationId")
            ->where("C.isActive=1")
            ->andWhere('C.clubType IN (:types)');

        switch ($clubType) {
            case 'sub_federation_club':
            case 'federation_club':
            case 'standard_club' :
                $clubObj->andWhere('C.id=:clubId');
                break;
            case 'sub_federation':
                $clubObj->andWhere('C.subFederationId=:clubId');
                $clubObj->orWhere('C.id=:clubId');
                break;

            case 'federation':
                $clubObj->andWhere('C.federationId=:clubId');
                $clubObj->orWhere('C.id=:clubId');

                break;
        }
        $clubObj->setParameters(array('types' => $clubTypes, 'clubId' => $clubid));

        $result = $clubObj->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get the default subscription detail of a club.
     *
     * @param int $clubId Club Id.
     *
     * @return int subscribed boolean true/false
     */
    public function getDefaultSubscription($clubId)
    {
        $resultQuery = $this->createQueryBuilder('c')
            ->select('c.defaultContactSubscription')
            ->where('c.id=:clubId')
            ->setParameter('clubId', $clubId);

        $result = $resultQuery->getQuery()->getResult();

        return $result[0]['defaultContactSubscription'];
    }

    /**
     * function to get active contact count of a club
     *
     * @param int $clubid      clubId
     *
     * @return  array
     */
    public function getActiveContactCount($clubid)
    {
        $clubObj = $this->createQueryBuilder('C')
            ->select("C.activeContactCount")
            ->where("C.id=:clubId")
            ->setParameter('clubId', $clubid);

        $result = $clubObj->getQuery()->getResult();

        return $result;
    }

    /**
     * Set club confirmed (change status, token, )
     * 
     * @param int $clubId clubId
     * 
     * @return boolean
     */
    public function getClubConfirmed($clubId)
    {
        $qb = $this->createQueryBuilder('CLUB');
        $que = $qb->update('AdminUtilityBundle:FgClub', 'CLUB')
            ->set('CLUB.registrationToken', ':null')
            ->set('CLUB.status', ':status')
            ->where('CLUB.id = :clubId')
            ->setParameter('clubId', $clubId)
            ->setParameter('null', null)
            ->setParameter('status', 'Confirmed')
            ->getQuery();
        $que->execute();

        return true;
    }

    /**
     * Set status of club to active and set contarct_start_date
     * 
     * @param object $clubObj club object
     */
    public function activateClub($clubObj)
    {
        $clubObj->setStatus('Active');
        $clubObj->setContractStartDate(new \DateTime());
        $this->_em->flush();
    }    

    /**
     * Method to get (clubs id and main contact id) of non-confirmed clubs , 7 days after registering
     * 
     * @return array $result
     */
    public function getNonConfirmedClubs()
    {

        $todaysDate = new \DateTime("now");
        $expiryDate = $todaysDate->modify('-7 day');
        $clubObj = $this->createQueryBuilder('C')
            ->select('C.id, IDENTITY(C.fairgateSolutionContact) as mainContactId')
            ->where("C.status=:status")
            ->andWhere("C.registrationDate < :expiryDate")
            ->setParameter('status', 'Registered')
            ->setParameter('expiryDate', $expiryDate);
        $result = $clubObj->getQuery()->getArrayResult();

        return $result;
    }

    /**
     * Method to make inactive, non-confirmed clubs, 7 days after registering
     * 
     * @return boolean
     */
    public function makeNonConfirmedClubsInactive()
    {
        $todaysDate = new \DateTime("now");
        $expiryDate = $todaysDate->modify('-7 day');
        $clubObj = $this->createQueryBuilder('C')
            ->update('AdminUtilityBundle:FgClub', 'C')
            ->set('C.status', ':invalidStatus')
            ->set('C.urlIdentifier', ':null')
            ->where("C.status=:status")
            ->andWhere("C.registrationDate < :expiryDate")
            ->setParameter('status', 'Registered')
            ->setParameter('invalidStatus', 'Invalid')
            ->setParameter('null', null)
            ->setParameter('expiryDate', $expiryDate);

        $clubObj->getQuery()->execute();

        return true;
    }
    
    /**
     * Get clubs which are completed 30 days after contract started(main_contact_logged in)
     * 
     * @return array club ids
     */
    public function getClubsExpired() {
        $todaysDate = new \DateTime("now");
        $expiryDate = $todaysDate->modify('-30 day');
        $clubObj = $this->createQueryBuilder('C')
            ->select('C.id')
            ->where("C.status=:status")
            ->andWhere("C.contractStartDate IS NOT NULL")
            ->andWhere("C.contractStartDate < :expiryDate")
            ->setParameter('status', 'Active')
            ->setParameter('expiryDate', $expiryDate);
        $result = $clubObj->getQuery()->getArrayResult();

        return $result;
    }
        
    /**
     * Clear contract start date of expired clubs
     * 
     * @param array $clubIdsExpired Expired clubIds
     * 
     * @return boolean
     */
    public function clearContractStartDateOfClubs($clubIdsExpired)
    {       
        $clubObj = $this->createQueryBuilder('C')
            ->update('AdminUtilityBundle:FgClub', 'C')
            ->set('C.contractStartDate', ':null')
            ->where("C.id in (:clubIds)")
            ->setParameter('clubIds', $clubIdsExpired)
            ->setParameter('null', null);

        $clubObj->getQuery()->execute();

        return true;
    }
    
}
