<?php

/**
 * FgClubAssignmentRepository.
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgClubAssignment;

/**
 * FgClubAssignmentRepository.
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgClubAssignmentRepository extends EntityRepository
{
    /**
     * Function to get club assignments
     * @param type $contactId Contact id
     * 
     * @return array
     */
    public function getClubAssignments($contactId)
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select('c.title')
                ->from('CommonUtilityBundle:FgClubAssignment', 'ca')
                ->leftJoin('ca.club', 'c')
                ->leftJoin('ca.fedContact', 'cc')
                ->where('cc.id=:contactId')
                ->setParameter('contactId', $contactId);

        $result = $moduleQuery->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get club assignment object
     * @param type $id Id
     * 
     * @return Object
     */
    public function getClubAssignmentObject($id)
    {
        $qb = $this->createQueryBuilder('ca')
                ->select("ca.id, ca.fromDate, ca.toDate")
                ->where("ca.id = :cId")
                ->setParameter('cId', $id);

        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

   


    /**
     * Function to add club assignment for a contact
     * 
     * @param int $fedContactId FedContactId
     * @param int $clubId       Club Id
     * @param int $isApproved   Whether club assignment is confirmed or not
     */
    public function addClubAssignment($fedContactId, $clubId, $isApproved = 1)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $contactObj = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $fedContactId);
        $clubAssignmentObj = new FgClubAssignment();
        $clubAssignmentObj->setFedContact($contactObj);
        $clubAssignmentObj->setClub($clubObj);
        $clubAssignmentObj->setFromDate(new \DateTime("now"));
        $clubAssignmentObj->setIsApproved($isApproved);
        $this->_em->persist($clubAssignmentObj);
        $this->_em->flush();
    }
    
    /**
     * This function is used to remove a contact's club assignment
     * 
     * @param int $fedContactId Fed contact id
     * @param int $clubId       Club id
     */
    public function removeClubAssignment($fedContactId, $clubId)
    {
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgClubAssignment', 'C')
            ->set('C.toDate', ':endDate')
            ->where("C.fedContact = :fedContactId")
            ->andWhere("C.club = :clubId")
            ->andWhere("C.toDate IS NULL OR C.toDate = ''")  
            ->setMaxResults(1)   
            ->setParameters(array('fedContactId' => $fedContactId, 'clubId' => $clubId, 'endDate' => date('Y-m-d H:i:s')))
            ->getQuery();

        $res = $q->execute();
    }
    
    /**
     * This function is used to get the previous active club assignment of a contact
     * 
     * @param int $fedContactId Fed contact id
     * @param int $clubId       Club id
     * 
     * @return int $mainClub Previous main club id
     */
    public function getPreviousClubAssignment($fedContactId, $clubId)
    {
        $qb = $this->createQueryBuilder("C")
                ->select("IDENTITY(C.club) AS clubId")
                ->where("C.fedContact = :fedContactId")
                ->andWhere("C.club NOT IN (:clubId)")
                ->andWhere("C.toDate IS NULL OR C.toDate = ''")
                ->andWhere("C.isApproved = :isApproved")
                ->orderBy("C.fromDate", "DESC")
                ->setMaxResults(1)
                ->setParameters(array('fedContactId' => $fedContactId, 'clubId' => array($clubId), 'isApproved' => 1));

        $mainClub = $qb->getQuery()->getSingleScalarResult();

        return $mainClub;
    }
}
