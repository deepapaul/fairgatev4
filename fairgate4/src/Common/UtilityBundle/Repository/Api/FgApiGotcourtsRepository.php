<?php

/**
 * FgApiGotcourtsRepository.
 */
namespace Common\UtilityBundle\Repository\Api;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgApiGotcourts;
use Common\UtilityBundle\Util\FgSettings;

/**
 * FgApiGotcourtsRepository.
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgApiGotcourtsRepository extends EntityRepository
{

    /**
     * This method is used to book gotCourts api service.
     *
     * @param int $clubId       Current club id
     * @param int $contactId    Loggined contact id
     * 
     * @return int inserted api id
     */
    public function bookGotCourtsApi($clubId, $contactId)
    {
        $club = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $contact = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId);
        $apiGotcourtsObj = new FgApiGotcourts();
        $apiGotcourtsObj->setClub($club);
        $apiGotcourtsObj->setIsActive(0);
        $apiGotcourtsObj->setStatus('booked');
        $apiGotcourtsObj->setBookedBy($contact);
        $apiGotcourtsObj->setBookedOn(new \DateTime("now"));
        $this->_em->persist($apiGotcourtsObj);
        $this->_em->flush();

        return $apiGotcourtsObj->getId();
    }

    /**
     * This method is used to update gotCourts api service
     *
     * @param int       $gcApiId GotCourts api id
     * @param array     $data    Data to be updated
     * @param string    $event   The event when the function is been called
     * 
     * @return void
     */
    public function updateGotCourtsApi($gcApiId, $data, $event)
    {
        $apiGotcourtsObj = $this->_em->getRepository('CommonUtilityBundle:FgApiGotcourts')->find($gcApiId);

        if ($apiGotcourtsObj == null)
            return false;

        switch ($event) {
            case 'generated':
                $apiGotcourtsObj->setApitoken($data['token']);
                $apiGotcourtsObj->setStatus($data['status']);
                $apiGotcourtsObj->setGeneratedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $data['contactId']));
                $apiGotcourtsObj->setGeneratedOn(new \DateTime("now"));
                break;
            case 'regenerated':
                $apiGotcourtsObj->setApitoken($data['token']);
                $apiGotcourtsObj->setStatus($data['status']);
                $apiGotcourtsObj->setIsActive(0);
                $apiGotcourtsObj->setRegeneratedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $data['contactId']));
                $apiGotcourtsObj->setRegeneratedOn(new \DateTime("now"));
                break;
            case 'registered':
                $apiGotcourtsObj->setIsActive(1);
                $apiGotcourtsObj->setRegisteredOn(new \DateTime("now"));
                break;
            case 'cancelled':
                $apiGotcourtsObj->setStatus($data['status']);
                $apiGotcourtsObj->setCancelledBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $data['contactId']));
                $apiGotcourtsObj->setCancelledOn(new \DateTime("now"));
                break;
        }

        $this->_em->persist($apiGotcourtsObj);
        $this->_em->flush();
    }

    /**
     * This method is used to get current GotCourts api service details for a club.
     *  
     * @param  int  $clubId Current club id
     * 
     * @return array        Api Details
     */
    public function getGotCourtsApi($clubId)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $qry = $this->createQueryBuilder('gc')
            ->select("gc.id AS gcApiId, gc.apitoken, gc.status, gc.isActive, (DATE_FORMAT(gc.bookedOn, '$datetimeFormat')) AS bookedOn, (DATE_FORMAT(gc.generatedOn, '$datetimeFormat')) AS generatedOn, (DATE_FORMAT(gc.cancelledOn, '$datetimeFormat')) AS cancelledOn")
            ->where('gc.club =:clubId')
            ->andWhere('gc.status !=:status')
            ->setParameters(array('clubId' => $clubId, 'status' => 'cancelled'));

        return $qry->getQuery()->getOneOrNullResult();
    }

    /**
     * This method is used to get GotCourts api service details from API id.
     *  
     * @param  int $apiId   Gotcourt API id 
     * 
     * @return array        Api Details
     */
    public function getGotCourtsApiById($apiId)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $qry = $this->createQueryBuilder('gc')
            ->select("gc.id AS gcApiId, gc.apitoken, gc.status, gc.isActive, (DATE_FORMAT(gc.bookedOn, '$datetimeFormat')) AS bookedOn, (DATE_FORMAT(gc.generatedOn, '$datetimeFormat')) AS generatedOn, (DATE_FORMAT(gc.cancelledOn, '$datetimeFormat')) AS cancelledOn")
            ->where('gc.id =:id')
            ->setParameters(array('id' => $apiId));

        return $qry->getQuery()->getOneOrNullResult();
    }

    /**
     * This method is used to get current GotCourts api service details for a club.
     *  
     * @param  int      $clubId Current club id
     * @param  string   $status The status which needed to be checked
     * 
     * @return array        Api Details
     */
    public function getGotCourtsApiByStatus($clubId, $status)
    {
        $qry = $this->createQueryBuilder('gc')
            ->select('gc.id AS gcApiId, gc.apitoken, gc.status, gc.isActive')
            ->where('gc.club =:clubId')
            ->setParameter('clubId', $clubId);
        if (is_string($status)) {
            $qry->andWhere('gc.status =:status');
            $qry->setParameter('status', $status);
        } else if (is_array($status)) {
            $qry->andWhere('gc.status IN(:status)');
            $qry->setParameter('status', $status);
        }
        return $qry->getQuery()->getOneOrNullResult();
    }

    /**
     * The function to validate the slient token for a club
     * 
     * @param string    $token          The token to validate
     * @param int       $clubId         The club id from the url
     * @param string    $publicKey      The public key for encryption/decryption
     * @param string    $iterations     The itertions for hashing
     * @param boolean   $isActive       Whether the token is active or not, Default value is true
     * 
     * @return object
     */
    public function validateClientToken($token, $clubId, $publicKey, $iterations, $isActive = true)
    {
        $query = $this->createQueryBuilder('gc')
            ->select('gc.id AS gcApiId, gc.apitoken, gc.status, gc.isActive')
            ->where("gc.status = 'generated'");
            if($isActive) {
                $query->andWhere('gc.isActive = 1');
            }
            $query->andWhere('gc.club =:clubId')
            ->setParameters(array('clubId' => $clubId))
            ->orderBy('gc.id', 'DESC');

        $result = $query->getQuery()->getOneOrNullResult();
        if($result){
            $clubEncryptedToken = hash_pbkdf2("sha384", $result['apitoken'], $publicKey, $iterations);
            if($clubEncryptedToken == $token){
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * This method is used to fetch club settings
     * 
     * @param type $clubId Club id
     * 
     * @return array
     */
    public function getClubLanguages($clubId)
    {
        $langQuery = $this->_em->createQueryBuilder()
            ->select('cl.correspondanceLang, cl.systemLang, cl.dateFormat, cl.timeFormat')
            ->from('CommonUtilityBundle:FgClubLanguageSettings', 'cls')
            ->leftJoin('CommonUtilityBundle:FgClubLanguage', 'cl', 'WITH', 'cls.clubLanguage = cl.id')
            ->where('cls.club=:clubId')
            ->andWhere('cls.isActive=1')
            ->orderBy('cls.sortOrder, cl.id', 'ASC')
            ->setParameter('clubId', $clubId);
        $result = $langQuery->getQuery()->getArrayResult();

        return $result;
    }
}
