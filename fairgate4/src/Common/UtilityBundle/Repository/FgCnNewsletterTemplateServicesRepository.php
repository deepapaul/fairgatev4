<?php

/** 
 * FgCnNewsletterTemplateServicesRepository
 * 
 * This Repository is used for handling functions for Newsletter template sponsor services 
 * 
 * @package    CommonUtilityBundle 
 * @subpackage Repository 
 * @author     pitsolutions.ch 
 * @version    Fairgate V4 
 * 
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCnNewsletterTemplateServices;

/**
 * FgCnNewsletterTemplateServicesRepository
 *
 * This class was generated by the Doctrine ORM for handling functions for Newsletter template sponsor services 
 */
class FgCnNewsletterTemplateServicesRepository extends EntityRepository {
    
    /**
     * Method to insert sponsor services of a template
     * 
     * @param object $templateSponsorObj template-sponsor object to insert
     * @param array  $sponsorServices    array of sponsor services
     */
    public function insertSponsorServices($templateSponsorObj, $sponsorServices) {             
        foreach($sponsorServices as $sponsorService) {
            $templateServiceObj = new FgCnNewsletterTemplateServices();   
            $serviceObj = $this->_em->getRepository('CommonUtilityBundle:FgSmServices')->find($sponsorService);
            $templateServiceObj->setTemplateSponsor($templateSponsorObj)
                    ->setServices($serviceObj)                    
                   ;
            $this->_em->persist($templateServiceObj);
            $this->_em->flush();
        }
    }
    
    /**
     * Method to update sponsor services of a template
     * 
     * @param object $templateSponsorObj template-sponsor object to insert
     * @param array  $sponsorServices    array of sponsor services
     */
    public function updateSponsorServices($templateSponsorObj, $sponsorServices) {  
        $this->deleteSponsorServices($templateSponsorObj->getId()); 
        $this->insertSponsorServices($templateSponsorObj, $sponsorServices);
    }
    
    /**
     * Method to delete sponsor services of a particulat template
     * 
     * @param int $templateSponsorId
     */
    private function deleteSponsorServices($templateSponsorId) {
        $qb = $this->createQueryBuilder('TS')
                    ->delete()
                    ->where('TS.templateSponsor=:sponsorId')
                    ->setParameter('sponsorId', $templateSponsorId);
        $qb->getQuery()->execute();        
    }
    
}
