<?php

Namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FgRmRoleManualContactsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgRmRoleManualContactsRepository extends EntityRepository
{
    /**
     * function to list the both the contact types from a role id
     *
     * @param int $roleId the role id
     *
     * @return type
     */
    public function getExceptionContactsOfRole($roleId)
    {

        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT mc.id AS ex_id, mc.type AS ex_type, mc.role_id AS rx_roleId, mc.contact_id AS ex_contactId, contactNameYOB(mc.contact_id) as ex_contactName"
                . " FROM fg_rm_role_manual_contacts mc "
                . "LEFT JOIN fg_cm_contact c on c.id = mc.contact_id left join master_system s on c.id=s.contact_id "
                . "WHERE mc.role_id = $roleId and c.is_deleted = 0 and c.is_permanent_delete = 0"
                . " ORDER BY ex_contactName ASC ";

        $result = $conn->executeQuery($sql)->fetchAll();
        $conn->close();

        $resultArray = array();
        foreach ($result as $key => $val) {
            if ($val['ex_type'] == 'included') {
                $includeContacts[$val['ex_contactId']] = $val['ex_contactName'];
            } else {
                $excludeContacts[$val['ex_contactId']] = $val['ex_contactName'];
            }
        }
        //for include contact handle
        foreach ($includeContacts as $key1 => $val1) {
            $includeContactIs[] = $key1;
            $includecontactNames[] = $val1;
            $resultArray['included']['main'][$key1] = $val1;
        }
        $resultArray['included']['contactId'] = implode(',', $includeContactIs);
        $resultArray['included']['contactName'] = implode(',', $includecontactNames);

        //for exclude contact handle
        foreach ($excludeContacts as $key1 => $val1) {
            $excludeContactIs[] = $key1;
            $excludecontactNames[] = $val1;
            $resultArray['excluded']['main'][$key1] = $val1;
        }
        $resultArray['excluded']['contactId'] = implode(',', $excludeContactIs);
        $resultArray['excluded']['contactName'] = implode(',', $excludecontactNames);

        return $resultArray;

    }

    /**
     * function to do the save of execeptions for filter roles
     *
     * @param int    $roleId     the role id
     * @param array  $exceptions the execeptions array (include+exclude)
     * @param int    $clubId     Club id
     * @param string $title      Title
     *
     * @return type
     */
    public function saveFilterRoleExceptions($roleId, $exceptions, $clubId, $title="")
    {

        $currentContactId = $this->contactId;
        $currentDate = date('Y-m-d H:i:s');
        $includeContacts = $exceptions['include_contact_id'];
        $excludeContacts = $exceptions['exclude_contact_id'];
        $removeIncludedCnts = $removeExcludedCnts = true;
        if (!isset($exceptions['include_contact_id'])) {
            $removeIncludedCnts = false;
        }
        if (!isset($exceptions['exclude_contact_id'])) {
            $removeExcludedCnts = false;
        }
        $includeArray[] = explode(',', $includeContacts);
        $excludeArray[] = explode(',', $excludeContacts);
        $todeleteArray = array();
        $newExcludedCnts = array();
        $delExcludedCnts = array();
        $currExcludedContacts = array();

        $includeFinalContactIds = array_diff($includeArray[0], $excludeArray[0]);
        $excludeFinalContactIds = array_diff($excludeArray[0], $includeArray[0]);

        if ($title == "") {
            $title = $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->find($roleId)->getTitle();
        }

        $conn = $this->getEntityManager()->getConnection();
        if ($roleId) {
            if ($removeIncludedCnts) {
                $includedContacts = $this->_em->getRepository('CommonUtilityBundle:FgRmRoleManualContacts')->getexeceptionContactIds($roleId, 'included');
                foreach ($includedContacts as $key => $val) {
                    if (!in_array($val['contact_id'], $includeFinalContactIds)) {
                        $todeleteArray['included'][] = $val['contact_id'];
                    }
                }
            }
            if ($removeExcludedCnts) {
                $excludedContacts = $this->_em->getRepository('CommonUtilityBundle:FgRmRoleManualContacts')->getexeceptionContactIds($roleId, 'excluded');
                foreach ($excludedContacts as $key1 => $val1) {
                    $currExcludedContacts[] = $val1['contact_id'];
                    if (!in_array($val1['contact_id'], $excludeFinalContactIds)) {
                        $todeleteArray['excluded'][] = $val1['contact_id'];
                    }
                }
                $newExcludedCnts = array_diff($excludeArray[0], $currExcludedContacts);
                if (is_array($includeArray[0])) {
                    $newExcludedCnts = array_diff($newExcludedCnts, $includeArray[0]);
                }
                $delExcludedCnts = array_diff($currExcludedContacts, $excludeArray[0]);
            }
        }
        $includeFinalContactId = implode(',', $includeFinalContactIds);
        $excludeFinalContactId = implode(',', $excludeFinalContactIds);

        if ($includeFinalContactId !='' && $includeFinalContactId !=0) {

            $includeFinalContactIdArray = array_unique(explode(',', $includeFinalContactId));
            foreach ($includeFinalContactIdArray as $contactId) {
                $includeContact[] = "('$roleId','$contactId','included')";
            }
        }
        if ($excludeFinalContactId !='' && $excludeFinalContactId !=0) {
            $excludeFinalContactIdArray = array_unique(explode(',', $excludeFinalContactId));
            foreach ($excludeFinalContactIdArray as $contactIds) {
                $excludeContact[] = "('$roleId','$contactIds','excluded')";
            }
        }
        if ($removeIncludedCnts) {
            $todeleteArray['included'] = array_unique($todeleteArray['included']);
            if (count($todeleteArray['included'])) {
                foreach ($todeleteArray['included'] as $val) {
                    $qry = "DELETE FROM fg_rm_role_manual_contacts WHERE  role_id = '$roleId' AND type = 'included' AND contact_id = '$val' ";
                    $stmt = $conn->executeQuery($qry);
                }
            }
        }
        if (count($includeContact)) {
            $valueString = implode(',', $includeContact);
            $qry = "INSERT INTO fg_rm_role_manual_contacts (role_id, contact_id, type)
                     VALUES $valueString ";
            $stmt = $conn->executeQuery($qry);
        }
        if (count($excludeContact)) {
            $valueString = implode(',', $excludeContact);
            $qry = "INSERT INTO fg_rm_role_manual_contacts (role_id, contact_id, type)
                     VALUES $valueString ";
            $stmt = $conn->executeQuery($qry);
        }
        if ($removeExcludedCnts) {
            $todeleteArray['excluded'] = array_unique($todeleteArray['excluded']);
            if (count($todeleteArray['excluded'])) {
                foreach ($todeleteArray['excluded'] as $val) {
                    $qry = "DELETE FROM fg_rm_role_manual_contacts WHERE  role_id = '$roleId' AND type = 'excluded' AND contact_id = '$val' ";
                    $stmt = $conn->executeQuery($qry);
                }
            }
        }
        $conn->close();
        $returnArray = array('newExcludedCnts' => $newExcludedCnts, 'delExcludedCnts' => $delExcludedCnts);

        return $returnArray;
    }
    /**
     * function to get the exeception contact ids
     *
     * @param type $roleId Role id
     * @param type $type   Type
     *
     * @return type
     */
    public function getexeceptionContactIds($roleId, $type='included')
    {

        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT  DISTINCT contact_id
                FROM fg_rm_role_manual_contacts
                WHERE role_id = $roleId and type = '$type' ";
        $resultArray = $conn->executeQuery($sql)->fetchAll();

        return $resultArray;
    }
}
