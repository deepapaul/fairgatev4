<?php namespace Common\UtilityBundle\Repository\Gallery;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgGmGallery;
use Common\UtilityBundle\Repository\Pdo\GalleryPdo;

/**
 * FgGmGalleryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgGmGalleryRepository extends EntityRepository
{

    /**
     * Function to save/update sort order.
     */
    public function saveSortOrder($albumItemIds, $sortPosition, $albumId, $container)
    {

        $albumItemIdsString = implode(',', $albumItemIds);
        $itemCount = count($albumItemIds);

        $pdoClass = new GalleryPdo($container);
        $pdoClass->updateItemSortOrder($albumItemIdsString, $albumId, $itemCount, $sortPosition);
    }

    /**
     * create sub album.
     *
     * @param int    $clubId     club id
     * @param int    $categoryId category id
     * @param string $title      album title
     * @param string $clubdefLang club default language
     * 
     * @return type
     */
    public function createSubAlbum($clubId, $categoryId, $title, $type, $elementType, $clubdefLang, $container)
    {
        $conn = $this->getEntityManager()->getConnection();
        $clubObj = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($clubId);
        $lastRow = $this->findOneBy(array('club' => $clubId, 'parentId' => $categoryId), array('sortOrder' => 'DESC'));

        $albumObj = new \Common\UtilityBundle\Entity\FgGmAlbum();
        $albumObj->setClub($clubObj)->setName($title);
        $this->_em->persist($albumObj);
        $this->_em->flush();

        $lastInserted = $conn->executeQuery('SELECT LAST_INSERT_ID() AS album')->fetch();

        $galleryObj = new FgGmGallery();
        $albumCObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbum')->find($lastInserted['album']);
        $galleryObj->setAlbum($albumCObj)->setType($type)->setClub($clubObj)->setParentId($categoryId);
        $currentAlbumId = $albumCObj->getId();
        $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumI18n')->insertAlbumLangDetails($currentAlbumId, $clubdefLang, $title, 1, $container);
        if ($elementType != 'CG') {
            $roleObj = $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->find($elementType);
            $galleryObj->setRole($roleObj);
        }
        if ($lastRow) {
            $galleryObj->setSortOrder($lastRow->getSortOrder() + 1);
        } else {
            $galleryObj->setSortOrder(1);
        }

        $this->_em->persist($galleryObj);
        $this->_em->flush();

        return $lastInserted['album'];
    }

    /**
     * create album.
     *
     * @param int    $clubId club id
     * @param string $title  album title
     * @param string $clubdefLang club default language
     * 
     * @return int
     */
    public function createAlbum($clubId, $title, $roleType, $clubdefLang, $container)
    {
        $conn = $this->getEntityManager()->getConnection();
        $clubObj = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($clubId);

        $albumObj = new \Common\UtilityBundle\Entity\FgGmAlbum();
        $albumObj->setClub($clubObj)->setName($title);
        $this->_em->persist($albumObj);
        $this->_em->flush();

        $lastInserted = $conn->executeQuery('SELECT LAST_INSERT_ID() AS album')->fetch();

        $obj = new FgGmGallery();
        $albumCObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbum')->find($lastInserted['album']);
        $currentAlbumId = $albumCObj->getId();
        $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumI18n')->insertAlbumLangDetails($currentAlbumId, $clubdefLang, $title, 1, $container);
        if ($roleType == 'CG') {
            $lastRow = $this->findOneBy(array('club' => $clubId, 'type' => 'CLUB'), array('sortOrder' => 'DESC'));
            $obj->setAlbum($albumCObj)->setType('CLUB')->setClub($clubObj)->setParentId(0);
        } else {
            $lastRow = $this->findOneBy(array('club' => $clubId, 'role' => $roleType), array('sortOrder' => 'DESC'));
            $roleObj = $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->find($roleType);
            $obj->setRole($roleObj)->setAlbum($albumCObj)->setType('ROLE')->setClub($clubObj)->setParentId(0);
        }

        if ($lastRow) {
            $obj->setSortOrder($lastRow->getSortOrder() + 1);
        } else {
            $obj->setSortOrder(1);
        }

        $this->_em->persist($obj);
        $this->_em->flush();

        return $lastInserted['album'];
    }

    /**
     * Function to get the details of an album.
     *
     * @param int $albumId album
     *
     * @return array $result Album details
     */
    public function getAlbumDetails($albumId)
    {
        $resultQuery = $this->createQueryBuilder('c')
            ->select('Identity(c.club) as clubId, c.type, Identity(c.role) as roleId, c.parentId')
            ->where('c.album=:albumId')
            ->setParameter('albumId', $albumId);
        $result = $resultQuery->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * Function to last inserted id in gallery table.
     *
     *
     * @return int
     */
    public function getGalleryLastInsertedId()
    {
        $lastId = $this->createQueryBuilder('gm')
            ->select('MAX(gm.id)');

        $result = $lastId->getQuery()->getSingleScalarResult();
        $finalId = ($result) ? $result : 0;

        return $finalId;
    }

    /**
     * Function to get gallery id for update while saving alum settings page.
     *
     * @param int $clubId         club Id
     * @param int $currentAlbumId album id
     *
     * @return int
     */
    public function getGalleryId($clubId, $currentAlbumId)
    {
        $lastId = $this->createQueryBuilder('gm')
            ->select('gm.id')
            ->where('gm.club=:clubId')
            ->andWhere('gm.album=:albumId')
            ->setParameters(array('clubId' => $clubId, 'albumId' => $currentAlbumId));

        $result = $lastId->getQuery()->getSingleScalarResult();

        return $result;
    }

    /**
     * Method to get list of gallery and albums under it to pupulate in the select field when moving an item to another album.
     *
     * @param int    $clubId              current clubId
     * @param string $clubDefaultLanguage club default language
     * @param array  $adminstrativeRoles  team/workgroup ids which the contact have administartive roles
     * @param string $executiveBoardTitle terminology term
     *
     * @return array $result gallery details
     */
    public function getGalleryAlbums($clubId, $clubDefaultLanguage, $adminstrativeRoles, $executiveBoardTitle)
    {
        $adminRoles = (count($adminstrativeRoles) > 0) ? $adminstrativeRoles : array(0);
        $qb = $this->createQueryBuilder('G')
            ->select("G.type AS albumType, CASE WHEN (AL.nameLang = '' OR AL.nameLang IS NULL) THEN A.name ELSE AL.nameLang END AS albumName, G.parentId as albumParent, A.id as albumId, G.id as galleryId, R.id AS albumRole  ")
            ->addSelect("CASE WHEN G.type = 'CLUB' THEN '' ELSE CASE WHEN R.isExecutiveBoard = 1 THEN '$executiveBoardTitle' ELSE R.title END END AS roleName ")
            ->innerJoin('G.album', 'A')
            ->leftJoin('G.role', 'R')
            ->leftJoin('CommonUtilityBundle:FgGmAlbumI18n', 'AL', 'WITH', "A.id = AL.id AND AL.lang = '$clubDefaultLanguage'")
            ->where('G.club = :clubId ')
            ->andWhere("G.type = 'CLUB' OR (G.type = 'ROLE' AND G.role IN (:adminstrativeRoles) )")
            ->orderBy('G.type, G.parentId, G.sortOrder', 'ASC')
            ->setParameters(array('clubId' => $clubId, 'adminstrativeRoles' => $adminRoles));
        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

    /**
     * Function to get albums of a team or workgroup.
     *
     * @param array $roleIds Team/Workgroup ids.
     *
     * @return array $albums Array of album ids.
     */
    public function getAlbumsOfRole($roleIds)
    {
        $albums = array();
        if (count($roleIds)) {
            $albums = $this->createQueryBuilder('g')
                ->select('IDENTITY(g.album) AS albumId')
                ->where('g.role IN (:roleIds)')
                ->setParameter('roleIds', $roleIds)
                ->getQuery()
                ->getResult();
        }

        return $albums;
    }
}
