<?php

namespace Common\UtilityBundle\Repository\Gallery;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgGmItems;
use Common\UtilityBundle\Entity\FgGmAlbumItems;
use Common\UtilityBundle\Entity\FgGmItemI18n;
use Common\UtilityBundle\Util\FgUtility;
use Common\FilemanagerBundle\Util\FileChecking;
use Common\UtilityBundle\Util\FgSettings;
use Common\UtilityBundle\Repository\Pdo\GalleryPdo;

/**
 * FgGmItemsRepository.
 *
 * This class was generated by the Doctrine ORM. Handled functions of gallery items
 */
class FgGmItemsRepository extends EntityRepository
{

    /**
     * Method to set scope for gallery items.
     *
     * @param string $itemIds comma separated itemsId
     * @param string $scope   INTERNAL/PUBLIC
     *
     * @return bool
     */
    public function setScope($itemIds, $scope)
    {
        if ($itemIds) {
            $itemIds = explode(',', $itemIds);
            foreach ($itemIds as $itemId) {
                $id = preg_replace('/[^0-9\-]/', '', $itemId);
                $gmItemObj = $this->find($id);
                if ($gmItemObj) {
                    if ($scope == 'INTERNAL') {
                        $gmAlbumItemObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumItems')->findOneBy(array('items' => $id));
                        if ($gmAlbumItemObj) {
                            $iscoverAlbum = $gmAlbumItemObj->getIsCoverImage();

                            if ($iscoverAlbum == 1) {
                                $gmAlbumItemObj->setIsCoverImage(0);
                                $this->_em->persist($gmAlbumItemObj);
                                $this->_em->flush();
                            }
                        }
                    }
                    $gmItemObj->setScope($scope);
                    $this->_em->persist($gmItemObj);
                }
            }
            $this->_em->flush();

            return true;
        }
    }

    /**
     * Method to save gallery items.
     *
     * @param array $galDetails Image details
     *
     * @return gallery id
     */
    public function saveGalleryImage($galDetails, $container)
    {
        //$maxSortOrder = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumItems')->getMaxSortOrder($galDetails['albumid']);
        $maxSortOrder = $galDetails['imgCount'] * -1;
        $clubobj = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($galDetails['clubId']);
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($galDetails['contactId']);
        $type = $galDetails['type'];
        $itemArray = array();
        for ($i = 0; $i < $galDetails['imgCount']; $i++) {
            //insert into fg_gm_items
            $gmItemsObj = new FgGmItems();
            $gmItemsObj->setClub($clubobj);
            ($type === 'IMAGE') ? $gmItemsObj->setScope($galDetails['imgScope'][$galDetails['uploadedImageId'][$i]]) : $gmItemsObj->setScope($galDetails['gm_video_scope']);
            ($type === 'IMAGE') ? $gmItemsObj->setCronExecuted(1) : $gmItemsObj->setCronExecuted(0);
            $gmItemsObj->setType($galDetails['type']);
            $gmItemsObj->setDescription(FgUtility::getSecuredDataString($galDetails['imgDesc'][$galDetails['defLang']][$i], $this->_em->getConnection()));
            if ($type === 'VIDEO') {
                $gmItemsObj->setFilepath($galDetails['uploadedImages'][$i]);                
                if (!is_array($galDetails['videoThumb'])) { //For Add video from gallery
                    $gmItemsObj->setVideoThumbUrl($galDetails['videoThumb']);
                } else {
                    $gmItemsObj->setVideoThumbUrl($galDetails['videoThumb'][$i]);
                }
            } elseif ($type === 'IMAGE') {
                //mime type checking
                $fileCheck = new FileChecking($container);
                $fileCheck->filename = $galDetails['fileName'][$i];
                $fileCheck->filepath = 'uploads/' . $galDetails['clubId'] . '/gallery/original/';
                $mmType = $fileCheck->get_mime_type();
                $mimeType = explode(';', $mmType);

                $gmItemsObj->setFilepath($galDetails['fileName'][$i]);
                $gmItemsObj->setFileName($galDetails['fileName'][$i]);
                $gmItemsObj->setFileSize($galDetails['fileSize'][$i]);
                $gmItemsObj->setMimeType($mimeType[0]);
            }
            $gmItemsObj->setCreatedBy($contactObj);
            $gmItemsObj->setUpdatedBy($contactObj);
            $gmItemsObj->setCreatedOn(new \DateTime('now'));
            $gmItemsObj->setUpdatedOn(new \DateTime('now'));
            $source = ($galDetails['source']) ? $galDetails['source'] : 'gallery';
            $gmItemsObj->setSource($source);

            $this->_em->persist($gmItemsObj);
            $this->_em->flush();

            //insert into fg_gm_album_items
            if ($galDetails['albumId'] > 0) {
                $gmAlbumObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbum')->find($galDetails['albumId']);
                $gmAlbmItemsObj = new FgGmAlbumItems();
                $gmAlbmItemsObj->setAlbum($gmAlbumObj);
                $gmAlbmItemsObj->setItems($gmItemsObj);
                //get max sort order of album items
                $gmAlbmItemsObj->setSortOrder($maxSortOrder);
                $gmAlbmItemsObj->setIsCoverImage(0);
                $this->_em->persist($gmAlbmItemsObj);
                $this->_em->flush();
            }
            $itemId = $gmItemsObj->getId();

            if ($type === 'VIDEO') {
                if (isset($galDetails['uploadedImageId'])) {
                    $itemIdArray[$galDetails['uploadedImageId'][$i]] = $itemId;
                } else {
                    $itemIdArray[] = $itemId;
                }
            } else {
                $itemIdArray[$galDetails['uploadedImageId'][$i]] = $itemId;
            }
            //insert into fg_gm_item_i18n
            foreach ($galDetails['clubLang'] as $lang) {
                if ($galDetails['imgDesc'][$lang][$i] != '') {
                    $descVal = str_replace('<script', '<scri&nbsp;pt', $galDetails['imgDesc'][$lang][$i]);
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->insertLangDesc($itemId, $lang, $descVal,$container);
                }
            }
            $maxSortOrder++;
        }
        if ($galDetails['albumId'] > 0) {          
            $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumItems')->reorderAllAlbumItems($galDetails['albumId'],'SORT_ORDER_ASC', $container);
        }

        return $itemIdArray;
    }

    /**
     * Function to get all image count and orphan image count.
     *
     * @param int $clubId
     *
     * @return bool
     */
    public function getAllImageCount($clubId)
    {
        $imagecount = $this->createQueryBuilder('c')
            ->select('COUNT(distinct c.id) as allimage,SUM(CASE WHEN (ai.id IS NULL) THEN 1 ELSE 0 END) AS orphanCount')
            ->leftJoin('CommonUtilityBundle:FgGmAlbumItems', 'ai', 'WITH', 'c.id = ai.items')
            ->where('c.club=:clubId')
            ->setParameters(array('clubId' => $clubId));
        $result = $imagecount->getQuery()->getResult();

        $result[0]['orphanCount'] = ($result[0]['orphanCount'] == '') ? 0 : $result[0]['orphanCount'];

        return $result;
    }

    /**
     * Function to get all descrpition.
     *
     * @param int $item
     *
     * @return array
     */
    public function fetchGalleryDesc($item)
    {
        $query = $this->createQueryBuilder('i')
            ->select('ii18.lang, ii18.descriptionLang, i.type, i.filepath, i.videoThumbUrl, IDENTITY(i.club) as clubId')
            ->leftJoin('CommonUtilityBundle:FgGmItemI18n', 'ii18', 'WITH', 'i.id = ii18.id')
            ->where('i.id=:itemId')
            ->setParameter('itemId', $item);
        $itemDet = $query->getQuery()->getResult();

        $result[$item] = $itemDet;

        return $result;
    }

    /**
     * Function to get all descrpition.
     *
     * @param array  $descDet
     * @param string $defLang
     * @param array  $clubLang
     *
     * @return array
     */
    public function editItemDesc($descDet, $defLang, $clubLang, $container)
    {
        foreach ($descDet as $itemId => $desc) {
            $itemobj = $this->findOneById($itemId);
            $itemobj->setDescription($desc[$defLang]);
            $this->_em->persist($itemobj);
            $this->_em->flush();

            //insert into fg_gm_item_i18n
            foreach ($desc as $lang => $editVal) {
                $gmItemI18nObj = $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->findOneBy(array('id' => $itemId, 'lang' => $lang));
                if ($gmItemI18nObj) {
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->updateLangDesc($itemId, $lang, $editVal);
                } else {
                    $descVal = str_replace('<script', '<scri&nbsp;pt', $editVal);
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->insertLangDesc($itemId, $lang, $descVal, $container);
                }
            }
        }

        return 'success';
    }

    /**
     * Method to delete orphan gallery items.
     *
     * @param string $itemIds comma separated itemsids
     * @param string $type    default value = GALLERY
     *
     * @return array $affectedItems affeted items id
     */
    public function deleteItems($itemIds, $type = 'GALLERY')
    {
        $affectedItems = array();
        if ($itemIds) {
            $itemIds = explode(',', $itemIds);
            foreach ($itemIds as $itemId) {
                $id = preg_replace('/[^0-9\-]/', '', $itemId);
                //checking item belongs to any album
                $albumObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbumItems')->findOneBy(array('items' => $id));
                if ($albumObj && $type == 'GALLERY') {
                    break; //if item belongs to any album, dont delete
                }
                //delete item
                $itemObj = $this->find($id);
                if ($itemObj) {
                    //delete image file
                    $this->deleteImageFile($itemObj->getType(), $itemObj->getFilepath(), $itemObj->getClub()->getId());
                    //delete from g_gm_items
                    $qb = $this->createQueryBuilder('I')
                        ->delete()
                        ->where('I.id=:itemId')
                        ->setParameter('itemId', $id);
                    $affectedRow = $qb->getQuery()->execute();
                    if ($affectedRow > 0) {
                        $affectedItems[] = $id;
                    }
                }
            }
        }

        return $affectedItems;
    }

    /**
     * Method to delete image file from 4 folders.

     * @param string $type     IMAGE/VIDEO
     * @param string $fileName filename to delete
     * @param int    $clubId   clubId
     */
    private function deleteImageFile($type, $fileName, $clubId)
    {
        if ($type == 'IMAGE') {
            $filePath1 = FgUtility::getUploadDir() . '/' . $clubId . '/gallery/original/' . $fileName;
            $filePath2 = FgUtility::getUploadDir() . '/' . $clubId . '/gallery/width_100/' . $fileName;
            $filePath3 = FgUtility::getUploadDir() . '/' . $clubId . '/gallery/width_300/' . $fileName;
            $filePath4 = FgUtility::getUploadDir() . '/' . $clubId . '/gallery/width_1920/' . $fileName;
            unlink($filePath1);
            unlink($filePath2);
            unlink($filePath3);
            unlink($filePath4);
        }
    }

    /**
     * Function to get all the files for a particular club to show it in file manager.
     *
     * @param int    $clubId Club id
     * @param String $type   IMAGE/VIDEO
     *
     * @return array $result files array
     */
    public function getAllItemsForFilemanager($clubId, $type = '', $ids = '')
    {
        $params = array('clubId' => $clubId);
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');
        $dateFormat = FgSettings::getMysqlDateTimeFormat();

        $files = $this->createQueryBuilder('c')
            ->select("c.id AS id, c.filepath, Identity(c.club) as club, c.type, sf.isSuperAdmin as isSuperAdmin, c.fileName, c.fileSize, DATE_FORMAT(c.createdOn,'%Y-%m-%d %H:%i') as createdOn, contactName(Identity(c.createdBy)) as createdBy, Identity(c.createdBy) as authorId, ct.isDeleted")
            ->leftJoin('CommonUtilityBundle:SfGuardUser', 'sf', 'WITH', 'sf.contact = c.createdBy')
            ->leftJoin('CommonUtilityBundle:FgCmContact', 'ct', 'WITH', 'ct.id = c.createdBy')
            ->where('c.club=:clubId');
        if (!empty($ids)) {
            $files->andWhere("c.id IN($ids)");
        }
        if ($type) {
            $files->andWhere('c.type=:type');
            $params['type'] = $type;
        }
        $files->setParameters($params);
        $result = $files->getQuery()->getResult();

        return $result;
    }

    /**
     * Method to save to item table.
     *
     * @param array  $itemDetails       The detail of media
     * @param int    $clubId            The id of the club
     * @param int    $contactId         The id of the contact
     * @param array  $clublanguageArray The club language array
     * @param string $defaultLanguage   The club default language
     *
     * @return array $itemIdArray The id of the items inserted
     */
    public function saveMediaItem($container, $itemDetails, $clubId, $contactId, $clublanguageArray, $defaultLanguage)
    {
        $conn = $container->get('database_connection');
        foreach ($itemDetails as $item) {
            if ($item['mediaid'] != '' || $item['itemid'] != '') {
                $itemId = $item['itemid'];
                $gmItemsObj = $this->_em->getRepository('CommonUtilityBundle:FgGmItems')->find($item['itemid']);
                if ($gmItemsObj) {
                    if ($item['description'][$defaultLanguage]) {
                        $gmItemsObj->setDescription(FgUtility::getSecuredDataString($item['description'][$defaultLanguage], $conn));
                    }
                    if ($item['videoThumb'] && $item['videoThumbImg']) {
                        $gmItemsObj->setFilepath($item['videoThumbImg']);
                        $gmItemsObj->setVideoThumbUrl($item['videoThumb']);
                    }
                    $this->_em->persist($gmItemsObj);
                    $this->_em->flush();
                }
                if ($item['mediaid'] == '') {
                    $itemIdArray[] = array('itemId' => $itemId, 'sortOrder' => $item['sort_order']);
                }
            } else {
                $itemId = $this->insertNewItem($container, $item, $clubId, $contactId, $defaultLanguage);
                $itemIdArray[] = array('itemId' => $itemId, 'sortOrder' => $item['sort_order']);
            }

            foreach ($clublanguageArray as $lang) {
                if (isset($item['description'][$lang])) {

                    //update if exists else insert
                    $descVal = str_replace('<script', '<scri&nbsp;pt', $item['description'][$lang]);
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->insertLangDesc($itemId, $lang, $descVal, $container);
                }
            }
        }

        return $itemIdArray;
    }

    /**
     * Method to save to item table.
     *
     * @param array  $container         The detail of media
     * @param array  $itemDetails       The detail of media
     * @param int    $clubId            The id of the club
     * @param int    $contactId         The id of the contact
     * @param array  $clublanguageArray The club language array
     * @param string $defaultLanguage   The club default language
     *
     * @return int The id of the item inserted
     */
    public function insertNewItem($container, $itemDetails, $clubId, $contactId, $defaultLanguage, $folder = 'communicationimages')
    {
        $conn = $container->get('database_connection');
        $clubObj = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($clubId);
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);

        $gmItemsObj = new \Common\UtilityBundle\Entity\FgGmItems();
        $gmItemsObj->setClub($clubObj);
        $gmItemsObj->setCreatedBy($contactObj);
        $gmItemsObj->setUpdatedBy($contactObj);
        $gmItemsObj->setCreatedOn(new \DateTime('now'));
        $gmItemsObj->setUpdatedOn(new \DateTime('now'));
        $gmItemsObj->setType($itemDetails['type']);
        $gmItemsObj->setScope('PUBLIC');
        $gmItemsObj->setDescription(FgUtility::getSecuredDataString($itemDetails['description'][$defaultLanguage], $conn));
        ($itemDetails['type'] === 'IMAGE') ? $gmItemsObj->setCronExecuted(1) : $gmItemsObj->setCronExecuted(0);
        $gmItemsObj->setSource($itemDetails['source']);

        if ($itemDetails['type'] == 'VIDEO') {
            $gmItemsObj->setFilepath($itemDetails['videoThumbImg']);
            $gmItemsObj->setVideoThumbUrl($itemDetails['videoThumb']);
        } elseif ($itemDetails['type'] == 'IMAGE') {
            $galleryUploadFolder = FgUtility::getUploadFilePath($clubId, $folder);
            $fileCheck = new FileChecking($container);
            $fileCheck->filename = $itemDetails['fileName'];
            $fileCheck->filepath = "$galleryUploadFolder/";
            $mmType = $fileCheck->get_mime_type();
            $mimeType = explode(';', $mmType);
            $sizeInBytes = filesize("$galleryUploadFolder/" . $itemDetails['filepath']);
            $gmItemsObj->setFilepath($itemDetails['filepath']);
            $gmItemsObj->setFileName($itemDetails['fileName']);
            $gmItemsObj->setFileSize($sizeInBytes);
            $gmItemsObj->setMimeType($mimeType[0]);
        }

        $this->_em->persist($gmItemsObj);
        $this->_em->flush();

        return $gmItemsObj->getId();
    }

    /**
     * Method to save default club language entries to main table.
     * To handle scenarios when club default languages changes
     *
     * @param object $container           Container object
     * @param int    $articleId           ArticleId
     * @param string $clubDefaultLanguage club-default-lang
     *
     * @return void
     */
    public function saveDefaultLang($container, $articleId, $clubDefaultLanguage)
    {
        $pdoClass = new GalleryPdo($container);
        $pdoClass->updateItemDescription($articleId, $clubDefaultLanguage);        
        
    }
}
