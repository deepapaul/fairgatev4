<?php

namespace Common\UtilityBundle\Repository\Gallery;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgGmAlbumItems;
use Common\UtilityBundle\Repository\Pdo\GalleryPdo;

/**
 * FgGmAlbumItemsRepository.
 *
 * This class was generated by the Doctrine ORM. Handled functions of gallery Album items
 */
class FgGmAlbumItemsRepository extends EntityRepository
{
    /**
     * Method to get itemId from albumid and sortorder.
     *
     * @param Int $albumId
     *
     * @return Array
     */
    public function getAlbumItem($albumItemId)
    {
        $resultQuery = $this->createQueryBuilder('c')
                ->select('c.id,c.sortOrder,IDENTITY(c.album) AS albumId')
                ->where('c.id=:albumItemId')
                ->setParameter('albumItemId', $albumItemId);
        $result = $resultQuery->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * Method reorder all images in album according to the type specified.
     *
     * @param Int    $albumId
     * @param String $sortOrder
     */
    public function reorderAllAlbumItems($albumId, $type = 'SORT_ORDER_ASC', $container)
    {
        switch ($type) {
            case 'NEWER_FIRST' :
                $orderBy = ' ORDER BY id DESC ';
                break;
            case 'OLDER_FIRST' :
                $orderBy = ' ORDER BY id ASC ';
                break;
            case 'SORT_ORDER_DESC' :
                $orderBy = ' ORDER BY sort_order DESC ';
                break;
            case 'SORT_ORDER_ASC' :
            default :
                $orderBy = ' ORDER BY sort_order ASC ';
                break;
        }
        
        $pdoClass = new GalleryPdo($container);
        $pdoClass->reorderAllAlbumItems($albumId, $orderBy); 

        return;
    }

    /**
     * Method to get Max sort order.
     *
     * @param Int $albumId
     *
     * @return Int Maxsort Order
     */
    public function getMaxSortOrder($albumId)
    {
        $q = $this->createQueryBuilder('AI')
                ->select('MAX(AI.sortOrder) AS maxSortOrder')
                ->where('AI.album =:albumId')
                ->setParameters(array('albumId' => $albumId));
        $result = $q->getQuery()->getArrayResult();
        $return = ($result[0]['maxSortOrder']) ? ($result[0]['maxId'] + 1) : 1;

        return $return;
    }

    /**
     * Method to remove album items.
     *
     * @param string $itemIds comma separated itemsids
     *
     * @return int $affectedCount affeted row count
     */
    public function removeItemsFromAlbum($itemIds)
    {
        $affectedCount = 0;
        if ($itemIds) {
            $itemIds = explode(',', $itemIds);
            foreach ($itemIds as $itemId) {
                $id = preg_replace('/[^0-9\-]/', '', $itemId);
                $qb = $this->createQueryBuilder('AI')
                        ->delete()
                        ->where('AI.id=:albumItemId')
                        ->setParameter('albumItemId', $id);
                $affectedCount += $qb->getQuery()->execute();
            }
        }

        return $affectedCount;
    }

    /**
     * Method to set cover image for album.
     *
     * @param int $albumitemId album itemsids
     */
    public function setCoverImageForAlbum($albumitemId)
    {
        $albumitemobj = $this->find($albumitemId);
        $albumId = $albumitemobj->getalbum();
        $qr = $this->createQueryBuilder('ci')
                ->select('ci.id AS id')
                ->where('ci.album =:albumId AND ci.isCoverImage = 1')
                ->setParameters(array('albumId' => $albumId));
        $Arrid = $qr->getQuery()->getArrayResult();

        if (!empty($Arrid)) {
            $albobj = $this->find($Arrid[0]['id']);
            $albobj->setisCoverImage(0);
            $this->_em->persist($albobj);
            $this->_em->flush();
            $albumitemobj->setisCoverImage(1);
            $this->_em->persist($albumitemobj);
            $this->_em->flush();
        } else {
            $albumitemobj->setisCoverImage(1);
            $this->_em->persist($albumitemobj);
            $this->_em->flush();
        }

        return $return;
    }

    /**
     * Method to move items to albums. Here if the item is not belongs to any album, a new entry will insert to fg_gm_album_items.
     *
     * @param string $itemIds comma separated itemsids
     * @param int    $albumId album Id to which albums to move
     *
     * @return int $affectedCount affeted row count
     */
    public function moveItemsToAlbum($itemIds, $albumId, $container)
    {
        $affectedCount = 0;
        if ($itemIds) {
            $albumObj = $this->_em->getRepository('CommonUtilityBundle:FgGmAlbum')->find($albumId);
            $itemIds = explode(',', $itemIds);
            $sortOrder = count($itemIds) * -1;
            foreach ($itemIds as $itemId) {
                $id = preg_replace('/[^0-9\-]/', '', $itemId);
                $albumItemObj = $this->findOneBy(array('items' => $id));
                if ($albumItemObj) { //updation
                    $qb = $this->createQueryBuilder()
                                ->update('CommonUtilityBundle:FgGmAlbumItems', 'AI')
                                ->set('AI.album', ':albumObj')
                                ->where('AI.items=:itemId')
                                ->setParameters(array('itemId' => $id, 'albumObj' => $albumObj));
                    $affectedCount += $qb->getQuery()->execute();

                    if ($affectedCount > 0) {
                        //sort order update
                        $albumItemObj->setSortOrder($sortOrder);
                        $this->_em->flush();
                    }
                } else {
                    //insert new row
                    $itemObj = $this->_em->getRepository('CommonUtilityBundle:FgGmItems')->find($id);
                    $albumItemObj = new FgGmAlbumItems();
                    $albumItemObj->setAlbum($albumObj);
                    $albumItemObj->setItems($itemObj);
                    $albumItemObj->setIsCoverImage(0);
                    $albumItemObj->setSortOrder($sortOrder);
                    $this->_em->persist($albumItemObj);
                    $this->_em->flush();
                    $affectedCount++;
                }
                $sortOrder++;
            }
            //reorder sort order
            $this->reorderAllAlbumItems($albumId,'SORT_ORDER_ASC',$container);
        }

        return $affectedCount;
    }

    /**
     * Method to move images form an album while deleting.
     *
     * @param int $albumId    album Id
     * @param int $parentId   parent id
     * @param int $deleteFlag delete flag is set to 1 when a main album is deleted and 0 when a sub album is deleted
     *
     * @return bool
     */
    public function moveImagesFromAlbum($albumId, $parentId, $deleteFlag, $container)
    {
       
        $pdoClass = new GalleryPdo($container);
        $pdoClass->moveImagesFromAlbum($albumId, $parentId, $deleteFlag); 

        return true;
    }
}
