<?php namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Clubadmin\Util\Contactlist;
use Common\UtilityBundle\Util\FgUtility;
use Common\UtilityBundle\Util\FgSettings;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Common\UtilityBundle\Util\FgFedMemberships;
use Common\UtilityBundle\Util\FgLogHandler;

/**
 * FgCmContact Repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmContactRepository extends EntityRepository
{

    public $container;

    /**
     * Function to set container.
     *
     * @param \Common\UtilityBundle\Repository\ContainerInterface $container
     */
    public function setContainer($container)
    {
        $this->container = $container;
    }

    /**
     * Function to get contact name(s) of given contact id(s).
     *
     * @param (int/array) $contactIds                   Contact id(s) - int if single contact id, array if multiple contact ids
     * @param string      $conn                         Connection variable
     * @param string      $clubService                  Club service
     * @param string      $container                    Container
     * @param string      $contactType                  Contact type
     * @param bool        $returnFedAndSubFedContactIds If true, then return input's fed_contact_id and sub_fed_contact_id too.
     *
     * @return array $contactNames Array of contact names
     */
    public function getContactName($contactIds, $conn = '', $clubService = '', $container = '', $contactType = 'contact', $returnFedAndSubFedContactIds = false)
    {
        $hasConnAlready = $conn ? true : false;
        if (!$hasConnAlready) {
            $conn = $this->getEntityManager()->getConnection();
        }
        $contactlistClass = new Contactlist($container, '', $clubService, $contactType);
        $contactlistClass->setColumns(array('contactid', 'contactname'));
        $contactlistClass->setFrom('*');
        $contactlistClass->setCondition();
        if (is_array($contactIds)) {
            $contactIds = implode(',', $contactIds);
        }
        $where = " fg_cm_contact.id IN ($contactIds)";
        $contactlistClass->addCondition($where);
        $listquery = $contactlistClass->getResult();
        $resultArray = $conn->fetchAll($listquery);
        if (!$hasConnAlready) {
            $conn->close();
        }
        $contactNames = array();
        foreach ($resultArray as $resultData) {
            $contactNames[$resultData['id']] = $resultData['contactname'];
            if ($returnFedAndSubFedContactIds) {
                $contactNames[$resultData['fed_contact_id']] = $resultData['contactname'];
                $contactNames[$resultData['subfed_contact_id']] = $resultData['contactname'];
            }
        }

        return $contactNames;
    }

    /**
     * Function to check fedeation member.
     *
     * @param int $contactId Contact id
     *
     * @return array
     */
    public function checkFederationMember($contactId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('IDENTITY(c.fedMembershipCat) as isFedCategory')
            ->Where('c.id=:contactId')
            ->andWhere('c.isDeleted=0')
            ->setParameters(array('contactId' => $contactId));

        $result = $qs->getQuery()->getResult();
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * Function to check club contact.
     *
     * @param int $contactId Contact id
     * @param int $clubId    Club id
     *
     * @return array
     */
    public function checkClubContact($contactId, $clubId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('c.id')
            ->Where('c.club=:clubId')
            ->andWhere('c.id=:contactId')
            ->setParameters(array('contactId' => $contactId, 'clubId' => $clubId));
        $result = $qs->getQuery()->getResult();
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * Function to get household or other connections contacts.
     *
     * @param int    $clubId      Club id
     * @param int    $contactId   Contact id
     * @param string $contactName Contact name
     *
     * @return array
     */
    public function getAllMainContact($clubId, $contactId, $contactName)
    {
        $conn = $this->getEntityManager()->getConnection();

        if ($contactName['is_company'] == 0) {
            $select = 'c.id as mainContactId,contactNameNoSort(c.id, 0) AS contactName,c.fed_contact_id as fedContactId';
            $where = 'c.comp_def_contact=(SELECT fed_contact_id FROM fg_cm_contact where id=:contactId)';
        } elseif ($contactName['is_company'] == 1) {
            $select = 'c.comp_def_contact as mainContactId,contactNameNoSort(c.comp_def_contact, 0) AS contactName,c.comp_def_contact as fedContactId';
            $where = 'c.id=:contactId';
        }
        $sql = "SELECT c.comp_def_contact_fun as functionName,$select
                 FROM fg_cm_contact c
                 WHERE $where AND
                 c.club_id =:clubId ";

        return $conn->fetchAll($sql, array('contactId' => $contactId,'clubId' => $clubId));
    }
    /**
     * Function to check fedeation member.
     *
     * @param int $contactId Contact id
     *
     * @return query result or as processed array based on the $contactId parameter
     */

    /**
     * Function to check fedeation member.
     *
     * @param int    $contactId                contact Id
     * @param string $systemFieldTeamPicture   system Field Team Picture
     * @param string $companyProfileTeamImages Company Profile Team Images
     * @param string $systemFieldCompanylogo   system Field Company logo
     *
     * @return array
     */
    public function getcompanyTeamProfileImages($contactId, $systemFieldTeamPicture, $companyProfileTeamImages, $systemFieldCompanylogo)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT c.id as ClubId,m.$systemFieldTeamPicture as teamPicture,m.$companyProfileTeamImages as profilePicture,m.$systemFieldCompanylogo as companyLogo
                 FROM fg_cm_contact fgc
                 LEFt JOIN fg_club c on c.id=fgc.club_id
                 LEFT JOIN master_system m on m.club_id=c.id and m.fed_contact_id=$contactId
                 WHERE fgc.id= :contactId";

        $result = $conn->fetchAll($sql, array('contactId' => $contactId));
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * Function to check fedeation member.
     *
     * @param int $contactId Contact id
     *
     * @return query result or as processed array based on the $contactId parameter
     */
    public function getMembershipDetails($contactId)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $timeFormat = FgSettings::getMysqlTimeFormat();
        $club = $this->container->get('club');
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT m.id as fedMembershipId,cc.old_fed_membership_id as oldFedmembershipId,cm.id as clubMembershipId,  date_format( cc.joining_date,'$datetimeFormat' ) AS joiningDate, TIME_FORMAT( cc.joining_date, '$timeFormat' ) AS joiningTime,cc.joining_date as mydate, IF(mi18n.title_lang !='' AND mi18n.title_lang IS NOT NULL, mi18n.title_lang, m.title) as fedmembershipTitle,IF(cmi18n.title_lang !='' AND cmi18n.title_lang IS NOT NULL, cmi18n.title_lang, cm.title)  as clubmembershipTitle
                 FROM fg_cm_contact c
                 LEFT JOIN fg_cm_contact cc ON c.fed_contact_id=cc.id
                 LEFT JOIN fg_cm_membership m on m.id=c.fed_membership_cat_id
                 LEFT JOIN fg_cm_membership cm on cm.id=c.club_membership_cat_id
                 LEFT JOIN fg_cm_membership_i18n mi18n on mi18n.id=m.id and mi18n.lang='" . $club->get('default_lang') . "'
                 LEFT JOIN fg_cm_membership_i18n cmi18n on cmi18n.id=cm.id and cmi18n.lang='" . $club->get('default_lang') . "'
                 WHERE c.id= :contactId";
        $result = $conn->fetchAll($sql, array('contactId' => $contactId));

        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * function to get the main contact id.
     *
     * @param int    $contactId the contact id
     * @param string $type      the type
     *
     * @return array
     */
    public function getMainContactId($contactId, $type)
    {
        $conn = $this->getEntityManager()->getConnection();
        if ($type == 'Single person') {
            $select = 'c.id as mainContactId';
            $where = 'c.comp_def_contact= :contactId';
        } elseif ($type == 'Company') {
            $select = 'c.comp_def_contact as mainContactId';
            $where = 'c.id= :contactId';
        }
        $sql = "SELECT $select FROM fg_cm_contact c WHERE $where";

        return $conn->fetchAll($sql, array('contactId' => $contactId));
    }

    /**
     * For collect the email of contactids.
     *
     * @param type $contactIds
     * @param type $emailField
     *
     * @return type
     */
    public function getEmailField($contactIds, $emailField)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT `$emailField`,fed_contact_id FROM master_system  mc WHERE mc.fed_contact_id IN (SELECT fed_contact_id FROM fg_cm_contact WHERE id IN($contactIds))";
        $resultArray = $conn->fetchAll($sql);
        $contactEmails = array();
        foreach ($resultArray as $resultData) {
            $contactEmails[$resultData['fed_contact_id']] = $resultData[$emailField];
        }

        return $contactEmails;
    }
    /**
     * @param type $contactIds
     */

    /**
     * To delete a contact,remove assignments, remove user rights	 *.
     *
     * @param array  $contacts           Array of contact ids.
     * @param int    $currentuser        Id of contact who logged in.
     * @param array  $insertStr          Insert array
     * @param string $dateStr            Current date
     * @param int    $clubId             Club id
     * @param string $systemFirstname    Firstname
     * @param string $systemLastname     Lastname
     * @param string $systemCompanyname  Company name
     * @param string $systemDob          DOB
     * @param string $teamTerminology    Team
     * @param string $clubHeirarchy      ClubHeirarchy
     * @param string $clubType           Club type
     * @param string $systemPrimaryEmail Primary email id
     * @param string $systemSalutation   Salutation id
     * @param string $systemGender       Gender id
     * @param string $systemCorresLang   Correspondance language
     * @param string $leavingDate        Date
     * @param int $isSubscriber          subscriberFlag
     */
    public function archiveContact($contacts, $currentuser, $insertStr, $dateStr, $clubId, $systemFirstname, $systemLastname, $systemCompanyname, $systemDob, $teamTerminology, $clubHeirarchy, $clubType, $systemPrimaryEmail, $systemSalutation, $systemGender, $systemCorresLang, $leavingDate, $isSubscriber = 0)
    {
        $conn = $this->getEntityManager()->getConnection();
        $createTableQry = 'CREATE TABLE  IF NOT EXISTS `archivecontactsto` ( contact_id INT(11), club_id INT(11), author VARCHAR(100), archived_date DATETIME , is_subscriber TINYINT(1) DEFAULT 1 ) ENGINE = InnoDB';
        $conn->executeQuery($createTableQry);
        $tableName = 'archivecontactsto';
        $strTodate = date('Y-m-d H:i:s', strtotime(date('Y-m-d H:i:s')));
        $simpleDate = date('Y-m-d H:i:s');
        $currTimestamp = time();
        if ($isSubscriber == 1) {
            $insert = 'INSERT INTO ' . $tableName . ' (`contact_id`,`club_id`,`author`,`archived_date` ,`is_subscriber`) VALUES ';
        } else {
            $insert = 'INSERT INTO ' . $tableName . ' (`contact_id`,`club_id`,`author`,`archived_date`) VALUES ';
        }

        $insert = $insert . $insertStr;
        $insertData = $contacts ? rtrim($insert, ',') . ';' : '';
        if ($contacts) {
            $conn->executeQuery($insertData);
        }

        $clubHeirarchy = implode(',', $clubHeirarchy);
//        echo "call archiveContactsV4('$tableName','$currentuser','$clubId','$systemFirstname','$systemLastname','$systemCompanyname','$systemDob','$teamTerminology','$dateStr','$strTodate','$simpleDate','$currTimestamp','$dateStr','$clubHeirarchy','$clubType','$systemPrimaryEmail','$systemSalutation','$systemGender','$systemCorresLang','$leavingDate')";exit;
        $result = $conn->executeQuery("call archiveContactsV4('$tableName','$currentuser','$clubId','$systemFirstname','$systemLastname','$systemCompanyname','$systemDob','$teamTerminology','$dateStr','$strTodate','$simpleDate','$currTimestamp','$dateStr','$clubHeirarchy','$clubType','$systemPrimaryEmail','$systemSalutation','$systemGender','$systemCorresLang','$leavingDate')");
        $conn->close();
        $contactIds = '';
        if ($contacts && count($contacts) > 1) {
            $contactIds = implode(' ', $contacts);
            $process = new Process("php ../fairgate4/bin/console archivedcontact:remove $contactIds");
            $process->start();
        } else if ($contacts) {
            $process = new Process("php ../fairgate4/bin/console archivedcontact:remove $contacts");
            $process->start();
        }
    }

    /**
     * For get contact data.
     *
     * @param string $contactIds       Contact ids
     * @param int    $currentContactId Current contact id
     * @param int    $subscriberIds    Subscriber ids
     * @param string $clubName         Club name
     * @param int    $hasFedMembership Is the contact having federation membership
     */
    public function activateContact($contactIds, $currentContactId, $subscriberIds, $clubId, $hasFedMembership, $container)
    {
        $currentDate = date('Y-m-d H:i:s');
        $contactIdArray = explode(',', $contactIds);
        foreach ($contactIdArray as $val) {
            $contactObj = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmContact')->find($val);
            $fedContactId = $contactObj->getFedContact()->getId();
            $masterObj = $this->getEntityManager()->getRepository('CommonUtilityBundle:MasterSystem')->findOneBy(array('fedContact' => $fedContactId));
            $email = $masterObj->getPrimaryEmail();
            //insert into sf guard user
            //`first_name`, `last_name`, `username`, `username_canonical`, `email`, `email_canonical`, `created_at`, `updated_at`, `contact_id`, `club_id`,`roles`
            $sfGuardUser[] = "('" . $masterObj->getFirstName() . "','" . $masterObj->getLastName() . "','$email','$email','$email','$email','$currentDate','$currentDate','$val','$clubId')";
            $newIds[] = $val;
            $newIds[] = $fedContactId;
            if (is_object($contactObj->getSubfedContact())) {
                $newIds[] = $contactObj->getSubfedContact()->getId();
            }
        }

        $newIdsStr = implode(',', $newIds);
        $conn = $this->getEntityManager()->getConnection();
        $contactSql = "update fg_cm_contact set is_deleted=0 WHERE id IN ($newIdsStr)";
        $conn->executeQuery($contactSql);
        $clubObj = $container->get('fg.admin.connection')->getAdminEntityManager()->getRepository('AdminUtilityBundle:FgClub')->find($clubId);        
        $c2WithApp = $clubObj->getAssignFedmembershipWithApplication();

        $fedContactIdArray = array();
        foreach ($contactIdArray as $val) {
            $contactObj = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmContact')->find($val);
            $fedContactIdArray[] = $contactObj->getFedContact()->getId();
        }
        $fedContactIdStr = implode(',', $fedContactIdArray);
        //remove archievde on date
        $archievedOnQry = "UPDATE fg_cm_contact SET archived_on ='0000-00-00 00:00:00' WHERE fed_contact_id IN($fedContactIdStr)";
        $conn->executeQuery("$archievedOnQry");
        if (($hasFedMembership == 1) && ($c2WithApp == 0)) {
            $updateFfmQuery = "UPDATE fg_cm_contact SET is_former_fed_member=0 WHERE fed_contact_id IN($fedContactIdStr)";
            $conn->executeQuery("$updateFfmQuery");
        }

        if ($subscriberIds != '') {
            $subscriberSql = "update fg_cm_contact set is_subscriber=1 WHERE id IN ($subscriberIds)";
            $conn->executeQuery($subscriberSql);
        }

        $idArray = explode(',', $contactIds);
        $insertValues = array();
        foreach ($idArray as $id) {
            $contactObj = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmContact')->find($val);
            $fedContactId = $contactObj->getFedContact()->getId();
            $insertValues[] = "('$fedContactId','$currentDate','contact status','-','REACTIVATED','$currentContactId')";
        }
        if (count($insertValues)) {
            $valueString = implode(',', $insertValues);
            $sql = "INSERT INTO fg_cm_change_log (`contact_id`,`date`,`kind`,`field`,`value_after`,`changed_by`) VALUES $valueString";
            $conn->executeQuery($sql);
            $newUserQry = 'INSERT INTO sf_guard_user (`first_name`, `last_name`, `username`, `username_canonical`, `email`, `email_canonical`, `created_at`, `updated_at`, `contact_id`, `club_id`) VALUES ' . implode(',', $sfGuardUser) . ';';
            $conn->executeQuery($newUserQry);
        }
    }

    /**
     * For get contact data.
     *
     * @param int $contactId
     *
     * @return type
     */
    public function getDeletedfielddata($contactId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('c.isDeleted,c.isFormerFedMember')
            ->Where('c.id=:contactId')
            ->setParameters(array('contactId' => $contactId));
        $result = $qs->getQuery()->getResult();
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * Function to get the active contacts of a club/subfederation.
     *
     * @param int $clubId   clubId of club
     * @param int $isSubFed if subfed(1) else if club(0)
     *
     * @return array
     */
    public function activeContactsCount($clubId, $isSubFed)
    {
        $conn = $this->getEntityManager()->getConnection();
        $commonCondition = " ((fg_cm_contact.main_club_id=fg_cm_contact.club_id) OR (fg_cm_contact.fed_membership_cat_id IS NOT NULL AND (fg_cm_contact.old_fed_membership_id IS NOT NULL OR fg_cm_contact.is_fed_membership_confirmed='0')) )";
        if ($isSubFed == 1) {
            $table = 'master_federation_';
            $andwhere = " AND ((mf.club_id = '$clubId') )";
            $fieldjoin = 'fg_cm_contact.subfed_contact_id';
        } elseif ($isSubFed == 0) {
            $table = 'master_club_';
            $andwhere = '';
            $fieldjoin = 'fg_cm_contact.id';
        }
        $sql = 'select count(fg_cm_contact.id) as count from ' . $table . $clubId . ' as mf' .
            ' inner join fg_cm_contact on (mf.contact_id =' . $fieldjoin . ' )' .
            ' where fg_cm_contact.is_permanent_delete=0 AND fg_cm_contact.is_deleted=0 AND fg_cm_contact.club_id=' . $clubId . '  AND ' . $commonCondition . ' ' . $andwhere;

        return $conn->fetchAll($sql);
    }

    /**
     * Function to update login count.
     *
     * @param type $contactId Contact id
     *
     * @return $contactObj contact Object
     */
    public function updateLoginCount($contactId)
    {
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $contactObj->setLoginCount($contactObj->getLoginCount() + 1)
            ->setLastLogin(new \DateTime('now'));
        $this->_em->persist($contactObj);
        $this->_em->flush();

        return $contactObj;
    }

    /**
     * Function to get Assignment, Connection, Notes count of a Contact.
     *
     * @param int    $clubId           Club Id
     * @param int    $contactId        Contact Id
     * @param bool   $isCompany        Whether Contact is Company or not
     * @param string $clubType         Club Type
     * @param bool   $getConnCount     Whether to get Connection Count or not
     * @param bool   $getAsgmntCount   Whether to get Assignment Count or not
     * @param bool   $getNotesCount    Whether to get Notes Count or not
     * @param bool   $getDocsCount     Whether to get Documents Count or not
     * @param bool   $getServicesCount Whether to get Services Count or not
     * @param bool   $getAdsCount      Whether to get Ads Count or not
     * @param bool   $isArchiveSponsor Whether archivedsponsor or not
     * @param int    $fedId            Federation Id
     * @param int    $subFedId         Sub-Federation Id
     *
     * @return array $resultArray Result array containing count of Assignment, Connection, Notes.
     */
    public function getContactCountDetails($clubId, $contactId, $isCompany, $clubType, $getConnCount = true, $getAsgmntCount = true, $getNotesCount = true, $getDocsCount = false, $getServicesCount = false, $getAdsCount = false, $isArchiveSponsor = false, $fedId = '', $subFedId = '')
    {
        $resultArray = array();
        $conn = $this->getEntityManager()->getConnection();
        if ($getConnCount) {
            if ($isCompany) {
                $connections = $conn->fetchAssoc('SELECT COUNT(lc.`id`) AS lcCount, '
                    . "(SELECT COUNT(c.`id`) FROM `fg_cm_contact` c WHERE c.`id`=:contactId AND c.`comp_def_contact` IS NOT NULL AND c.`comp_def_contact`<>'') AS mcCount "
                    . 'FROM `fg_cm_linkedcontact` lc WHERE lc.`contact_id`=:contactId AND lc.`club_id`=:clubId', array('contactId' => $contactId, 'clubId' => $clubId));
            } else {
                $connections = $conn->fetchAssoc('SELECT COUNT(lc.`id`) AS lcCount, '
                    . '(SELECT COUNT(c.`id`) FROM `fg_cm_contact` c WHERE  c.id=c.fed_contact_id AND c.comp_def_contact IN (SELECT fed_contact_id FROM fg_cm_contact WHERE id=:contactId)) AS mcCount '
                    . 'FROM `fg_cm_linkedcontact` lc WHERE lc.`contact_id`=:contactId AND lc.`club_id`=:clubId', array('contactId' => $contactId, 'clubId' => $clubId));
            }
            $linkedConnCount = $connections['lcCount'] + $connections['mcCount'];
            $resultArray['connectionCount'] = $linkedConnCount;
        }

        if ($getAsgmntCount) {
            $clubIdArray = array('clubId' => $clubId, 'federationId' => $fedId, 'subFederationId' => $subFedId, 'clubType' => $clubType);
            $getAllAssignedCategories = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgRmCategory')->getAssignmentsCount($clubIdArray, $conn, $contactId);
            $resultArray['asgmntsCount'] = $getAllAssignedCategories['asgmntCount'];
        }

        if ($getNotesCount) {
            $notes = $conn->fetchAssoc('SELECT COUNT(c.`id`) AS notesCnt FROM `fg_cm_notes` c where c.`contact_id`=:contactId AND c.`club_id`=:clubId', array('contactId' => $contactId, 'clubId' => $clubId));
            $resultArray['notesCount'] = $notes['notesCnt'];
        }
        if ($getDocsCount) {
            $resultArray['documentsCount'] = $this->_em->getRepository('CommonUtilityBundle:FgDmAssigment')->getCountOfAssignedDocuments('CONTACT', $clubId, $contactId);
        }
        if ($getServicesCount) {
            $resultArray['servicesCount'] = $this->_em->getRepository('CommonUtilityBundle:FgSmBookings')->getCountOfSponsorServices($clubId, $contactId, $isArchiveSponsor);
        }
        if ($getAdsCount) {
            $resultArray['adsCount'] = $this->_em->getRepository('CommonUtilityBundle:FgSmSponsorAds')->getCountOfSponsorAds($clubId, $contactId);
        }

        return $resultArray;
    }

    /**
     * Function to update login count.
     *
     * @param string $contactIds       Contact id
     * @param int    $clubId           Club id
     * @param object $container        Container object
     * @param int    $currentContactId Current contact id
     */
    public function deleteContactPermanently($contactIds, $clubId, $container, $currentContactId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $qb = $this->createQueryBuilder();
        $q = $qb->update('CommonUtilityBundle:FgCmContact', 'c')
            ->set('c.isPermanentDelete', '1')
            ->where('c.id IN (:contactIds)')
            ->setParameter('contactIds', $contactIds)
            ->getQuery();

        $p = $q->execute();

        $valueBefore = 'Archivedcontact';
        $valueAfter = 'Permanentlydeleted';
        $currentDate = date('Y-m-d H:i:s');
        foreach ($contactIds as $id) {
            $insertValues[] = "('$id','$currentDate','contact status','$valueAfter','$valueBefore','$currentContactId')";
        }
        if (count($insertValues)) {
            $valueString = implode(',', $insertValues);
            $conn->executeQuery("INSERT INTO fg_cm_change_log (`contact_id`,`date`,`kind`,`value_after`,`value_before`,`changed_by`) VALUES $valueString");
        }

        return;
    }

    /**
     * For delete the former federation member.
     *
     * @param array  $contactIds       Contact Ids
     * @param int    $currentContactId Current contact id
     * @param object $container        Container object
     *
     * @return array
     */
    public function deleteFormerFedMember($contactIds, $currentContactId, $container)
    {
        $translator = $container->get('translator');
        $terminologyService = $container->get('fairgate_terminology_service');
        $federationmemberTerminology = $terminologyService->getTerminology('Federation member', $container->getParameter('singular'));
        $conn = $this->getEntityManager()->getConnection();
        $this->deleteFormerFederationMember($contactIds);
        $idArray = $contactIds;
        $insertValues = array();
        $currentDate = date('Y-m-d H:i:s');
        $valueBefore = $translator->trans('FORMER_FED_MEMBER_LOG_ENTRY', array('%fedmember%' => $federationmemberTerminology));
        foreach ($idArray as $id) {
            $insertValues[] = "('$id','$currentDate','contact type','','$valueBefore','$currentContactId')";
        }
        if (count($insertValues)) {
            $valueString = implode(',', $insertValues);
            $conn->executeQuery("INSERT INTO fg_cm_change_log (`contact_id`,`date`,`kind`,`value_after`,`value_before`,`changed_by`) VALUES $valueString");
        }
    }

    /**
     * For collect all authenticated contact of particular fed/sbfed/club.
     *
     * @param object $clubService club service
     * @param int    $contactId   Id
     * @param string $module      contact or sponsor
     *
     * @return array
     */
    public function getAllAuthenticatedContact($clubService, $contactId, $module = 'contact')
    {
        $clubtype = $clubService->get('type');
        $where = '';
        $from = '';
        switch ($clubtype) {
            case 'federation':
                $from = "master_federation_{$clubService->get('id')} as mc INNER JOIN fg_cm_contact as fc on mc.fed_contact_id = fc.id";
                $where = 'fc.is_former_fed_member=1 OR (mc.club_id=' . $clubService->get('id') . ' AND fc.is_permanent_delete=0) OR (mc.club_id !=' . $clubService->get('id') . ' AND fc.is_deleted=0 AND fc.is_permanent_delete=0 AND fc.fed_membership_cat_id IS NOT NULL or fc.fed_membership_cat_id !="")';
                break;
            case 'sub_federation':
                $from = "master_federation_{$clubService->get('id')} as mc INNER JOIN fg_cm_contact as fc on mc.contact_id = fc.id";
                $where = 'fc.is_former_fed_member=1 OR (mc.club_id=' . $clubService->get('id') . ' AND fc.is_permanent_delete=0) OR (mc.club_id !=' . $clubService->get('id') . ' AND fc.is_deleted=0 AND fc.is_permanent_delete=0 AND fc.fed_membership_cat_id IS NOT NULL or fc.fed_membership_cat_id !="")';
                break;
            default:
                $from = "master_club_{$clubService->get('id')} as mc INNER JOIN fg_cm_contact  as fc on mc.contact_id = fc.id";
                $where = '(fc.is_permanent_delete=0) ';
        }

        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT fc.is_former_fed_member,fc.is_permanent_delete,fc.is_deleted,fc.id, fc.club_id, fc.fed_membership_cat_id ,fc.is_deleted,	fc.old_fed_membership_id,fc.is_fed_membership_confirmed,fc.main_club_id,fc.created_club_id FROM ' . $from . ' WHERE (' . $where . ") AND fc.id='" . FgUtility::getSecuredData($contactId, $conn) . "'";
        if ($module === 'sponsor') {
            $sql .= ' AND fc.is_sponsor = 1';
        }
        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * For collect the count of former federation member count.
     *
     * @param int $clubId
     *
     * @return type
     */
    public function getFormerfederationmemberCount($clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT count(id) as Count FROM fg_cm_contact WHERE is_former_fed_member = 1 AND club_id =' . $clubId;
        $result = $conn->fetchAll($sql);

        return $result[0]['Count'];
    }

    /**
     * Function to get the fedmember active contacts ids of a club/federation.
     *
     * @param type $clubId clubId
     * @param type $isFed  if     fed(1) else if club(0)
     *
     * @return int count
     */
    public function activeContactFedMembers($clubId, $isFed)
    {
        $conn = $this->getEntityManager()->getConnection();

        if ($isFed == 1) {
            $table = 'master_federation_';
            $andwhere = '';
            //$andwhere =  " AND mf.is_fed_member =1";
        } elseif ($isFed == 0) {
            $table = 'master_club_';
            $andwhere = '';
        }

        $sql = "select fg_cm_contact.id from {$table}{$clubId} as mf" .
            ' inner join fg_cm_contact on (mf.contact_id = fg_cm_contact.id )' .
            ' inner join fg_cm_membership cm on (fg_cm_contact.membership_cat_id = cm.id)' .
            ' where fg_cm_contact.is_permanent_delete=0 AND fg_cm_contact.is_deleted=0' .
            ' AND cm.is_fed_category=1 ' . $andwhere;

        return $conn->fetchAll($sql);
    }

    /**
     * For delete the former federation member.
     *
     * @param array $contactId
     *
     * @return type
     */
    public function deleteFormerFederationMember($contactId)
    {
        $qb = $this->createQueryBuilder();
        $q = $qb->update('CommonUtilityBundle:FgCmContact', 'c')
            ->set('c.isFormerFedMember', '0')
            ->where('c.fedContact IN (:contactIds)')
            ->setParameter('contactIds', $contactId)
            ->getQuery();

        $p = $q->execute();

        return;
    }

    /**
     * Function to update contact's data.
     *
     * @param int    $contactId ContactId
     * @param string $colName   ColumnName
     * @param string $colVal    ColumnVal
     * @param string $type      Club/Federation dates are updated
     *
     * @return
     */
    public function updateContactData($contactId, $colName = '', $colVal = '', $type = 'club')
    {
        $qb = $this->createQueryBuilder();
        if ($colName != '' && $colVal != '') {
            $now = date('Y-m-d H:i:s');
            $isFirstJoiningDate = 0;
            if ($colName == 'joiningDate' || $colName == 'firstJoiningDate') {
                $isFirstJoiningDate = $this->checkWhetherIsFirstJoiningDate($contactId);
            }
            $q = $qb->update('CommonUtilityBundle:FgCmContact', 'c')
                ->set('c.' . $colName, $qb->expr()->literal($colVal));
            if ($isFirstJoiningDate) {
                $colName1 = ($colName == 'joiningDate') ? 'firstJoiningDate' : 'joiningDate';
                $q = $q->set('c.' . $colName1, $qb->expr()->literal($colVal));
            }
            if ($type == 'club') {
                $q = $q->set('c.lastUpdated', $qb->expr()->literal($now));
            }
            $q = $q->where('c.id =:contactId')
                ->setParameter('contactId', $contactId)
                ->getQuery();
            $p = $q->execute();
        }

        return;
    }

    /**
     * get primar email of given contact ids.
     *
     * @param string $contactId           Contact id
     * @param string $membershipHistoryId Membership history id
     * @param string $colName             Column name
     * @param string $colVal              Column value
     */
    public function updateContactJoiningLeavingDate($contactId, $membershipHistoryId = '', $colName = '', $colVal = '')
    {
        if ($contactId != '' && $membershipHistoryId != '') {
            $now = date('Y-m-d H:i:s');
            switch ($colName) {
                case 'joining_date':
                    $set = 'c.joining_date = :value, c.last_updated = :now';
                    $where = 'c.joining_date=mh.joining_date';
                    break;
                case 'leaving_date':
                    $set = 'c.leaving_date = :value, c.last_updated = :now';
                    $where = 'c.leaving_date=mh.leaving_date';
                    break;
                default:
                    break;
            }
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_contact c JOIN fg_cm_membership_history mh ON (c.id=mh.contact_id AND ' . $where . ') SET ' . $set . ' WHERE c.id =:contactId AND mh.id =:mId AND ' . $where;
            $conn->executeQuery($sql, array(':contactId' => $contactId, ':mId' => $membershipHistoryId, ':value' => $colVal, ':now' => $now));
        }

        return;
    }

    /**
     * Get primary email of given contact ids.
     *
     * @param string $contactsIds contact ids
     *
     * @return array
     */
    public function getPrimaryEmail($contactsIds)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT ms.`3` as email, ms.fed_contact_id as contactId FROM fg_cm_contact c "
            . "INNER JOIN master_system ms ON c.fed_contact_id = ms.fed_contact_id "
            . "WHERE c.id IN ($contactsIds)";
        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * Function to get contacts having primary-email for given contact type.
     *
     * @param object $container      Container object
     * @param int    $currContactId  Current logged-in contact id
     * @param object $club           Club object
     * @param array  $columns        Array of columns
     * @param string $contactType    Contact type
     * @param bool   $getSubscribers Whether to get newsletter subscribers only
     * @param bool   $getCount       Whether to get contact details or contact count
     *
     * @return array $resultArray Result array
     */
    public function getContactsHavingPrimaryEmail($container, $currContactId, $club, $columns, $contactType = 'contact', $getSubscribers = false, $getCount = false, $selcontact)
    {
        $em = $this->getEntityManager();
        $primaryEmailId = $container->getParameter('system_field_primaryemail');
        $condition = '(`' . $primaryEmailId . '` IS NOT NULL AND `' . $primaryEmailId . "` !='')";
        if ($getSubscribers) {
            $condition .= ' AND fg_cm_contact.is_subscriber=1';
        }
        $contactlistClass = new Contactlist($container, $currContactId, $club, $contactType);
        if ($getCount) {
            $contactlistClass->setCount();
        } else {
            $contactlistClass->setColumns($columns);
        }
        $contactlistClass->setFrom();
        $contactlistClass->setCondition();
        $contactlistClass->addCondition($condition);

        if ($selcontact != '') {

            $subcondition .= '  fg_cm_contact.id in (' . $selcontact . ')';
            $contactlistClass->addCondition($subcondition);
        }
        $listquery = $contactlistClass->getResult();
        $resultArray = $em->getRepository('CommonUtilityBundle:FgCmMembership')->getContactList($listquery);

        return $resultArray;
    }

    /**
     * Function to get contact's club Id.
     *
     * @param int $contactId contactId
     *
     * @return int
     */
    public function getContactClubId($contactId)
    {
        $query = $this->createQueryBuilder('c')
            ->select('clb.id')
            ->leftJoin('c.club', 'clb')
            ->Where('c.id=:contactId')
            ->setParameters(array('contactId' => $contactId));

        $result = $query->getQuery()->getResult();

        return $result[0]['id'];
    }

    /**
     * Function to get contact details from contact id.
     *
     * @param int    $contactId   Current logged-in contact id
     * @param string $masterTable mastertable
     * @param string $clubType    type of the club federation/subfederation or standard club
     *
     * @return array $result Result array
     */
    public function getContactDetails($contactId, $masterTable, $clubType = '')
    {
        $conn = $this->getEntityManager()->getConnection();
        $contact_filed = ($clubType == 'federation') ? 'mf.fed_contact_id' : 'mf.contact_id';
        $sql = "SELECT m.3 as Email,m.2 as FirstName,m.23 as LastName,c.club_type as clubType,c.parent_club_id as parentClub,m.72 as Gender,m.1 as Salutation,m.9 as Company,fgc.is_subscriber as Subscriber
                 FROM fg_cm_contact fgc
                 LEFT JOIN fg_club c on c.id=fgc.club_id
                 LEFT JOIN master_system m on m.fed_contact_id=fgc.fed_contact_id
                 LEFT JOIN $masterTable mf on $contact_filed = $contactId
                 WHERE fgc.id= :contactId";

        $result = $conn->fetchAll($sql, array('contactId' => $contactId));

        return $result[0];
    }

    /**
     * function to get contact name with yob.
     *
     * @param string $contactId Contact id
     *
     * @return array Array of contact names
     */
    public function getContactPrimaryEmail($contactId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT m.3 as Email
                 FROM fg_cm_contact fgc
                 LEFT JOIN master_system m on m.fed_contact_id=fgc.fed_contact_id
                 WHERE fgc.id= :contactId';

        $result = $conn->fetchAll($sql, array('contactId' => $contactId));

        return $result[0]['Email'];
    }

    /**
     * function to get contact name with yob.
     *
     * @param (int/array) $contactIds  Contact id(s) - int if single contact id, array if multiple contact ids
     * @param string      $conn        Connection variable
     * @param string      $clubService Club service
     * @param string      $container   Container
     * @param string      $contactType Contact type
     *
     * @return array $contactNames with yob Array of contact names
     */
    public function contactNameYOB($contactIds, $conn = '', $clubService = '', $container = '', $contactType = 'contact')
    {
        $hasConnAlready = $conn ? true : false;
        if (!$hasConnAlready) {
            $conn = $this->getEntityManager()->getConnection();
        }
        $contactlistClass = new Contactlist($container, '', $clubService, $contactType);
        $contactlistClass->setColumns(array('contactNameYOB'));
        $contactlistClass->setFrom('*');
        $contactlistClass->setCondition();
        if (is_array($contactIds)) {
            $contactIds = implode(',', $contactIds);
        }
        $where = " fg_cm_contact.id IN ($contactIds)";
        $contactlistClass->addCondition($where);
        $listquery = $contactlistClass->getResult();
        $resultArray = $conn->fetchAll($listquery);
        if (!$hasConnAlready) {
            $conn->close();
        }
        $contactNames = array();
        foreach ($resultArray as $resultData) {
            $contactNames[$resultData['id']] = $resultData['contactNameYOB'];
        }

        return $contactNames;
    }

    /**
     * function for unscubscribeing newsletter of a contact.
     *
     * @param string $contact  Contact id
     * @param string $club     Club id
     */
    public function unsubscribeContact($contact, $club)
    {
        if ($contact != '') {
            $now = date('Y-m-d H:i:s');
            $sql = "UPDATE fg_cm_contact SET is_subscriber = 0 WHERE id = $contact";
            $conn = $this->getEntityManager()->getConnection();
            $conn->executeQuery($sql);
            $changelogDataQuery = 'INSERT INTO fg_cm_change_log(contact_id, date, kind, field, value_before, value_after, changed_by, attribute_id, is_confirmed, confirmed_by, confirmed_date, club_id)' .
                " VALUES($contact, '$now', 'system','newsletter', 'subscribed', 'unsubscribed', $contact, NULL, NULL, NULL, NULL, $club)";

            $conn->executeQuery($changelogDataQuery);
        }
    }

    /**
     * function for subscribing newsletter of a contact.
     *
     * @param string $contact  Contact id
     * @param string $club     Club id
     */
    public function subscribeContact($contact, $club)
    {
        if ($contact != '') {
            $now = date('Y-m-d H:i:s');
            $sql = "UPDATE fg_cm_contact SET is_subscriber = 1 WHERE id = $contact";
            $conn = $this->getEntityManager()->getConnection();
            $conn->executeQuery($sql);
            $changelogDataQuery = 'INSERT INTO fg_cm_change_log(contact_id, date, kind, field, value_before, value_after, changed_by, attribute_id, is_confirmed, confirmed_by, confirmed_date, club_id)' .
                " VALUES($contact, '$now', 'system','newsletter', '', 'subscribed', $contact, NULL, NULL, NULL, NULL, $club)";

            $conn->executeQuery($changelogDataQuery);
        }
    }

    /**
     * This function is used to check if a contact is a newsletter subscriber or not.
     *
     * @param int $contactId contactId
     *
     * @return int $isSubscriber O or 1 value
     */
    public function isContactSubscribed($contactId)
    {
        if ($contactId != '') {
            $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
            $isSubscriber = $contactObj->getIsSubscriber();

            return $isSubscriber;
        }
    }

    /**
     * function to get contacts details for search from topnavigation autocomplete
     * and add-sponsors from existing contacts.
     *
     * @param array  $contactlistClass Object of contact list class
     * @param string $dob              Filedname of date-of-birth(`4`)
     * @param string $searchTerm       Search term
     * @param string $module           (if module == 'sponsor' - add-sponsors from existing contacts,  else from topnavigation autocomplete )
     * @param bool   $checkStealthMode If true, contacts in stealth mode are excluded from the search
     * @param int    $is_draft         Contact is draft or not
     *
     * @return array
     */
    public function getContactsForSearch($contactlistClass, $dob, $searchTerm, $module = '', $checkStealthMode = false, $is_draft)
    {
        if ($searchTerm == '') {
            $listquery = '';
        } else {
            $search = explode(' ', trim($searchTerm), 2);
            if (sizeof($search) > 1) {
                $listquery = " CASE WHEN fg_cm_contact.is_company=0 THEN ((`23` LIKE '$search[0]%' OR `2` LIKE '$search[0]%') AND (`23` LIKE '$search[1]%' OR `2` LIKE '$search[1]%')) "
                    . " ELSE ( CASE WHEN has_main_contact=1 THEN ((`23` LIKE '$search[0]%' OR `2` LIKE '$search[0]%' OR `9` LIKE '$search[0]%') AND (`23` LIKE '$search[1]%' OR `2` LIKE '$search[1]%' OR `9` LIKE '$search[1]%') ) "
                    . " ELSE ( `9` LIKE '$search[0]%' AND `9` LIKE '$search[0]%' ) "
                    . ' END ) END ';
            } else {
                $listquery = " CASE WHEN fg_cm_contact.is_company=0 THEN (`23` LIKE '$searchTerm%' OR `2` LIKE '$searchTerm%') "
                    . " ELSE ( CASE WHEN has_main_contact=1 THEN (`23` LIKE '$searchTerm%' OR `2` LIKE '$searchTerm%' OR `9` LIKE '$searchTerm%' ) "
                    . " ELSE ( `9` LIKE '$searchTerm%' ) "
                    . ' END ) END ';
            }
        }

        $contactlistClass->setColumns(array('contactnamewithcomma', 'isCompany', 'has_main_contact', 'DATE(`' . $dob . '`) as birthyear', 'is_draft'));
        $contactlistClass->setFrom();
        $contactlistClass->setCondition();
        $contactlistClass->addCondition($listquery);
        if ($module === 'sponsor') {
            $contactlistClass->addCondition(' fg_cm_contact.is_sponsor != 1 ');
        }
        if ($checkStealthMode) {
            $contactlistClass->addCondition(' fg_cm_contact.is_stealth_mode != 1 ');
        }
        if (isset($is_draft)) {
            $contactlistClass->addCondition('is_draft = ' . $is_draft);
        }
        $contactlistClass->setLimit(20);
        $contactlistClass->addOrderBy('contactName ASC, isCompany DESC');
        $query = $contactlistClass->getResult();
        $finalQuery = 'SELECT TAB.id as id, IF(isCompany = 0,( IF((`' . $dob . '` IS NOT NULL AND DATE(`' . $dob . "`) != '0000-00-00'), CONCAT( contactName, ' (',DATE_FORMAT(`" . $dob . "`,'%Y'),')') , contactName ) ),contactName) as title, isCompany, contactName FROM ($query) TAB "
            . ' INNER JOIN master_system ON TAB.fed_contact_id = master_system.fed_contact_id '
            . ' ORDER BY contactName ASC, isCompany DESC ';

        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->fetchAll($finalQuery);

        return $result;
    }

    /**
     * Method to call stored procedure for  updating contacts (from contact/sponsor import).
     *
     * @param string $tableName    Name of the table
     * @param int    $clubId       Club Id
     * @param int    $contactId    Contact Id
     * @param string $contactType  Contact Type
     * @param string $ownTable     Own table or not
     * @param string $clubType     Type of the club
     * @param string $subFedId     Sub federation Id
     * @param string $fedId        Federation Id
     */
    public function callUpdateContacts($tableName, $clubId, $contactId, $contactType, $ownTable, $clubType, $subFedId, $fedId)
    {
        if ($clubType == 'federation' || $clubType == 'federation_club') {
            $subFedId = 0;
        }
        $fedId = ($clubType == 'standard_club') ? 0 : $fedId;
        $subFedId = ($clubType == 'standard_club') ? 0 : $subFedId;
        $conn = $this->getEntityManager()->getConnection();
        $sql = "CALL updateContacts_V2('" . $tableName . "','import_maping','" . $clubId . "','" . $contactId . "','" . $contactType . "','" . $ownTable . "','" . $clubType . "','" . $fedId . "','$subFedId ')";
        $conn->executeQuery($sql);
    }

    /**
     * Method to call stored procedure for importing contacts (from contact/sponsor import).
     *
     * @param string $tableName   temp table
     * @param int    $clubId      current club Id
     * @param int    $contactId   contactId
     * @param string $contactType contactType
     * @param string $ownTable    master -table for that club
     * @param string $clubType     Type of the club
     * @param string $subFedId     Sub federation Id
     * @param string $fedId        Federation Id
     * @return string
     */
    public function callImportContacts($tableName, $clubId, $contactId, $contactType, $ownTable, $clubType, $subFedId, $fedId, $fedMemWApp)
    {
        $conn = $this->getEntityManager()->getConnection();
       
        $sql = "CALL importContacts('" . $tableName . "','import_maping','" . $clubId . "','" . $contactId . "','" . $contactType . "','" . $ownTable . "','" . $clubType . "','" . $subFedId . "','" . $fedId . "','$fedMemWApp ' )";
        $conn->executeQuery($sql);

        return $sql;
    }

    /**
     * Method to call stored procedure for importing contacts with sharing
     *
     * @param string $tableName   temp table
     * @param int    $clubId      current club Id
     * @param int    $contactId   contactId
     * @param string $contactType contactType
     * @param string $ownTable    master -table for that club
     * @param string $clubType     Type of the club
     * @param string $subFedId     Sub federation Id
     * @param string $fedId        Federation Id
     * @return string
     */
    public function callImportShareContacts($tableName, $clubId, $contactId, $contactType, $clubType)
    {
        $conn = $this->getEntityManager()->getConnection();
        //echo "CALL importShareContacts('" . $tableName . "','" . $clubId . "','" . $contactId . "','" . $contactType . "','" . $clubType . "' )";
        $sql = "CALL importShareContacts('" . $tableName . "','" . $clubId . "','" . $contactId . "','" . $contactType . "','" . $clubType . "' )";
        $conn->executeQuery($sql);

        return $sql;
    }

    /**
     * Method to call stored procedure for delete duplicate subscribers (from contact/sponsor import).
     *
     * @param int $clubId current club Id
     */
    public function callDeleteDuplicateSubscribers($clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "CALL deleteDuplicateSubscribers(' $clubId ')";
        $conn->executeQuery($sql);
    }

    /**
     * Function to removeFirstRow, if first row is skipped (from contact/sponsor import).
     *
     * @param string $tableName         Import table name
     * @param bool   $notImportFirstRow Firstrow in CSV is skipped or not
     */
    public function removeFirstRow($tableName, $notImportFirstRow)
    {
        if ($notImportFirstRow == '1') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "UPDATE `$tableName` SET is_removed = 1 WHERE row_id=1";
            $conn->executeQuery($sql);
        }
    }

    /**
     * Function to update columns in import temporary table table (from contact/sponsor import).
     *
     * @param int    $federationId    Federation Id
     * @param int    $tableName       Import temporary table name
     * @param array  $columns         Array columns and its changes
     * @param array  $clubLanguages
     * @param string $clubDefaultLang
     */
    public function updateImportTable($federationId, $tableName, $columns, $clubLanguages, $clubDefaultLang)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $setValues = array();
        foreach ($columns as $column => $columnType) {
            switch ($columnType) {
                case 'intranet_access':
                    $setValues[] = "$column = IF($column ='0', '0', '1')";
                    break;
                case 'dispatch_type_invoice':case 'dispatch_type_dun':
                    $setValues[] = "$column = IF($column ='0', 'POST', 'EMAIL')";
                    break;
                case 'joining_date':
                    $setValues[] = "$column = IF(STR_TO_DATE($column, '$dateFormat')='0000-00-00', NOW(),STR_TO_DATE($column, '$dateFormat'))";
                    break;
                case 'leaving_date':
                    $setValues[] = "$column = IF(STR_TO_DATE($column, '$dateFormat')='0000-00-00', '',STR_TO_DATE($column, '$dateFormat'))";
                    break;
                case 'date':
                    $setValues[] = "$column = IF(STR_TO_DATE($column, '$dateFormat')='0000-00-00', '',STR_TO_DATE($column, '$dateFormat'))";
                    break;
                case 'number':
                    $setValues[] = "$column = REPLACE($column,'" . FgSettings::getDecimalMarker() . "','.')";
                    break;
                case 'url':
                    $setValues[] = "$column = CONCAT(IF($column ='' OR $column LIKE '%://%' , '', 'http://'), $column)";
                    break;
                case 'salutation':
                    $setValues[] = "$column = IF($column ='1', 'Formal', 'Informal')";
                    break;
                case 'gender':
                    $setValues[] = "$column = IF($column ='1', 'Male', 'Female')";
                    break;
                case 'checkbox':
                    $setValues[] = "$column = REPLACE($column,',',';')";
                    break;
                case 'country':
                    $setValues[] = "$column = UPPER($column)";
                    break;
                case 'corres_lang':
                    $coressCheck = array();
                    foreach ($clubLanguages as $lang) {
                        $coressCheck[] = "LOWER($column) ='$lang'";
                    }
                    $setValues[] = "$column = IF((" . implode(' OR ', $coressCheck) . "), LOWER($column), '{$clubLanguages[0]}')";
                    break;
            }
        }
        if (count($setValues) > 0) {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "UPDATE `$tableName` SET " . implode(', ', $setValues);
            $conn->executeQuery($sql);
        }
    }

    /**
     * Function to Alter import temporary table (from contact/sponsor import).
     *
     * @param string $tableName Import temporary table name
     * @param array  $columns   Array columns and its changes
     */
    public function alterImportTable($tableName, $columns)
    {
        if (count($columns) > 0) {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "ALTER TABLE `$tableName` " . implode(',', $columns);
            $conn->executeQuery($sql);
        }
    }

    /**
     * Function to remove Duplicate (from contact/sponsor import).
     *
     * @param array $importDetails import details array
     * @param array $duplicates    duplicate details array
     * @param type  $primaryEmail  system field name of primary email
     */
    public function removeDuplicate($importDetails, $duplicates, $primaryEmail)
    {
        $tableName = $importDetails['tableName'];
        $mapingFields = $importDetails['mapingFields'];
        $removeIds = $duplicates['removeIds'];
        $removeEmailIds = $duplicates['removeEmailIds'];
        $tmpEmail = array_search($primaryEmail, $mapingFields);
        $conn = $this->getEntityManager()->getConnection();
        if (count($removeIds) > 0) {
            $sql = "UPDATE `$tableName` SET is_removed = 1 WHERE row_id IN(" . implode(',', $removeIds) . ')';
            $conn->executeQuery($sql);
        }
        if (is_numeric($tmpEmail) && count($removeEmailIds) > 0) {
            $sql = "UPDATE `$tableName` SET column$tmpEmail = '' WHERE row_id IN(" . implode(',', $removeEmailIds) . ')';
            $conn->executeQuery($sql);
        }
    }

    /**
     * Method to get duplicate contacts details (from contact/sponsor import).
     *
     * @param object $club           club object
     * @param array  $mappedPosition positions of email, type, dob, firstname, lastname, company
     * @param bool   $tmpIsCompany   is company or not
     * @param string $primaryEmail   system field name of primary-email
     * @param string $dob            system field name of dob
     * @param string $lastName       system field name of last name
     * @param string $firstName      system field name of first name
     * @param string $company        system field name of company-name
     * @param string $tableName      temp tableName
     * @param bool   $update         update(1) or insert(0)
     *
     * @return array of contacts details
     */
    public function getDuplicateContacts($club, $mappedPosition, $tmpIsCompany, $primaryEmail, $dob, $lastName, $firstName, $company, $tableName, $update, $isShare = 0)
    {
        $clubId = $club->get('id');
        $duplicateQuery = 'SELECT ' . $mappedPosition['tmpType'] . ' AS tmpType,'
            . (is_numeric($mappedPosition['tmpEmail']) ? ' tmp.column' . $mappedPosition['tmpEmail'] : "''") . ' AS tmpEmail,'
            . (is_numeric($mappedPosition['tmpDob']) ? ' tmp.column' . $mappedPosition['tmpDob'] : "''") . ' AS tmpDob,'
            . (is_numeric($mappedPosition['tmpFirstName']) ? ' tmp.column' . $mappedPosition['tmpFirstName'] : "''") . ' AS tmpFname,'
            . (is_numeric($mappedPosition['tmpLastName']) ? ' tmp.column' . $mappedPosition['tmpLastName'] : "''") . ' AS tmpLname,'
            . (is_numeric($mappedPosition['tmpFirma']) && $tmpIsCompany ? ' tmp.column' . $mappedPosition['tmpFirma'] : "''") . ' AS tmpFirma,'
            . " ms.`$company` AS company,cc.has_main_contact as hasMC,cc.is_company AS isCompany, ms.`$firstName` AS fname, ms.`$lastName` AS lname, "
            . " IF(ms.`$dob`!='' AND ms.`$dob` IS NOT NULL AND ms.`$dob`!='0000:00:00',date_format(ms.`$dob`, '" . FgSettings::getMysqlDateFormat() . "'),'' ) AS dob, "
            . " ms.`$primaryEmail` AS email, cc.club_id AS clubId, cc.id AS contactId, tmp.row_id AS tmpId, (SELECT clb.title FROM fg_club AS clb "
            . " WHERE clb.id = cc.club_id) AS clubName FROM $tableName AS tmp, "
            . ' master_system AS ms INNER JOIN fg_cm_contact AS cc ON ms.fed_contact_id= cc.fed_contact_id AND cc.is_permanent_delete=0 ';

        $duplicateWhere = array();
        $membershipSubQuery = '';
        if (is_numeric($mappedPosition['tmpEmail'])) {
            $membershipSubQuery = $this->getMembershipSubQuery($club, $duplicateQuery, $clubId, $mappedPosition['tmpFederation'], $update, $tableName);
            if ($isShare) {
                $membershipSubQuery = " AND FIND_IN_SET(cc.club_id,tmp.column" . $mappedPosition['tmpClubIds'] . ")>0";
            }
            $duplicateWhere[] = '(tmp.column' . $mappedPosition['tmpEmail'] . "!='' AND lower(tmp.column" . $mappedPosition['tmpEmail'] . ") = lower(ms.`$primaryEmail`) $membershipSubQuery)";
        }
        if ($update == '0') {
            $commonCondition = " ( cc.club_id = '{$clubId}') AND ((cc.main_club_id=cc.club_id) OR (cc.fed_membership_cat_id IS NOT NULL AND (cc.old_fed_membership_id IS NOT NULL OR cc.is_fed_membership_confirmed='0')) )";
            if (is_numeric($mappedPosition['tmpDob'])) {
                $duplicateWhere[] = '(tmp.column' . $mappedPosition['tmpDob'] . "!='' AND ( ms.`$dob`= STR_TO_DATE(REPLACE(tmp.column" . $mappedPosition['tmpDob'] . ",'.','/'), '%d/%m/%Y') AND ms.`$dob`!='0000-00-00 00:00:00' AND tmp.column" . $mappedPosition['tmpLastName'] . " = ms.`$lastName`) AND $commonCondition)";
            }
            if (is_numeric($mappedPosition['tmpLastName']) && is_numeric($mappedPosition['tmpFirstName'])) {
                $lastNameEquals = 'tmp.column' . $mappedPosition['tmpLastName'] . " = ms.`$lastName`";
                //$commonCondition=    "AND cc.club_id= $clubId AND  ((cc.main_club_id=cc.club_id) OR (cc.fed_membership_cat_id IS NOT NULL AND (cc.old_fed_membership_id IS NOT NULL OR cc.is_fed_membership_confirmed='0')) )";
                $duplicateWhere[] = '(tmp.column' . $mappedPosition['tmpFirstName'] . " = ms.`$firstName` AND $lastNameEquals  AND $commonCondition  )";
            }
        }

        if (count($duplicateWhere) > 0) {
            $duplicateQuery .= ' WHERE tmp.is_removed=0 AND (' . implode(' OR ', $duplicateWhere) . ') ' . ($update == '1' ? ' AND tmp.fed_contact_id <> ms.fed_contact_id' : '');
            $duplicateQuery .= ' Group By cc.fed_contact_id';
            $conn = $this->getEntityManager()->getConnection();
            $result = $conn->fetchAll($duplicateQuery);
        }

        return $result;
    }

    /**
     * Method to return subquery for membership to find duplicates (from contact/sponsor import).
     *
     * @param object $club           club object
     * @param string $duplicateQuery
     * @param int    $clubId
     * @param string $federationKey temporary table federation Column
     * @param string $update  update(1) or insert(0)
     * @param string $tempTable temporary table name
     * @return string
     */
    private function getMembershipSubQuery($club, &$duplicateQuery, $clubId, $federationKey, $update, $tempTable, $shareQuery = 0)
    {
        $federationId = $club->get('federation_id');
        $subfederationId = $club->get('sub_federation_id');
        $commonCondition = " ((cc.main_club_id=cc.club_id) OR (cc.fed_membership_cat_id IS NOT NULL AND (cc.old_fed_membership_id IS NOT NULL OR cc.is_fed_membership_confirmed='0')) )";
        if ($update == 0):
            if ($federationKey != ''):
                switch ($club->get('type')) {
                    case 'standard_club':
                        $membershipSubQuery = " AND ( cc.club_id = '{$clubId}')";
                        break;
                    default:
                        $membershipSubQuery = "AND ( $shareQuery OR (tmp.column$federationKey!='' AND  ((cc.club_id = $federationId and  cc.is_fed_admin = 1 ) OR cc.club_id in( $federationId, $subfederationId,$clubId))
                                                    AND $commonCondition )OR (tmp.column$federationKey ='' AND  cc.club_id=$clubId  AND $commonCondition   ) )";
                        break;
                } else:
                $membershipSubQuery = " AND ( (cc.club_id = $federationId AND cc.is_fed_admin = 1 ) OR cc.club_id = '{$clubId}') AND  $commonCondition ";
            endif;
        else:
            $upcommonCondition = " (c1.main_club_id=c1.club_id) OR (c1.fed_membership_cat_id IS NOT NULL AND (c1.old_fed_membership_id IS NOT NULL OR c1.is_fed_membership_confirmed='0')) ";
            $membershipSubQuery = " AND case when tmp.is_fed_admin = 0 then ( (cc.club_id = $federationId and  cc.is_fed_admin = 1 ) OR cc.club_id in (select c1.club_id from fg_cm_contact c1 JOIN $tempTable t1 ON c1.fed_contact_id=t1.fed_contact_id AND  $upcommonCondition Where c1.fed_contact_id=tmp.fed_contact_id  )) AND  $commonCondition else ( cc.club_id  =  $federationId) end ";

        endif;

        return $membershipSubQuery;
    }

    /**
     * To update import maping table which contains details imported table column vs original table column (from contact/sponsor import).
     *
     * @param string $tableName
     * @param array  $insertValues
     */
    public function insertIntoMappingTable($tableName, $insertValues)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "DELETE FROM import_maping WHERE imp_table ='$tableName'";
        $conn->executeQuery($sql);
        $insertQuery = 'INSERT INTO import_maping(col_imp, col_fg, col_title, fg_table, imp_table,club_id) VALUES ' . implode(',', $insertValues);
        $conn->executeQuery($insertQuery);
    }

    /**
     * To update import maping table with sub level club entries.
     *
     * @param string $tableName
     */
    public function insertIntoClubTableToMappingTable($tableName)
    {
        $conn = $this->getEntityManager()->getConnection();
        //club ids
        $insertQuery = "INSERT INTO import_maping(col_imp, col_fg, fg_table, imp_table,club_id) SELECT '','club_entry',CONCAT('master_club_',C.id),'{$tableName}',C.id 
        FROM fg_club C INNER JOIN {$tableName} T ON C.id=T.main_club_id WHERE C.club_type='sub_federation_club' OR C.club_type='federation_club' GROUP BY C.id";
        $conn->executeQuery($insertQuery);
        //sub federation ids
        $insertQuery = "INSERT INTO import_maping(col_imp, col_fg, fg_table, imp_table,club_id) SELECT 'club_id','club_entry',CONCAT('master_federation_',C.id),'{$tableName}',C.id
        FROM {$tableName} T INNER JOIN fg_club C1 ON C1.id = T.main_club_id INNER JOIN fg_club C ON C1.parent_club_id=C.id WHERE C.club_type='sub_federation' GROUP BY C.id";
        $conn->executeQuery($insertQuery);
    }

    /**
     * Function to get count of ImportedContacts (from contact/sponsor import).
     *
     * @param string $tableName  Import temporary table
     * @param array  $removedIds id imported contacts which are skipped after duplication checking
     *
     * @return int Count imported contacts
     */
    public function getImportedContacts($tableName, $removedIds = array())
    {
        $query = "SELECT count(row_id) AS count FROM $tableName WHERE is_removed = 0 " . (count($removedIds) > 0 ? ' AND row_id NOT IN(' . implode(',', $removedIds) . ')' : '');
        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->fetchAll($query);

        return $result[0]['count'];
    }

    /**
     * Function for creating temporay table and load data from uploaded file (from contact/sponsor import).
     *
     * @param type   $container   Container object
     * @param string $importTable
     * @param array  $data        Array of columns
     * @param string $module      Module name - contact/sponsor/subscriber
     * @param string $uploadDir   Upload directory
     * @param string $filename    Filename
     * @param string $delimiter   Delimiter - ;/,
     * @param type   $lineEnding  Line ending character \r or \n
     *
     * @return string
     *
     * @throws ProcessFailedException
     */
    public function temporaryTableForImportContact($container, $importTable, $data, $module, $uploadDir, $filename, $delimiter, $lineEnding)
    {
        $tableQuery = '';
        if ($importTable === '') {
            $importTable = 'tp_import_' . strtotime('now');
            $tableQuery = 'CREATE TABLE ' . $importTable . ' (row_id INT NOT NULL AUTO_INCREMENT,PRIMARY KEY(row_id),';
            $tableQuery .= 'column' . implode(' TEXT, column', array_keys($data)) . ' TEXT';
            $tableQuery .= (($module != 'subscriber') ? ',contact_id INT DEFAULT NULL, membership_id VARCHAR(255),fed_membership_id VARCHAR(255),subfed_contact_id INT NULL,fed_contact_id INT NULL, member_clubid INT NULL,is_fed_admin TINYINT(1) DEFAULT 0' : '') . ($module == 'sponsor' ? ',is_sponsor INT DEFAULT 1 ' : '') . ', is_removed TINYINT(1) DEFAULT 0,main_club_id INT NULL,share_club_ids varchar(255) NULL,main_club_type varchar(255) NULL ';
            // $tableQuery .= (($module != 'subscriber') ? ',contact_id INT DEFAULT NULL, membership_id VARCHAR(255),fed_membership_id VARCHAR(255), member_clubid INT NULL,is_fed_admin TINYINT(1) DEFAULT 0' : '').($module == 'sponsor' ? ',is_sponsor INT DEFAULT 1 ' : '').', is_removed TINYINT(1) DEFAULT 0 ';
            $tableQuery .= ' ) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci';
        } else {
            $tableQuery = "TRUNCATE TABLE $importTable";
        }
        $conn = $this->getEntityManager()->getConnection();
        $conn->executeQuery($tableQuery);

        /* mysqlimport command work only if file name table name are same */
        $importFilename = substr_replace($filename, $importTable, 0, strrpos($filename, '.'));
        exec('mv ' . $uploadDir . '/temp/' . $filename . ' ' . $uploadDir . '/temp/' . $importFilename);
        $containerParameters = $container->getParameterBag();
        $dbhost = $containerParameters->get('database_host');
        $databaseName = $containerParameters->get('database_name');
        $databaseUser = $containerParameters->get('database_user');
        $databasePassword = $containerParameters->get('database_password');
        /* Import data from CSV using command line */
        $importCommand = 'mysqlimport '
            . '-h ' . $dbhost . ' '
            . '-u ' . $databaseUser . ' '
            . '-p' . $databasePassword . ' '
            . '--local ' . $databaseName . ' '
            . $uploadDir . '/temp/' . $importFilename . ' '
            . '--fields-optionally-enclosed-by="\"" '
            . '--fields-terminated-by="' . $delimiter . '" '
            . '--fields-escaped-by="\"" '
            . '--lines-terminated-by="' . $lineEnding . '" '
            /* table fields order to match with csv columns */
            . '--columns=' . 'column' . implode(',column', array_keys($data));
        $process = new Process($importCommand);
        $process->run();
        // executes after the command finishes
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        } else {
            /* Trim imported data - all columns */
            $this->filterImportTable($importTable, array_keys($data));
        }

        return $importTable;
    }

    /**
     * Function to trim \r,\n, \t, space from import table.
     *
     * @param type $importTable
     * @param type $columns
     */
    public function filterImportTable($importTable, $columns)
    {
        $updateSql = 'UPDATE ' . $importTable . ' SET ';
        foreach ($columns as $col) {
            $updateSql .= 'column' . $col . ' = filterText(column' . $col . '),';
        }
        $updateSql = trim($updateSql, ',');
        $conn = $this->getEntityManager()->getConnection();
        $conn->executeQuery($updateSql);
    }

    /**
     * Function to get count of ImportedContacts in temporary table(from contact/sponsor import).
     *
     * @param string $tableName Import temporary table
     *
     * @return int Count imported contacts
     */
    public function getCountofDatasToImport($importTable)
    {
        $query = "SELECT COUNT(row_id) as count FROM $importTable ";
        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->fetchAll($query);

        return $result;
    }

    /**
     * Method for assigning contacts as sponsors.
     *
     * @param string $contactIds  comma separated string of contact-ids
     * @param string $masterTable master_club{clubid}/master_federation{clubid}
     */
    public function assignContactsAsSponsors($contactIds, $masterTable, $changedBy, $clubId, $container)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "UPDATE fg_cm_contact SET is_sponsor = 1 WHERE id IN ($contactIds)";
        $conn->executeQuery($sql);
        $contactsArray = explode(',', $contactIds);
        //insert log entries
        foreach ($contactsArray as $contactId) {
            $valueString[] = array('contact_id' => $contactId, 'kind' => 'contact type', 'value_before' => '', 'value_after' => 'Sponsor');
        }
        if (count($valueString) > 0) {
            $logHandle = new FgLogHandler($container);
            $logHandle->processLogEntryAction('sponsor', 'fg_cm_change_log', $valueString);
        }
        // Insert Sponsor Ads for newly created sponsors.
        $this->_em->getRepository('CommonUtilityBundle:FgSmSponsorAds')->insertDefaultSponsorAds($clubId, $contactsArray);
    }

    /**
     * Method for removing prospects.
     *
     * @param string $contactIds  comma separated string of contact-ids
     * @param string $masterTable master_club{clubid}/master_federation{clubid}
     * @param object $container   Container Object
     *
     * @return int count of removed prospects
     */
    public function removeProspects($contactIds, $masterTable, $changedBy, $container)
    {
        $contactsArray = explode(',', $contactIds);
        $now = date('Y-m-d h:i:s');
        $insertValues = array();
        $removedProspectsCount = 0;
        if (count($contactsArray) > 0) {
            foreach ($contactsArray as $contact) {
                $isProspect = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgSmBookings')->isProspect($contact, $masterTable, $container);
                if ($isProspect) {
                    $sql = "UPDATE fg_cm_contact SET is_sponsor = 0 WHERE id = $contact ";
                    $conn = $this->getEntityManager()->getConnection();
                    $conn->executeQuery($sql);
                    $valueString[] = array('contact_id' => $contact, 'kind' => 'contact type', 'value_before' => 'Sponsor', 'value_after' => '');
                    ++$removedProspectsCount;
                }
            }
            if (count($valueString) > 0) {
                $logHandle = new FgLogHandler($container);
                $logHandle->processLogEntryAction('sponsor', 'fg_cm_change_log', $valueString);
            }
        }

        return $removedProspectsCount;
    }

    /**
     * Function to get contact names for auto-complete fields.
     *
     * @param string $exclude       Exclude contact ids
     * @param int    $isComany      Whether to return company contacts or not
     * @param string $contType      Contact type
     * @param object $container     Container object
     * @param int    $clubId        Club id
     * @param string $clubType      Club type
     * @param string $passedColumns Passed columns
     * @param string $term          String to be searched
     *
     * @return array $contactsArray Result array of contacts.
     */
    public function getAutocompleteContacts($exclude, $isComany, $contType, $container, $clubId, $clubType, $passedColumns, $term, $stealth = 0, $roleId, $is_draft)
    {
        $firstname = '`' . $container->getParameter('system_field_firstname') . '`';
        $lastname = '`' . $container->getParameter('system_field_lastname') . '`';
        $joins = '';
        if ($contType == 'company') {
            $sWhere = "C.is_permanent_delete=0 and C.club_id = '{$clubId}'";
        } else {
            if ($clubType == 'federation') {
                $sWhere = "C.is_permanent_delete=0 and (C.main_club_id = '{$clubId}' OR (C.fed_membership_cat_id IS NOT NULL AND C.fed_membership_cat_id !='' AND C.is_fed_membership_confirmed='0')OR (C.old_fed_membership_id IS NOT NULL AND C.is_fed_membership_confirmed='1'))";
                $joinsTab = " master_federation_{$clubId} AS mc LEFT JOIN ";
                $joinsOn = 'ON mc.fed_contact_id = C.fed_contact_id ';
            } elseif ($clubType == 'sub_federation') {
                $sWhere = "C.is_permanent_delete=0 and (C.main_club_id = '{$clubId}' OR C.fed_membership_cat_id IS NOT NULL AND C.fed_membership_cat_id !='')";
                $joinsTab = " master_federation_{$clubId} AS mc LEFT JOIN ";
                $joinsOn = ' ON mc.contact_id = C.id ';
            } else {
                $sWhere = "C.is_permanent_delete=0 and (C.main_club_id = '{$clubId}' OR C.fed_membership_cat_id IS NOT NULL AND C.fed_membership_cat_id !='')";
                $joinsTab = " master_club_{$clubId} AS mc LEFT JOIN ";
                $joinsOn = 'ON mc.contact_id = C.id';
            }
            if ($stealth) {
                $sWhere .= ' AND C.is_stealth_mode = 0';
            }
        }
        $sWhere .= ($exclude) ? " AND C.id NOT IN($exclude)" : '';
        $sWhere .= ($roleId) ? " AND C.id IN (SELECT rc.contact_id FROM fg_rm_role AS r INNER JOIN fg_rm_category_role_function AS rcrf ON r.id = rcrf.role_id  INNER JOIN fg_rm_role_contact AS rc ON rcrf.id=rc.fg_rm_crf_id WHERE r.id=$roleId)" : '';

        if ($isComany != 2) {
            $sWhere .= ($isComany == 1) ? ' AND is_company=1' : ' AND is_company=0';
        }

        if (isset($is_draft)) {
            $sWhere .= ' AND is_draft = ' . $is_draft;
        }

        $newfield = "IF (C.is_company=0 ,CONCAT(contactName(C.id),IF(DATE_FORMAT(`4`,'%Y') = '0000' OR `4` is NULL OR `4` ='','',CONCAT(' (',DATE_FORMAT(`4`,'%Y'),')'))),contactName(C.id)) as contactname";
        if ($passedColumns != '') {
            $newfield .= ", $passedColumns";
        }
        if ($term == '') {
            $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' ORDER BY contactname";
        } else {
            $search = explode(' ', trim($term), 2);
            if (sizeof($search) > 1) {
                $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id $joins where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' AND (S.$firstname LIKE '$search[0]%' OR S.$lastname LIKE '$search[0]%' OR S.`9` LIKE '$search[0]%') AND (S.$firstname LIKE '$search[1]%' OR S.$lastname LIKE '$search[1]%' OR S.`9` LIKE '$search[1]%') ORDER BY contactname";
            } else {
                $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id $joins where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' AND (S.$firstname LIKE :search OR S.$lastname LIKE :search OR S.`9` LIKE :search) ORDER BY contactname";
            }
        }

        $conn = $this->getEntityManager()->getConnection();
        $contactsArray = $conn->fetchAll($listquery, array(':search' => $term . '%'));

        return $contactsArray;
    }

    /**
     * Method to get contactname( if company, then company name), logo (only ifcompany), website url.
     *
     * @param type $contactId contactId
     *                        return array
     */
    public function getContactLogo($contactId, $club, $container)
    {
        $companylogo = $container->getParameter('system_field_companylogo');
        $website = $container->getParameter('system_field_website');
        $firstname = '`' . $container->getParameter('system_field_firstname') . '`';
        $lastname = '`' . $container->getParameter('system_field_lastname') . '`';
        //$contactnameQry = 'IF (fg_cm_contact.is_company=0 ,CONCAT_WS(" ",' . $firstname . ',' . $lastname . ' ), IF(has_main_contact=1,CONCAT(`9`," (",' . $firstname . '," ",' . $lastname . ',")"),`9` ) ) as contactname';
        $contactnameQry = 'contactNameNoSort(fg_cm_contact.id, 1) as contactname';

        $contactlistClass = new Contactlist($container, '', $club, 'sponsor');
        $contactlistClass->setColumns(array($contactnameQry, " `$companylogo` as companyLogo", 'isCompany', "`$website` as website", "IF(is_company = 1, contactNameNoSort(fg_cm_contact.id, 1), $lastname) as lastname"));
        $contactlistClass->setFrom();
        $contactlistClass->setCondition();
        $contactlistClass->addCondition("fg_cm_contact.id = $contactId");
        $listquery = $contactlistClass->getResult();
        $contactDetails = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembership')->getContactList($listquery);

        return $contactDetails[0];
    }

    /**
     * Function to get contact ids imported from a particular table.
     *
     * @param string $importTable Import table name
     *
     * @return array $resultArray Result array of contact ids
     */
    public function getContactsImported($importTable, $clubId)
    {
        $result = $this->createQueryBuilder('c')
            ->select('GROUP_CONCAT(c.id) as contactIds')
            ->where('c.importTable = :importTable and c.club=:clubId')
            ->setParameters(array('importTable' => $importTable, 'clubId' => $clubId))
            ->getQuery()
            ->getArrayResult();

        $resultArray = ($result[0]['contactIds'] == '') ? array() : explode(',', $result[0]['contactIds']);

        return $resultArray;
    }

    /**
     * Function to check active connection to enable/disable contact switching.
     *
     * @param int $contactId
     *
     * @return bool
     */
    public function isContactSwitchable($contactId)
    {
        $query = "SELECT IF((C.is_company=0 AND (SELECT count(id) FROM fg_cm_contact WHERE comp_def_contact=C.id)>0) OR (C.is_company=1 AND (C.comp_def_contact IS NOT NULL OR C.comp_def_contact !='')) OR (SELECT count(LC.id) FROM fg_cm_linkedcontact LC WHERE LC.contact_id=C.id OR C.id=LC.linked_contact_id)>0,1,0) as connections FROM fg_cm_contact C WHERE C.id=:contactId";
        $conn = $this->getEntityManager()->getConnection();
        $Connections = $conn->fetchAll($query, array(':contactId' => $contactId));

        return $Connections[0]['connections'] == 1 ? false : true;
    }

    /**
     * Function to check intranet access of a contact.
     *
     * @param int $contactId contactId
     *
     * @return bool
     */
    public function checkIntranetAccess($contactId)
    {
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $intranetAccess = $contactObj->getIntranetAccess();
        if ($intranetAccess == '1') {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * Function to get id and name of all companies of a contact.
     *
     * @param int    $contactId ContactId
     * @param object $container Container Object
     *
     * @return array $result DetailsArray
     */
    public function getCompaniesOfAContact($contactId, $container)
    {
        $clubId = $container->get('club')->get('id');
        $clubTable = $container->get('club')->get('clubTable');
        $clubType = $container->get('club')->get('type');
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');
        $activeC = " (C.main_club_id=C.club_id OR (C.fed_membership_cat_id IS NOT NULL AND (C.old_fed_membership_id IS NOT NULL OR C.is_fed_membership_confirmed='0'))) ";
        $clubTableField = 'mc.contact_id';
        if ($clubType == 'federation') {
            $clubTableField = 'mc.fed_contact_id';
        }
        $onlyCompanyName = 1;
        $query = "SELECT C.id, contactNameNoSort(C.id, $onlyCompanyName) AS name, contactNameNoSort($contactId, $onlyCompanyName) AS parentName FROM fg_cm_contact C LEFT JOIN sf_guard_user S ON S.contact_id = C.id AND S.club_id = :clubId LEFT JOIN $clubTable mc ON $clubTableField=C.id"
            . " WHERE C.comp_def_contact = (SELECT fed_contact_id FROM fg_cm_contact WHERE id=:contactId limit 1) AND C.club_id = :clubId AND $activeC AND C.intranet_access='1' AND C.is_company=1 AND C.is_deleted=0 ";
        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->fetchAll($query, array('contactId' => $contactId, 'clubId' => $clubId));
        if (!$result) {
            $sql = "SELECT contactNameNoSort($contactId, $onlyCompanyName) AS parentName FROM `fg_cm_contact` WHERE id = :contactId";
            $result = $conn->fetchAll($sql, array('contactId' => $contactId));
        }

        return $result;
    }

    /**
     * Function to get first name and last name(if contact) or only company name(if company) of a contact.
     *
     * @param int $contactId ContactId
     *
     * @return array $result DetailsArray
     */
    public function getNameOfAContact($contactId)
    {
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactNameNoSort', 'Common\UtilityBundle\Extensions\FetchContactNameNoSort');

        $onlyCompanyName = 1;
        $result = $this->createQueryBuilder('c')
            ->select("c.id , contactNameNoSort($contactId $onlyCompanyName) AS name")
            ->where('c.id =:contactId')
            ->setParameters(array('contactId' => $contactId))
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    /**
     * Function to get the emails of a contact.
     *
     * @param int    $contactId   ContactId
     * @param object $container   Container Object
     * @param array  $clubDetails Club Detail Array
     *
     * @return array $result email detail array
     */
    public function getEmailsOfAContact($container, $contactId, $clubDetails, $emailAtributeIds)
    {
        $quotedEmailAttributeList = '';
        foreach ($emailAtributeIds as $id) {
            $quotedEmailAttributeList .= '`' . $id . '`,';
        }
        $quotedEmailAttributeList = substr($quotedEmailAttributeList, 0, -1);

        $contactlistClass = new Contactlist($container, $contactId, $clubDetails, 'editable');

        $contactlistClass->setColumns(explode(',', $quotedEmailAttributeList));
        $contactlistClass->setFrom('*');
        $contactlistClass->setCondition('all');
        $sWhere = " fg_cm_contact.id in ($contactId)";
        $contactlistClass->addCondition($sWhere);
        $listquery = $contactlistClass->getResult();

        $conn = $this->getEntityManager()->getConnection();
        $fieldsArray = $conn->fetchAll($listquery);

        return $fieldsArray;
    }

    /**
     * Function to get the title and id of contact/contacts
     * Used for aurosuggest implementations.
     *
     * @param int/array $contactId ContactId
     *
     * @return array $result contact details (id,title)
     */
    public function getContactTitle($contactId)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c.id,contactname(c.id) AS title');

        if (is_array($contactId) && count($contactId) > 0) {
            $qb->where('c.id IN (:contactId)')
                ->setParameter('contactId', $contactId);
        } elseif ($contactId > 0) {
            $qb->where('c.id=:contactId')
                ->setParameter('contactId', $contactId);
        }
        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

    /**
     * Function to get the emails of contacts for message notification.
     *
     * @param object $container   Container Object
     * @param int    $contactIds  ContactId
     * @param array  $clubDetails Club Detail Array
     * @param array  $atributeIds email attribute ids
     * @param array  $roles       team/workgroup ids
     *
     * @return array $result email detail array
     */
    public function getAttributeValuesOfContacts($container, $contactIds, $clubDetails, $atributeIds, $roles)
    {
        if (count($roles) > 0) {
            $fields[] = "(SELECT IF(count(rc.id)>0,1,0) FROM fg_rm_role_contact rc LEFT JOIN fg_rm_category_role_function crf On rc.fg_rm_crf_id=crf.id WHERE rc.assined_club_id ='" . $clubDetails->get('id') . "' AND ms.fed_contact_id=rc.contact_id AND crf.role_id in (" . implode(',', $roles) . ')) as isAdmin';
        } else {
            $fields[] = '0 as isAdmin';
        }
        //itrate over the email attribute ids and select email and checked value
        foreach ($atributeIds as $id) {
            $fields[] = "IF('3'='$id',1,0) as '" . $id . "_checked'";
            $fields[] = '`' . $id . "` as '$id'";
        }
        //sub query to get primary emails of parents
        $fields[] = "(SELECT GROUP_CONCAT(s.`3`) FROM master_system s LEFT JOIN fg_cm_linkedcontact lc ON lc.linked_contact_id=s.fed_contact_id AND lc.relation_id=2 AND lc.type='household' AND lc.club_id=" . $clubDetails->get('id') . ' WHERE lc.contact_id=ms.fed_contact_id) as parent';
        $fields[] = "0 as 'parent_checked'";
        $contactlistClass = new Contactlist($container, $clubDetails->get('contactId'), $clubDetails, 'editable');
        $fields[] = 'contactname(fg_cm_contact.id) as contactname';
        $fields[] = 'fg_cm_contact.is_stealth_mode as is_stealth';
        $contactlistClass->setColumns($fields);
        $contactlistClass->setFrom('*');
        $contactlistClass->setCondition();
        $sWhere = " fg_cm_contact.id in ($contactIds)";
        $contactlistClass->addCondition($sWhere);
        $listquery = $contactlistClass->getResult();
        $conn = $this->getEntityManager()->getConnection();
        $query = $conn->executeQuery($listquery);
        $fieldsArray = $query->fetchAll();

        return $fieldsArray;
    }

    /**
     * Function to get the emails of contacts for message notification.
     *
     * @param object $container   Container Object
     * @param int    $contactIds  ContactId
     * @param array  $clubDetails Club Detail Array
     * @param array  $atributeIds email attribute ids
     * @param array  $roles       team/workgroup ids
     *
     * @return array $result email detail array
     */
    public function addMemberships($container, $contactDetails, $selectedMembership, $memberships, $clubId, $clubType, $clubHeirarchy, $federationId, $noFedMembership = array())
    {
        $conn = $this->getEntityManager()->getConnection();
        $contactIdList = implode(',', array_keys($contactDetails));
        $clubselectedMembership = ($selectedMembership['club'] != 0) ? 'club_membership_cat_id = ' . $selectedMembership['club'] . ',' : '';

        //Get the membershipdetails
        foreach ($selectedMembership as $key => $value) {
            $membershipDetail[$key] = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembership')->getMembershipById($value);
        }

        $isFedMember = false;
        $joiningDate = date('Y-m-d H:i:s');

        //Update fg_cm_contact
        if ($selectedMembership['club'] != 0) {
            $fgCmContactQuery = 'UPDATE fg_cm_contact SET ' . $clubselectedMembership . ' first_joining_date="' . $joiningDate . '",joining_date = "' . $joiningDate . '", last_updated = "' . date('Y-m-d H:i:s') . '" WHERE id IN (' . $contactIdList . ')';
            $conn->executeQuery($fgCmContactQuery);
        }

        //update the master/federation tables
        //if the the membership is a federation membership
        $fedclubid = ($clubType == 'federation') ? $clubId : $federationId;
        if (in_array($selectedMembership['fed'], $memberships['fed'])) {
            $isFedMember = true;
        }

        //Add to membership log
        $fgCmMembershipLogEntryQuery = '';
        $fgCmMembershipHistoryQuery = '';
        foreach ($selectedMembership['club'] as $key => $value) {
            if ($value != 0) {
                $fgCmMembershipLogEntryQuery = 'INSERT INTO fg_cm_membership_log (club_id, contact_id, membership_id, date, kind, field, value_before, value_after, changed_by) VALUES ';
                foreach ($contactDetails as $contactId => $details) {
                    $fgCmMembershipLogEntry[] = "($clubId, $contactId, $value, '$joiningDate', 'assigned contacts', '', '-', '$details[0]', $details[1])";
                }

                //Add to membership history
                $fgCmMembershipHistoryQuery = 'INSERT INTO fg_cm_membership_history (contact_id, changed_by, membership_club_id, membership_id, membership_type, joining_date) VALUES ';
                $memberShipClubId[$key] = $membershipDetail[$key]['clubId'];
                //$memberShipType[$key] = ($memberShipClubId[$key] == $fedclubid) ? 'federation' : 'club';
                foreach ($contactDetails as $contactId => $details) {
                    $fgCmMembershipHistoryEntry[] = "($contactId, $details[1], $memberShipClubId[$key], $value, 'club', '$joiningDate')";
                }
            }
        }
        if ($fgCmMembershipLogEntryQuery) {
            $fgCmMembershipLogEntryQuery = $fgCmMembershipLogEntryQuery . implode(',', $fgCmMembershipLogEntry);
            $conn->executeQuery($fgCmMembershipLogEntryQuery);
        }
        if ($fgCmMembershipHistoryQuery) {
            $fgCmMembershipHistoryQuery = $fgCmMembershipHistoryQuery . implode(',', $fgCmMembershipHistoryEntry);
            $conn->executeQuery($fgCmMembershipHistoryQuery);
        }

        //Add to sf guard users
        //Loop through each contact, if there is a primary key specified to the contact inset it to sfguard user
        $systemPrimaryEmail = $container->getParameter('system_field_primaryemail');
        foreach ($contactDetails as $contactId => $details) {
            //Get the primary email of the contact
            //$primaryEmail = self::getContactPrimaryEmail($contactId);
            //Assign/Change/Remove Fed memebership handling
            if ($selectedMembership['fed'] != 0 && !in_array($contactId, $noFedMembership)) {
                $fgFedMembershipObj = new FgFedMemberships($container);
                $fgFedMembershipObj->processFedMembership($contactId, $selectedMembership['fed']);
            }
            $fgCmAttributeRepository = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmAttribute');
            $fedContactId = $this->getFederationContactId($contactId);
            $fgCmAttributeRepository->insertIntoSfguardUser($conn, $contactId, $systemPrimaryEmail, $fedContactId['fedContactId'], $isFedMember, true);
        }

        return;
    }

    /**
     * Function to get number of contacts and additional subscribers by corr lang.
     *
     * @param type $container
     *
     * @return array The result array of count for each language
     */
    public function getContactCountByCorrLang($container)
    {
        $corrLangsId = $container->getParameter('system_field_corress_lang');
        $clubLangs = $container->get('club')->get('club_languages');
        $clubId = $container->get('club')->get('id');
        $qWhere = '';
        if ($container->get('club')->get('type') == 'federation') {
            $qWhere = "OR C.federation_id=$clubId";
        } elseif ($container->get('club')->get('type') == 'sub_federation') {
            $qWhere = "OR (C.parent_club_id=$clubId) ";
        }
        $conn = $this->getEntityManager()->getConnection();
        $sWhere = " ms.`$corrLangsId` in ('" . implode("','", $clubLangs) . "') ";

        $listquery = "SELECT count(ms.`$corrLangsId`) as counts, ms.`$corrLangsId`
                      FROM fg_cm_contact
                      INNER JOIN master_system as ms on ms.fed_contact_id = fg_cm_contact.fed_contact_id
                      INNER JOIN fg_club as C on fg_cm_contact.club_id = C.id
                      WHERE fg_cm_contact.is_permanent_delete=0 AND (C.id=$clubId $qWhere) AND $sWhere GROUP BY ms.`515`";

        $contactsArray = $conn->fetchAll($listquery);
        $subscribersArr = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCnSubscriber')->getCountOfSubscribers($clubId, $clubLangs, $container->get('club')->get('type'));

        $result = array();
        foreach ($contactsArray as $value) {
            $result[$value[$corrLangsId]] = $value['counts'];
        }
        foreach ($subscribersArr as $subscribers) {
            $result[$subscribers['lang']] = $result[$subscribers['lang']] + $subscribers['subscriberCount'];
        }

        return $result;
    }

    /**
     * Method to get array of id, default_lang, default_system_lang of a particular contact.
     *
     * @param int    $contactId   contact for which details to be taken
     * @param int    $clubId      current club
     * @param string $masterTable club table
     *
     * @return array $resultArray array of id, default_lang, default_system_lang
     */
    public function getContactLanguageDetails($contactId, $clubId, $masterTable)
    {
        $result = $this->createQueryBuilder('C')
            ->select('C.id, MS.correspondanceLang as default_lang, C.systemLanguage as default_system_lang ')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', ' MS.fedContact = C.fedContact ')
            ->where('C.id = :contactId')
            ->setParameters(array('contactId' => $contactId))
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    /**
     * Function to get contact details (array of id,default_lang,default_system_lang, accessibleClubs { clubId-contactId } ).
     *
     * @param type $contactId
     *
     * @return array $result
     */
    public function getContactData($contactId)
    {
        $result = $this->createQueryBuilder('C')
            ->select('C.id, MS.correspondanceLang as default_lang, C.systemLanguage AS default_system_lang, GROUP_CONCAT(CLUB.id) as accessibleClubs, GROUP_CONCAT(SUBC.id) as accessibleClubContacts, GROUP_CONCAT(CLUB.clubType) as accessibleTypes,C.quickwindowVisibilty')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', ' MS.fedContact = C.fedContact ')
            // for getting shared clubs (contact should have federation member ship confirmed and have federation membership) OR (contact should be club own contact ie; SUBC.club_id = SUBC.main_club_id) OR waiting for fedmembership but old fedmembership is existing
            ->leftJoin('CommonUtilityBundle:FgCmContact', 'SUBC', 'WITH', " SUBC.fedContact = C.fedContact AND ( (SUBC.isFedMembershipConfirmed = '0'  AND (SUBC.fedMembershipCat IS NOT NULL OR SUBC.fedMembershipCat != '') ) OR ( SUBC.isFedMembershipConfirmed = '1' AND (SUBC.oldFedMembership IS NOT NULL OR SUBC.oldFedMembership != '') ) OR (SUBC.club = SUBC.mainClub) ) ")
            ->leftJoin('SUBC.club', 'CLUB')
            ->where('C.isPermanentDelete = 0  AND C.isDraft = 0 AND C.isDeleted = 0 AND C.id IN (:contactId)')
            ->setParameters(array('contactId' => $contactId))
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    /**
     * Function to get club assignments.
     *
     * @param type $contactId Contact id
     *
     * @return array
     */
    public function getClubAssignments($contactId)
    {
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $dateFormat = FgSettings::getMysqlDateFormat();
        $club = $this->container->get('club');
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select("ca.id as clubAssignmentId, c.id as clubId, c.parentClubId, COALESCE(NULLIF(ci18n.titleLang,''), c.title) as title, (DATE_FORMAT(ca.fromDate, '$dateFormat')) as fromDate, (DATE_FORMAT(ca.toDate, '$dateFormat')) as toDate, mc.id as mainClubId")
            ->from('CommonUtilityBundle:FgCmContact', 'cc')
            ->leftJoin('CommonUtilityBundle:FgClubAssignment', 'ca', 'WITH', 'cc.fedContact = ca.fedContact')
            ->leftJoin('ca.club', 'c')
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', "ci18n.id = c.id AND ci18n.lang='{$club->get('default_lang')}'")
            ->leftJoin('cc.mainClub', 'mc')
            ->where('cc.id=:contactId')
            ->setParameter('contactId', $contactId);

        $result = $moduleQuery->getQuery()->getResult();
        if ($result[0]['clubAssignmentId'] != '') {
            return $result;
        } else {
            return array();
        }
    }

    /**
     * Function to save club assignments.
     *
     * @param type $clubId      Club id
     * @param type $mainclubVal Main club value
     * @param type $contactId   Contact id
     */
    public function saveClubAssignments($clubId, $mainclubVal, $contactId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $qb = $this->createQueryBuilder();
        $q = $qb->update('CommonUtilityBundle:FgCmContact', 'c')
            ->set('c.mainClub', ':mainClubId')
            ->where('c.fedContact =:contactId')
            ->setParameters(array('mainClubId' => $mainclubVal, 'contactId' => $contactId))
            ->getQuery();

        $p = $q->execute();

        return;
    }

    /**
     * Function to get sub federations.
     *
     * @param type $contactId Contact id
     *
     * @return array
     */
    public function getAllSubFederations($contactId)
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $club = $this->container->get('club');
        $moduleQuery->select("COALESCE(NULLIF(ci18n.titleLang, ''), c.title) as title  , c.id")
            ->from('CommonUtilityBundle:FgCmContact', 'cc')
            ->leftJoin('cc.club', 'c')
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', "ci18n.id = c.id AND ci18n.lang='{$club->get('default_lang')}'")
            ->where('cc.fedContact=:contactId')
            ->andWhere("c.clubType='sub_federation'")
            ->distinct('c.id')
            ->setParameter('contactId', $contactObj->getFedContact()->getId());

        $result = $moduleQuery->getQuery()->getResult();

        return $result;
    }

    /**
     * This function is used to get a contact related data and fed membership details.
     *
     * @param int $contactId Contact Id
     *
     * @return array Array of contact details
     */
    public function getContactAndFedMembershipDetails($contactId)
    {
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');

        $qb = $this->createQueryBuilder('C')
            ->select('C.id, IDENTITY(C.club) AS clubId, IDENTITY(C.fedContact) AS fedContactId, IDENTITY(C.subfedContact) AS subfedContactId, IDENTITY(C.fedMembershipCat) AS fedMembershipCatId, IDENTITY(C.oldFedMembership) AS oldFedMembershipId, C.isFedMembershipConfirmed, IDENTITY(C.createdClub) AS createdClubId, contactName(C.id) AS contactName, MS.primaryEmail, IDENTITY(C.mergeToContact) AS mergeToContact, C.allowMerging AS allowMerging, C.isCompany AS isCompany')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', 'MS.fedContact = C.fedContact')
            ->where('C.id = :contactId')
            ->setParameter('contactId', $contactId);
        $result = $qb->getQuery()->getSingleResult();

        return $result;
    }

    /**
     * This function is used to update the contact's entry on assigning/changing fed membership to a contact.
     *
     * @param int $clubId           Club id
     * @param int $fedContactId     Federation contact id
     * @param int $newMembershipId  New membership id of the contact
     * @param int $oldMembershipId  Old membership id of the contact
     * @param int $isFedOwnContact  Fed own or sub-fed own contact
     * @param int $isConfirmByAppln Whether fed membership is confirmed with application or directly
     */
    public function updateFedMembershipDetails($clubId, $fedContactId, $newMembershipId, $oldMembershipId = null, $isFedOwnContact = 0, $isConfirmByAppln = 0)
    {
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set('C.fedMembershipCat', ':newMembershipId')
            ->set('C.leavingDate', ':nullDate');
        $params = array('fedContactId' => $fedContactId, 'newMembershipId' => $newMembershipId, 'nullDate' => null);
        if ($isFedOwnContact || ($isConfirmByAppln == 0)) {
            $q = $q->set('C.isFormerFedMember', '0')
                ->set('C.resignedOn', ':nullDate');
        }
        //if club owned contact and waiting for confirmation then update those details
        if ($isConfirmByAppln) {
            $q = $q->set('C.oldFedMembership', ':oldFedMembershipId')
                ->set('C.fedMembershipAssignedClub', ':fedMembershipAssignedClub')
                ->set('C.isFedMembershipConfirmed', ':isFedMembershipConfirmed');
            $params = array_merge($params, array('oldFedMembershipId' => $oldMembershipId, 'fedMembershipAssignedClub' => $clubId, 'isFedMembershipConfirmed' => (($isConfirmByAppln) ? '1' : '0')));
        } else {
            $q = $q->set('C.lastUpdated', ':now');
            $params = array_merge($params, array('now' => date('Y-m-d H:i:s')));
        }
        $q = $q->where('C.fedContact=:fedContactId')
            ->setParameters($params)
            ->getQuery();
        $res = $q->execute();
    }

    /**
     * This function is used to update the joining/leaving/first_joining date(only fed entry) of a club owned contact
     * while assigning/changing/removing fed memberships.
     *
     * @param int      $fedContactId Fed Contact Id
     * @param string   $dateType     joiningDate/leavingDate
     * @param datetime $leavingDate  Leaving date to be set
     * @param string   $assignType   Membership assign/change
     */
    public function updateJoiningOrLeavingDatesOfFedMembership($fedContactId, $dateType = 'joiningDate', $leavingDate = '', $assignType = 'assign')
    {
        $leavingDate1 = ($leavingDate != '') ? $leavingDate : date('Y-m-d H:i:s');
        $field = 'C.' . $dateType;
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set($field, ':date');
        if ($dateType == 'joiningDate' && $assignType == 'assign') {
            $membershipHistory = $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getMembershipHistory($fedContactId, 'federation');
            if (count($membershipHistory) == 0) {
                $q = $q->set('C.firstJoiningDate', ':date');
            }
        }
        $q = $q->where('C.id = :fedContactId')
            ->setParameters(array('fedContactId' => $fedContactId, 'date' => $leavingDate1))
            ->getQuery(); //->getDql();echo $q;exit;
        $res = $q->execute();
    }

    /**
     * This function is used to get the shared clubs of a contact.
     *
     * @param int    $fedContactId Fed contact Id
     * @param string $clubType     ClubType (Sub-federation or Club)
     * @param string $return       Club ids or Contact ids or both
     *
     * @return string $result Comma separated ids
     */
    public function getSharedClubsOfAContact($fedContactId, $clubType = 'clubs', $return = 'clubIds')
    {
        $q = $this->createQueryBuilder('C')
            ->select("GROUP_CONCAT(C.club SEPARATOR ',') as accessibleClubs, GROUP_CONCAT(C.id SEPARATOR ',') as accessibleContactIds")
            ->where('C.fedContact = :contactId AND C.isPermanentDelete = 0 AND C.isDraft = 0 AND C.isDeleted = 0');
        if ($clubType == 'sub_federations') {
            $q = $q->andWhere('(C.fedContact = C.id OR C.subfedContact = C.id)');
        } else {
            $q = $q->andWhere('(C.fedContact != C.id AND (C.subfedContact != C.id OR C.subfedContact IS NULL))');
        }
        $q = $q->groupBy('C.fedContact')
            ->setParameters(array('contactId' => $fedContactId))
            ->getQuery()
            ->getOneOrNullResult();
        if ($q) {
            $result = ($return == 'contactIds') ? $q['accessibleContactIds'] : $q['accessibleClubs'];
        } else {
            $result = '';
        }

        return $result;
    }

    /**
     * This function is used to get the all assigned clubs,subfederation,federation  of a contact.
     *
     * @param int    $fedContactId Fed contact Id
     * @param string $defaultLang  Club default language
     * 
     * @param string $return       Club ids or Contact ids or both
     *
     * @return array
     */
    public function getFedContactAssignedClubs($fedContactId, $defaultLang)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT DISTINCT CL.id AS Club_id, CL.is_federation AS is_federation, '
            . "COALESCE(NULLIF(ci18n.title_lang,''), CL.title) as title, "
            . 'CL.club_type as club_type, C.id as Contact_id, C.fed_contact_id as fedContactId, C.subfed_contact_id as subFedContactId,'
            . "CL.subfed_level AS subfed_level, CL.url_identifier AS url_identifier, CL.parent_club_id AS parent, "
            . "CASE WHEN C.main_club_id = CL.id THEN 1 ELSE 0 END as isMainClub, "
            . "CASE WHEN CL.club_type = 'federation' THEN '2' ELSE CASE WHEN CL.club_type = 'sub_federation' THEN '1' ELSE '0' END END AS hierarchyLevel "
            . "FROM fg_cm_contact C "
            . "INNER JOIN fg_club CL on C.club_id=CL.id "
            . "LEFT JOIN fg_club_i18n ci18n ON ci18n.id = CL.id AND ci18n.lang = :defaultLang "
            . "WHERE  C.fed_contact_id = $fedContactId "
            . "AND ((C.is_fed_membership_confirmed='0' and C.fed_membership_cat_id is not null)  OR (C.is_fed_membership_confirmed='1' and C.old_fed_membership_id is not null)) "
            . " ORDER BY hierarchyLevel DESC, isMainClub DESC ";
        $result = $conn->fetchAll($sql, array('defaultLang' => $defaultLang));

        return $result;
    }

    /**
     * Function to get FederationContcatId/SubFederationContcatId of a contactId.
     *
     * @param int $contactId Contact id
     *
     * @return array Details of federation and subfederation contactId
     */
    public function getFederationContactId($contactId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('IDENTITY(c.fedContact) as fedContactId, IDENTITY(c.subfedContact) as subFedContactId')
            ->Where('c.id=:contactId')
            ->andWhere('c.isDeleted=0')
            ->setParameters(array('contactId' => $contactId));

        $result = $qs->getQuery()->getResult();
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * Function to check fedeation member.
     *
     * @param int    $fedClubId   ClubId
     * @param string $clubType    Club type
     * @param int    $currentClub Current club
     * @param string    $defaultLang Default Lang
     * @param int    $countFlag   Count flag
     *
     * @return array
     */
    public function getConfirmApplicationCount($fedClubId, $clubType, $currentClub, $defaultLang, $countFlag = false)
    {
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $doctrineConfig->addCustomStringFunction('checkActiveContact', 'Common\UtilityBundle\Extensions\CheckActiveContact');

        $dateFormatMysql = FgSettings::getMysqlDateFormat();
        $clubDql = $this->getClubNameDQL();

        $existingClubQuery = $this->getEntityManager()->createQueryBuilder();
        $existingClubQuery = $existingClubQuery->select("GROUP_CONCAT(fgc.id SEPARATOR ', ')")
                ->from('CommonUtilityBundle:FgClub', 'fgc')
                ->where('FIND_IN_SET(fgc.id, cl.existingClubIds) != 0')->andWhere('fgc.clubType NOT IN (:clubTypes)');

        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select("cl.id as confirmId,fm.id as fedCategoryId,IDENTITY(cc.clubMembershipCat) as clubMembershipCat, cc.isCompany, fm.id as valueAfterId, MS.gender, fmb.id as valueBeforeId, fm.title as valueAfter, fmb.title as valueBefore, (DATE_FORMAT(cl.modifiedDate, '$dateFormatMysql')) as modifiedDate1,(DATE_FORMAT(cl.modifiedDate, '%Y-%m-%d %H:%i:%s')) as modifiedDate, c.id, COALESCE(NULLIF(ci18n.titleLang, ''), c.title)  as createdClubName, contactName(m.id) as modifiedBy,m.id as modifiedById, contactName(cc.id) as contactName, cc.id as contactId, checkActiveContact(cc.id, $currentClub) as isActiveContact, checkActiveContact(m.id, $currentClub) as isActiveModifiedContact")
            ->addSelect('(' . $existingClubQuery->getDQL() . ') as existingClubs');
        $moduleQuery->addSelect("(select  COALESCE(NULLIF(fgcci18n.titleLang, ''), fgcc.title)   from CommonUtilityBundle:FgClub fgcc inner join CommonUtilityBundle:FgClubI18n fgcci18n WITH   fgcc.id = fgcci18n.id AND fgcci18n.lang =:defaultLang where fgcc.id = cc.mainClub ) as mainClub");
        $moduleQuery->addSelect('(' . $clubDql->getDQL() . ') AS clubChangedBy ')
            ->from('CommonUtilityBundle:FgCmFedmembershipConfirmationLog', 'cl')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', 'MS.fedContact = cl.contact')
            ->leftJoin('cl.club', 'c')
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'c.id = ci18n.id AND ci18n.lang =:defaultLang')
            ->leftJoin('cl.contact', 'cc')
            ->leftJoin('cl.fedmembershipValueAfter', 'fm')
            ->leftJoin('cl.fedmembershipValueBefore', 'fmb')
            ->leftJoin('cl.modifiedBy', 'm')
            ->Where('cl.federationClub=:clubId')
            ->andWhere('cl.isMerging=0')
            ->andWhere('cc.isDeleted=0')
            ->andWhere("cc.isFedMembershipConfirmed='1'")
            ->andWhere("cl.status='PENDING'")
            ->setParameter('defaultLang', $defaultLang);

        if ($clubType != 'federation') {
            $moduleQuery->andWhere('cl.club=:currentClub')
                ->setParameter('currentClub', $currentClub);
        }
        $moduleQuery->setParameter('clubId', $fedClubId);
        $moduleQuery->setParameter('clubTypes', array('federation', 'sub_federation'));

        $result = $moduleQuery->getQuery()->getResult();

        if ($countFlag) {
            return count($result);
        } else {
            return $result;
        }
    }

    /**
     * Function to get the applications for merging
     *
     * @param int    $fedClubId   ClubId
     * @param string $clubType    Club type
     * @param int    $currentClub Current club
     * @param string  $defaultLang  Default Language
     * 
     * @return array $result Application list details
     */
    public function getMergeApplications($fedClubId, $clubType, $currentClub, $defaultLang)
    {
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $doctrineConfig->addCustomStringFunction('checkActiveContact', 'Common\UtilityBundle\Extensions\CheckActiveContact');

        $dateFormatMysql = FgSettings::getMysqlDateFormat();
        $clubDql = $this->getClubNameDQL();

        $existingClubQuery = $this->getEntityManager()->createQueryBuilder();

        $existingClubQuery = $existingClubQuery->select("GROUP_CONCAT(CL1.id, '#---#',  COALESCE(NULLIF(CL18n.titleLang, ''), CL1.title) SEPARATOR ', ')")
            ->from('CommonUtilityBundle:FgCmContact', 'C2')
            ->innerJoin('CommonUtilityBundle:FgClub', 'CL1', 'WITH', 'CL1.id = C2.club ')
            ->innerJoin('CommonUtilityBundle:FgClubI18n', 'CL18n', 'WITH', 'CL1.id = CL18n.id AND CL18n.lang =:defaultLang ')
            ->where('C2.fedContact = cc.mergeToContact')
            ->andWhere('CL1.clubType NOT IN (:clubTypes)');

        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select("IDENTITY(cl.federationClub), IDENTITY(cc.mergeToContact) as fff, cl.isMerging, cl.id as confirmId, IDENTITY(cc.clubMembershipCat) as clubMembership, cc.isCompany, MS.gender, (DATE_FORMAT(cl.modifiedDate, '$dateFormatMysql')) as modifiedDate1,(DATE_FORMAT(cl.modifiedDate, '%Y-%m-%d %H:%i:%s')) as modifiedDate, c.id as clubId, COALESCE(NULLIF(ci18n.titleLang, ''), c.title)  as currentClub, contactName(m.id) as modifiedBy, m.id as modifiedById, contactName(cc.id) as contactName, cc.id as contactId, checkActiveContact(cc.id, $currentClub) as isActiveContact, checkActiveContact(m.id, $currentClub) as isActiveModifiedContact")
            ->addSelect("C1.id as ECContactId, IDENTITY(C1.mainClub) as ECMainClub, C1.isCompany as EcIsCompany, MS1. gender as ECGender, IDENTITY(C1.clubMembershipCat) as ECClubMembership, contactname(C1.id) as ECContactName, checkActiveContact(C1.id, $currentClub) as ECIsActive")
            ->addSelect('(' . $clubDql->getDQL() . ') AS clubChangedBy ')
            ->addSelect('(' . $existingClubQuery->getDQL() . ') as ECExistingClubs')
            ->from('CommonUtilityBundle:FgCmFedmembershipConfirmationLog', 'cl')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', 'MS.fedContact = cl.contact')
            ->innerJoin('cl.club', 'c')
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'c.id = ci18n.id AND ci18n.lang =:defaultLang')
            ->innerJoin('CommonUtilityBundle:FgCmContact', 'cc', 'WITH', 'cc.fedContact = cl.contact AND cc.club = cl.club')
            ->innerJoin('CommonUtilityBundle:FgCmContact', 'C1', 'WITH', 'C1.id = cc.mergeToContact')
            ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS1', 'WITH', 'MS1.fedContact = cc.mergeToContact')
            ->leftJoin('cl.modifiedBy', 'm')
            ->Where('cl.federationClub=:clubId')
            ->andWhere('cl.isMerging=1')
            ->andWhere('cc.isDeleted=0')
            ->andWhere("cc.isFedMembershipConfirmed='1'")
            ->andWhere("cl.status='PENDING'")
            ->setParameter('defaultLang', $defaultLang);
        ;
        if ($clubType != 'federation') {
            $moduleQuery->andWhere('cl.club=:currentClub')
                ->setParameter('currentClub', $currentClub);
        }
        $moduleQuery->setParameter('clubId', $fedClubId);
        $moduleQuery->setParameter('clubTypes', array('federation', 'sub_federation'));
        $result = $moduleQuery->getQuery()->getResult();

        return $result;
    }

    /**
     * This function is used to get the count of applications to be merged
     *
     * @param int    $fedClubId   ClubId
     * @param string $clubType    Club type
     * @param int    $currentClub Current club
     *
     * @return int $count Count of merge applications
     */
    public function getMergeApplicationsCount($fedClubId, $clubType, $currentClub)
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select("COUNT(cl.id) as appCount")
            ->from('CommonUtilityBundle:FgCmFedmembershipConfirmationLog', 'cl')
            ->innerJoin('CommonUtilityBundle:FgCmContact', 'cc', 'WITH', 'cc.fedContact = cl.contact AND cc.club = cl.club')
            ->where('cl.federationClub=:clubId')
            ->andWhere('cl.isMerging=1')
            ->andWhere('cc.isDeleted=0')
            ->andWhere("cc.isFedMembershipConfirmed='1'")
            ->andWhere("cl.status='PENDING'");
        if ($clubType != 'federation') {
            $moduleQuery->andWhere('cl.club=:currentClub')
                ->setParameter('currentClub', $currentClub);
        }
        $moduleQuery->setParameter('clubId', $fedClubId);
        $count = $moduleQuery->getQuery()->getSingleScalarResult();

        return $count;
    }

    /**
     * Function to get the  club.
     *
     * @return Integer
     */
    private function getClubNameDQL()
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select("COALESCE(NULLIF(fci18n.titleLang, ''), fc.title)")
            ->from('CommonUtilityBundle:FgCmContact', 'ct')
            ->innerJoin('CommonUtilityBundle:FgClub', 'fc', 'WITH', 'ct.mainClub = fc.id')
            ->innerJoin('CommonUtilityBundle:FgClubI18n', 'fci18n', 'WITH', 'fc.id = fci18n.id AND fci18n.lang =:defaultLang')
            ->where('ct.id = m.id');

        return $moduleQuery;
    }

    /**
     * Function to check fedeation member.
     *
     * @param int $contactId Contact id
     *
     * @return array
     */
    public function checkFedMemberArchive($contactId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('IDENTITY(c.fedMembershipCat) as isFedCategory,IDENTITY(c.fedContact) as fedContactId, IDENTITY(c.subfedContact) as subfedContactId, c.isFedMembershipConfirmed, IDENTITY(c.oldFedMembership) as oldFedMembershipId')
            ->Where('c.id=:contactId')
            ->andWhere('c.isDeleted=0')
            ->setParameters(array('contactId' => $contactId));

        $result = $qs->getQuery()->getResult();
        if (count($result)) {
            return $result[0];
        } else {
            return array();
        }
    }

    /**
     * This function is used to insert a new entry for contact in fg_cm_contact table.
     *
     * @param object $container       Container object
     * @param int    $clubId          Club id
     * @param int    $fedContactId    Fed contact id
     * @param int    $subFedContactId Sub fed contact id
     * @param string $email           Primary email of the contact
     *
     * @return int $contactId The new contact id
     */
    public function insertContact($container, $clubId, $fedContactId = '', $subFedContactId = '', $email)
    {
        $isNewsletterSubscriber = $this->_em->find('CommonUtilityBundle:FgClub', $clubId)->getDefaultContactSubscription();
        $isNewsletterSubscriber = ($isNewsletterSubscriber) ? 1 : 0;
        $subscriberWithSameEmailExist = $this->_em->getRepository('CommonUtilityBundle:FgCnSubscriber')->searchEmailExists('', $clubId, $email);
        if (($subscriberWithSameEmailExist[0]['emailCount']) > 0) {
            $this->_em->getRepository('CommonUtilityBundle:FgCnSubscriber')->deleteSubscriberWithEmail($clubId, $email);
            $isNewsletterSubscriber = 1;
        }
        $fedContactObj = $this->_em->find('CommonUtilityBundle:FgCmContact', $fedContactId);
        $mainClubId = $this->getMainClub($fedContactId);

        $insertContactSet = $insertContactSetValues = array();

        $insertContactSet[] = 'club_id = :clubId';
        $insertContactSetValues[':clubId'] = $clubId;

        $insertContactSet[] = 'main_club_id = :mainClubId';
        $insertContactSetValues[':mainClubId'] = $mainClubId;

        if ($fedContactId) {
            $insertContactSet[] = 'fed_contact_id = :fedContactId';
            $insertContactSetValues[':fedContactId'] = $fedContactId;
        }
        if ($subFedContactId) {
            $insertContactSet[] = 'subfed_contact_id = :subFedContactId';
            $insertContactSetValues[':subFedContactId'] = $subFedContactId;
        }
        $insertContactSet[] = 'fed_membership_cat_id = :fedMembershipCatId';
        $insertContactSetValues[':fedMembershipCatId'] = $fedContactObj->getFedMembershipCat()->getId();

        $insertContactSet[] = 'is_company = :isCompany';
        $insertContactSetValues[':isCompany'] = $fedContactObj->getIsCompany();

        $insertContactSet[] = 'comp_def_contact = :compDefContact';
        $insertContactSetValues[':compDefContact'] = $fedContactObj->getCompDefContact();

        $insertContactSet[] = 'comp_def_contact_fun = :compDefContactFun';
        $insertContactSetValues[':compDefContactFun'] = $fedContactObj->getCompDefContactFun();

        $insertContactSet[] = 'has_main_contact = :hasMainContact';
        $insertContactSetValues[':hasMainContact'] = $fedContactObj->getHasMainContact();

        $insertContactSet[] = 'has_main_contact_address = :hasMainContactAddress';
        $insertContactSetValues[':hasMainContactAddress'] = $fedContactObj->getHasMainContactAddress();

        $insertContactSet[] = 'intranet_access = :intranetAccess';
        $insertContactSetValues[':intranetAccess'] = 0;

        $insertContactSet[] = 'is_subscriber = :isSubscriber';
        $insertContactSetValues[':isSubscriber'] = $isNewsletterSubscriber;

        $insertContactSet[] = 'created_club_id = :createdClubId';
        $insertContactSetValues[':createdClubId'] = $fedContactObj->getCreatedClub()->getId();

        $insertContactSet[] = 'created_at = NOW()';
        $insertContactSet[] = 'last_updated = NOW()';

        $contactPdo = new Pdo\ContactPdo($container);
        $contactId = $contactPdo->insertToContactTable($insertContactSet, $insertContactSetValues);

        //insert log entries
        $this->insertContactSystemLogEntries($container, $clubId, $contactId, $isNewsletterSubscriber);

        return $contactId;
    }

    /**
     * This function is used to insert system log entries of a contact.
     *
     * @param object $container              Container object
     * @param int    $clubId                 Club id
     * @param int    $contactId              Contact id
     * @param int    $isNewsletterSubscriber Newsletter subscription flag
     */
    private function insertContactSystemLogEntries($container, $clubId, $contactId, $isNewsletterSubscriber)
    {
        $no = $container->get('translator')->trans('NO');
        $logArr = array();
        //insert stealth mode log entry
        $logArr[] = array('kind' => 'system', 'field' => 'stealth mode', 'value_after' => $no, 'contact_id' => $contactId, 'club_id' => $clubId);
        //insert intranet access log entry
        $logArr[] = array('kind' => 'system', 'field' => 'intranet access', 'value_after' => $no, 'contact_id' => $contactId, 'club_id' => $clubId);
        //insert newsletter subscriber log entry
        if ($isNewsletterSubscriber) {
            $logArr[] = array('kind' => 'system', 'field' => 'newsletter', 'value_after' => 'subscribed', 'contact_id' => $contactId, 'club_id' => $clubId);
        }
        if (count($logArr) > 0) {
            $logHandlerObj = new FgLogHandler($container);
            $logHandlerObj->processLogEntryAction('contactSystemLogs', 'fg_cm_change_log', $logArr);
        }
    }

    /**
     * This function returns the main club id of a contact.
     *
     * @param int $fedContactId Fed Contact Id
     *
     * @return int $mainClubId MainClubId
     */
    public function getMainClub($fedContactId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder('C')
            ->select('IDENTITY(C.mainClub) AS mainClub')
            ->from('CommonUtilityBundle:FgCmContact', 'C')
            ->where('C.fedContact = :contactId')
            ->setParameter('contactId', $fedContactId)
            ->setMaxResults('1');
        $mainClubId = $qb->getQuery()->getSingleScalarResult();

        return $mainClubId;
    }

    /**
     * This function is used to check whether a contact is shared in a club, if shared then return contactId else return 0.
     *
     * @param int $clubId       Club id
     * @param int $fedContactId Fed contact id
     *
     * @return int $contactId Contact id
     */
    public function checkWhetherContactIsSharedInAClub($clubId, $fedContactId)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder('C')
            ->select('C.id AS contactId')
            ->from('CommonUtilityBundle:FgCmContact', 'C')
            ->where('C.fedContact = :contactId')
            ->andWhere('C.club = :clubId')
            ->setParameters(array('contactId' => $fedContactId, 'clubId' => $clubId));
        $result = $qb->getQuery()->getOneOrNullResult();
        $contactId = $result['contactId'] ? $result['contactId'] : 0;

        return $contactId;
    }

    /**
     * This function is used to insert entry in master club/federation table.
     *
     * @param object $container Container object
     * @param int    $clubId    Club id
     * @param int    $contactId Contact id
     * @param string $type      Type club/federation
     */
    public function insertToMasterTable($container, $clubId, $contactId, $type = 'club')
    {
        $insertMasterSet = $insertMasterSetValues = array();
        if ($clubId != 0) {
            $masterTable = "master_{$type}_{$clubId}";
            if ($type == 'federation') {
                $insertMasterSet[] = 'club_id = :clubId';
                $insertMasterSetValues[':clubId'] = $clubId;
            }

            $insertMasterSet[] = 'contact_id = :contactId';
            $insertMasterSetValues[':contactId'] = $contactId;

            $contactPdo = new Pdo\ContactPdo($container);
            $contactPdo->insertToMasterTable($masterTable, $insertMasterSet, $insertMasterSetValues);
        }
    }

    /**
     * get fed contact id and contact details for add existing fed member functionality
     * fed contact id as id.
     *
     * @param object $container    object
     * @param string $searchTerm   search term
     * @param int    $federationId federation id
     * @param int    $clubId       club id
     *
     * @return array
     */
    public function addExistingFedMember($container, $searchTerm, $federationId, $clubId, $contact)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $firstname = '`' . $container->getParameter('system_field_firstname') . '`';
        $lastname = '`' . $container->getParameter('system_field_lastname') . '`';
        $company = '`' . $container->getParameter('system_field_companyname') . '`';
        $dob = '`' . $container->getParameter('system_field_dob') . '`';
        $gender = '`' . $container->getParameter('system_field_gender') . '`';
        $location = '`' . $container->getParameter('system_field_corres_ort') . '`';
        $defaultLang = $container->get('club')->get('default_lang');

        $condition = "INNER JOIN fg_club fc ON  fc.federation_id = {$federationId} and C.club_id = fc.id and fc.club_type NOT IN ('federation','sub_federation') INNER JOIN fg_cm_membership m ON m.id = C.fed_membership_cat_id LEFT JOIN fg_club_i18n fci18n ON (fci18n.id = fc.id AND fci18n.lang='$defaultLang') ";
        $fedmembershipCondition = "AND C.fed_membership_cat_id IS NOT NULL AND (C.is_fed_membership_confirmed = '0' OR (C.is_fed_membership_confirmed = '1' AND C.old_fed_membership_id IS NOT NULL ))  and C.club_id NOT IN ({$clubId})";
        $newfield = "IF (C.is_company = 0 ,CONCAT(contactName(C.id),IF(DATE_FORMAT(`4`,'%Y') = '0000' OR `4` is NULL OR `4` ='','',CONCAT(' (',DATE_FORMAT(`4`,'%Y'),')'))),contactName(C.id)) as title";
        $columns = " GROUP_CONCAT(IF(fc.id = C.main_club_id, CONCAT(COALESCE(NULLIF(fci18n.title_lang,''), fc.title),'#mainclub#'), COALESCE(NULLIF(fci18n.title_lang,''), fc.title)) SEPARATOR ', ') as clubs,fc.club_type,C.fed_contact_id as id,S.`3` as primaryEmail, $newfield,$firstname as firstname,$lastname as lastname, $gender as gender,date_format($dob,'$dateFormat') as birth,date_format($dob,'%Y-%m-%d') as birth1, $location as location, m.title as fedmembership,m.id as fedmemId, IF(C.is_company=1, $company,'') as company,C.has_main_contact ";
        $limit = 'LIMIT 10';
        if ($searchTerm == '') {
            $listquery = "SELECT $columns  FROM fg_cm_contact C INNER JOIN master_system S On S.fed_contact_id= C.fed_contact_id $condition where  C.is_permanent_delete=0 AND C.is_deleted=0 $fedmembershipCondition and C.fed_contact_id= {$contact} GROUP BY C.fed_contact_id  ORDER BY title $limit";
        } else {
            $search = explode(' ', trim($searchTerm), 2);
            if (sizeof($search) > 1) {
                $listquery = "SELECT $columns FROM fg_cm_contact C INNER JOIN master_system S On S.fed_contact_id= C.fed_contact_id $condition where  C.is_permanent_delete=0 $fedmembershipCondition AND C.is_deleted=0  AND (S.$firstname LIKE '$search[0]%' OR S.$lastname LIKE '$search[0]%' OR S.`9` LIKE '$search[0]%') AND (S.$firstname LIKE '$search[1]%' OR S.$lastname LIKE '$search[1]%' OR S.`9` LIKE '$search[1]%') GROUP BY C.fed_contact_id ORDER BY title $limit";
            } else {
                $listquery = "SELECT $columns FROM fg_cm_contact C INNER JOIN master_system S On S.fed_contact_id= C.fed_contact_id $condition where  C.is_permanent_delete=0 $fedmembershipCondition AND C.is_deleted=0  AND (S.$firstname LIKE :search OR S.$lastname LIKE :search OR S.`9` LIKE :search) GROUP BY C.fed_contact_id  ORDER BY title $limit";
            }
        }

        $conn = $this->getEntityManager()->getConnection();
        $contactsArray = $conn->fetchAll($listquery, array(':search' => $searchTerm . '%'));

        return $contactsArray;
    }

    /**
     * This function is used to check whether a contact is shared in multiple clubs or not.
     *
     * @param int $fedContactId Fed Contact id
     * @param int $clubId       ClubId
     *
     * @return bool $isSharedInMultipleClubs 0 or 1
     */
    public function checkWhetherContactIsSharedInMultipleClubs($fedContactId, $clubId)
    {
        $sharedClubs = $this->getSharedClubsOfAContact($fedContactId);
        $sharedClubIds = explode(',', $sharedClubs);
        $sharedClubIds = array_values(array_diff($sharedClubIds, array($clubId)));
        $isSharedInMultipleClubs = (count($sharedClubIds) > 0) ? true : false;

        return $isSharedInMultipleClubs;
    }

    /**
     * This function is used to copy a contact's entry in federation.
     *
     * @param int    $clubId       Club id to be set as created club id
     * @param int    $contactId    Contact id
     * @param int    $fedContactId FedContact id
     * @param string $clubType     Club type (federation or sub-federation)
     *
     * @return int $new_id The newly inserted contact id
     */
    public function copyContactEntryInFederation($clubId, $contactId, $fedContactId = 0, $clubType = 'federation')
    {
        $obj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $newObj = clone $obj;
        $newObj->setMemberId('');
        $this->_em->persist($newObj);
        $this->_em->flush();
        $new_id = $newObj->getId();
        $fedContactId = ($fedContactId) ? $fedContactId : $new_id;
        $fedContactObj = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $fedContactId);
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $newObj->setMainClub($clubObj);
        $newObj->setCreatedClub($clubObj);
        $newObj->setFedContact($fedContactObj);
        if ($clubType == 'sub_federation') {
            $subfedContactId = $new_id;
            $subfedContactObj = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $subfedContactId);
            $newObj->setSubfedContact($subfedContactObj);
        }
        $this->_em->persist($newObj);
        $this->_em->flush();

        return $new_id;
    }

    /**
     * This function is used to check whether contacts with same email exists in clubs.
     *
     * @param int    $fedContactId Fed contact id
     * @param array  $clubIds      ClubId array
     * @param string $email        Primary email
     * @param string $currentClubId        The id in which the user is been created
     *
     * @return int Count of contacts (0 or more)
     */
    public function checkForContactsWithSameEmail($fedContactId, $clubIds, $email, $currentClubId)
    {
        if ($currentClubId != '') {
            $currentClubIdCondition = " OR (C.fedContact =:fedContactId AND C.club = $currentClubId)";
        }

        $qb = $this->createQueryBuilder('C')
            ->select('COUNT(C.id) AS contactCount')
            ->innerJoin("CommonUtilityBundle:MasterSystem", "MS", "WITH", "(C.fedContact = MS.fedContact AND (C.fedContact != :fedContactId $currentClubIdCondition))")
            ->where('C.club IN (:clubIds)')
            ->andWhere('lower(MS.primaryEmail) = lower(:email)')
            ->andWhere('C.isPermanentDelete = 0')
            ->setParameters(array('fedContactId' => $fedContactId, 'clubIds' => $clubIds, 'email' => $email));
        $sameEmailContactExist = $qb->getQuery()->getSingleScalarResult();
        return $sameEmailContactExist;
    }

    /**
     * This function is used to update fed membership removal details.
     *
     * @param int $fedContactId Fed contact id
     */
    public function updateFedMembershipRemovalDetails($fedContactId)
    {
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set('C.fedMembershipCat', 'NULL')
            ->set('C.isFedMembershipConfirmed', ':confirmedFlag')
            ->set('C.oldFedMembership', 'NULL')
            ->set('C.lastUpdated', ':now')
            ->where('C.fedContact = :fedContactId')
            ->setParameters(array('fedContactId' => $fedContactId, 'now' => date('Y-m-d H:i:s'), 'confirmedFlag' => '0'))
            ->getQuery();
        $res = $q->execute();
    }

    /**
     * Method update the quickwindow visiblitity for a contact.
     *
     * @param int $contactId
     * @param int $clubId
     * @param int $status status
     */
    public function quickWindowVisibility($contactId, $clubId, $status)
    {
        $query = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set('C.quickwindowVisibilty', ':status')
            ->where('C.id = :contactId')
            ->andWhere('C.club = :clubId')
            ->setParameters(array('contactId' => $contactId, 'clubId' => $clubId, 'status' => $status))
            ->getQuery();

        return $query->execute();
    }

    /**
     * This function is used to quit ClubMembership.
     *
     * @param array $contactIds ContactId
     * @param int   $clubId     ClubId
     * @param int   $criteria   Criteria
     *
     * @return int Count of contacts (0 or more)
     */
    public function quitContactClubMembership($contactIds, $clubId, $criteria, $critleavingDate = '', $currentUserid)
    {
        $contact_counter = 0;
        $conn = $this->getEntityManager()->getConnection();
        $retrunArray = array();

        foreach ($contactIds as $contactId) {
            $getMembershipdata = $this->getMembershipDetails($contactId);

            $membershipId = $getMembershipdata['clubMembershipId'];
            if (!empty($membershipId)) {
                $membershipHistoryId = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getCurrentMembershipLogId($membershipId, $contactId);
                $leavingDate = date('Y-m-d H:i:s');
                switch ($criteria) {

                    case 1:
                        if (isset($critleavingDate)) {
                            $userpreviousState = $this->validateContactMembershipDate($contactId, $clubId, $critleavingDate, '>');
                            if (count($userpreviousState) == 0) {
                                $critleavingDate1 = date_create_from_format(FgSettings::getPhpDateFormat(), $critleavingDate);
                                $critleavingDatecm = date_format($critleavingDate1, 'Y-m-d');
                                $fgCmContactQuery = 'UPDATE fg_cm_contact SET club_membership_cat_id = NULL, leaving_date = "' . $critleavingDatecm . '", last_updated = "' . date('Y-m-d H:i:s') . '" WHERE id =' . $contactId . '';
                                $conn->executeQuery($fgCmContactQuery);

                                $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->updateMembershipHistoryEntryOfContact($contactId, $membershipHistoryId, 'leaving_date', $critleavingDatecm);
                                $fgCmMembershipLogEntryQuery = "INSERT INTO fg_cm_membership_log (club_id, contact_id, membership_id, date, kind, field, value_before, value_after, changed_by) VALUES
                                          ($clubId,$contactId,$membershipId,'$critleavingDatecm','assigned contacts','',contactName($contactId),'',$currentUserid)";

                                $conn->executeQuery($fgCmMembershipLogEntryQuery);
                                $retrunArray["$contactId"] = $membershipId;
                                $contact_counter = $contact_counter + 1;
                            }
                        }
                        break;
                    case 2:
                        $latestContactHistory = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getLatestMembershipLogDetails($membershipHistoryId, $contactId);
                        $last_joining_date = $latestContactHistory['dateFromOriginal'];
                        $userpreviousState = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getContactMembershipByDate($contactId, $clubId, $last_joining_date);
                        if (count($userpreviousState) > 0) {
                            $fgCmContactQuery = 'UPDATE fg_cm_contact SET club_membership_cat_id = NULL ,joining_date = "' . $userpreviousState['joining_date'] . '", leaving_date = "' . $userpreviousState['leaving_date'] . '", last_updated = "' . date('Y-m-d H:i:s') . '" WHERE id =' . $contactId . '';
                        } else {
                            $fgCmContactQuery = 'UPDATE fg_cm_contact SET club_membership_cat_id = NULL,  first_joining_date="0000-00-00 00:00:00",  joining_date="0000-00-00 00:00:00", leaving_date = "0000-00-00 00:00:00", last_updated = "' . date('Y-m-d H:i:s') . '" WHERE id =' . $contactId . '';
                        }
                        $conn->executeQuery($fgCmContactQuery);
                        $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->deleteMembershipHistoryOfContact($contactId, $membershipHistoryId);
                        $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmChangeLog')->deleteContactMemebership($contactId, $clubId, $membershipId);
                        $retrunArray["$contactId"] = $membershipId;
                        $contact_counter = $contact_counter + 1;
                        break;
                    case 3:
                        $fgCmContactQuery = 'UPDATE fg_cm_contact SET club_membership_cat_id = NULL, first_joining_date="0000-00-00 00:00:00", joining_date="0000-00-00 00:00:00", leaving_date = "0000-00-00 00:00:00", last_updated = "' . date('Y-m-d H:i:s') . '" WHERE id =' . $contactId . '';
                        $conn->executeQuery($fgCmContactQuery);
                        $this->getEntityManager()->getRepository('CommonUtilityBundle:FgCmChangeLog')->deleteContactMemebershipComplete($contactId, $clubId);
                        $retrunArray["$contactId"] = $membershipId;
                        $contact_counter = $contact_counter + 1;
                        break;
                }

                $retrunArray[0] = $contact_counter;
            }
        }

        return $retrunArray;
    }

    public function validateContactMembershipDate($contactId, $clubid, $toDate = '', $operator = '<=')
    {
        $fromwhere = '';
        $towhere = '';

        if ($toDate != '') {
            $toDate = strtotime($toDate);
            $toDate = date('Y-m-d', $toDate);
            $towhere = "and DATE(c.`joining_date`) $operator '$toDate' ";
        }
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT  * FROM fg_cm_contact c WHERE  c.id=$contactId and club_id=$clubid  $towhere";
        $result = $conn->fetchAll($sql);

        return $result[0];
    }

    public function updateMainClubOfExistingContactEntries($fedContactId, $clubId)
    {
        $mainClubId = $this->getMainClub($fedContactId);
        if ($mainClubId == $clubId) {
            $newMainClub = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgClubAssignment')->getPreviousClubAssignment($fedContactId, $clubId);
            $q = $this->createQueryBuilder()
                ->update('CommonUtilityBundle:FgCmContact', 'C')
                ->set('C.mainClub', ':mainClubId')
                ->set('C.createdClub', ':createdClubId')
                ->where('C.fedContact = :fedContactId')
                ->setParameters(array('fedContactId' => $fedContactId, 'mainClubId' => $newMainClub, 'createdClubId' => $newMainClub))
                ->getQuery();
            $res = $q->execute();
        }
    }

    public function isContactSharedInMultipleClubsUnderASubFed($subFedContactId)
    {
        $q = $this->createQueryBuilder('C')
            ->select('COUNT(C.id) as clubCount')
            ->where('C.subfedContact = :subFedContactId AND C.isPermanentDelete = 0 AND C.isDraft = 0 AND C.isDeleted = 0')
            ->andWhere('(C.subfedContact != C.id)')
            ->setParameters(array('subFedContactId' => $subFedContactId))
            ->getQuery()
            ->getSingleResult();
        $result = ($q['clubCount'] > 1) ? 1 : 0;

        return $result;
    }

    public function assignClubMembership($container, $contactIds, $newClubMembershipId, $joiningDate, $criteria, $transferDate)
    {
        $updateArr = array();
        $clubId = $container->get('club')->get('id');
        $currentContactId = $container->get('contact')->get('id');
        $currentDateTimestamp = strtotime('+1 day'); //Actually its yesterdays
        $phpDateFormat = FgSettings::getPhpDateFormat();
        $dateObj = new \DateTime();
        foreach ($contactIds as $contactId) {
            $contactDetails = $this->getContactClubMembershipDetails($contactId);
            $oldClubMembershipId = $contactDetails['clubMembershipCatId'];
            if (($oldClubMembershipId == $newClubMembershipId) || ($newClubMembershipId == '')) {
                continue;
            }
            if ($oldClubMembershipId != '') {
                //change
                switch ($criteria) {
                    case 1:
                        //transfer from current to new membership with transfer date
                        $lastLeavingDates = $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getPreviousLeavingDate($contactId, $clubId);
                        $transferDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $transferDate)->format('U');
                        if ($transferDateTimestamp >= $currentDateTimestamp) {
                            continue;
                        }
                        if (count($lastLeavingDates) > 0) {
                            $lastLeavingDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $lastLeavingDates[0])->format('U');
                            if ($transferDateTimestamp <= $lastLeavingDateTimestamp) {
                                continue;
                            }
                        }
                        $this->updateClubMembershipOfContact($contactId, $newClubMembershipId);
                        $this->writeClubMembershipLog($container, $contactId, $newClubMembershipId, $contactDetails['contactName'], $transferDate, 'change', $oldClubMembershipId);
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->updateClubMembershipHistory($clubId, $contactId, $oldClubMembershipId, $transferDate);
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->insertFedMembershipHistory($clubId, $contactId, $newClubMembershipId, $currentContactId, 'club', $transferDate);
                        $updateArr[] = array('contactId' => $contactId, 'oldMembershipId' => $oldClubMembershipId, 'newMembershipId' => $newClubMembershipId);
                        //update membership_history set to date
                        //insert membership_history set from date
                        //insert fg_cm_membership_log insert 2 entries
                        //update fg_cm_contact set club membership_id, joining date only
                        break;
                    case 2:
                        //replace current membership and use its joining date
                        $this->updateClubMembershipOfContact($contactId, $newClubMembershipId);
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->updateClubMembershipHistory($clubId, $contactId, $oldClubMembershipId, '', $newClubMembershipId);
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipLog')->updateClubMembershipInLog($clubId, $contactId, $oldClubMembershipId, '', $newClubMembershipId);
                        $updateArr[] = array('contactId' => $contactId, 'oldMembershipId' => $oldClubMembershipId, 'newMembershipId' => $newClubMembershipId);
                        //update fg_cm_contact change club_membership
                        //update fg_cm_membership_log update club membership
                        //update fg_cm_membershipHistory update club membership
                        break;
                    case 3:
                        $lastLeavingDates = $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getPreviousLeavingDate($contactId, $clubId, true);
                        $transferDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $transferDate)->format('U');
                        if ($transferDateTimestamp >= $currentDateTimestamp) {
                            continue;
                        }
                        if (count($lastLeavingDates) > 0) {
                            $lastLeavingDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $lastLeavingDates[0])->format('U');
                            if ($transferDateTimestamp <= $lastLeavingDateTimestamp) {
                                continue;
                            }
                        }
                        //replace current membership and change joinig date to new date
                        $this->updateClubMembershipOfContact($contactId, $newClubMembershipId, $transferDate, 'assignwithchangejoiningdate');
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipLog')->updateClubMembershipInLog($clubId, $contactId, $oldClubMembershipId, $transferDate, $newClubMembershipId);
                        $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->updateClubMembershipHistory($clubId, $contactId, $oldClubMembershipId, '', $newClubMembershipId, $transferDate);
                        $updateArr[] = array('contactId' => $contactId, 'oldMembershipId' => $oldClubMembershipId, 'newMembershipId' => $newClubMembershipId);
                        //update fg_cm_contact change club_membership and joining date
                        //update fg_cm_membership_log update club membership
                        //update fg_cm_membershipHistory update club membership
                        break;
                    default:
                        break;
                }
            } else {
                //assign
                $lastLeavingDates = $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getPreviousLeavingDate($contactId, $contactDetails['clubId']);
                $joiningDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $joiningDate)->format('U');
                if ($joiningDateTimestamp >= $currentDateTimestamp) {
                    $this->continue;
                }
                if (count($lastLeavingDates) > 0) {
                    $lastLeavingDateTimestamp = $dateObj->createFromFormat($phpDateFormat, $lastLeavingDates[0])->format('U');
                    if ($joiningDateTimestamp <= $lastLeavingDateTimestamp) {
                        $this->continue;
                    }
                }
                $this->updateClubMembershipOfContact($contactId, $newClubMembershipId, $joiningDate, 'assign');
                $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->insertFedMembershipHistory($clubId, $contactId, $newClubMembershipId, $container->get('contact')->get('id'), 'club', $joiningDate);
                $this->writeClubMembershipLog($container, $contactId, $newClubMembershipId, $contactDetails['contactName'], $joiningDate);
                $updateArr[] = array('contactId' => $contactId, 'oldMembershipId' => '', 'newMembershipId' => $newClubMembershipId);
            }
        }

        return $updateArr;
    }

    public function writeClubMembershipLog($container, $contactId, $membershipId, $contactName, $date = '', $membershipProcess = 'assign', $oldMembershipId = 0)
    {
        $logArr = array();
        if ($date != '') {
            $dateObj = new \DateTime();
            $date = $dateObj->createFromFormat(FgSettings::getPhpDateFormat(), $date)->format('Y-m-d H:i:s');
        }
        //insert to fg_cm_membership log
        if ($membershipProcess == 'assign' || $membershipProcess == 'change') {
            $logArr[] = array('kind' => 'assigned contacts', 'membership_id' => $membershipId, 'value_after' => $contactName, 'contact_id' => $contactId, 'date' => $date);
        }
        if ($membershipProcess == 'change') {
            $logArr[] = array('kind' => 'assigned contacts', 'membership_id' => $oldMembershipId, 'value_before' => $contactName, 'contact_id' => $contactId, 'date' => $date);
        }
        if (count($logArr) > 0) {
            $logHandlerObj = new FgLogHandler($container);
            $logHandlerObj->processLogEntryAction('club_membership_assignment', 'fg_cm_membership_log', $logArr);
        }
    }

    public function updateClubMembershipOfContact($contactId, $membershipId, $joiningDate = '', $type = 'change')
    {
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set('C.clubMembershipCat', ':membershipId')
            ->set('C.lastUpdated', ':now');
        $params = array('membershipId' => $membershipId);
        $dateObj = new \DateTime();
        if ($type == 'assign' || $type == 'assignwithchangejoiningdate') {
            $membership = $this->_em->getRepository('CommonUtilityBundle:FgCmMembershipHistory')->getMembershipHistory($contactId, 'club');
            if (count($membership) == 0) {
                $q = $q->set('C.firstJoiningDate', ':joiningDate');
            }
            //club membership assigning case3 handling first joining date
            if ($type == 'assignwithchangejoiningdate') {
                $membeshipdateDetails = $this->getContactClubMembershipDetails($contactId);
                $oldJoiningDate = $membeshipdateDetails['joiningDate']->format('U');
                $oldFirstJoiningDate = $membeshipdateDetails['firstJoiningDate']->format('U');
                if ($oldFirstJoiningDate == $oldJoiningDate) {
                    $q = $q->set('C.firstJoiningDate', ':joiningDate');
                }
            }
            $q = $q->set('C.joiningDate', ':joiningDate')
                ->set('C.leavingDate', 'NULL');
            if ($joiningDate != '') {
                $joiningDate = $dateObj->createFromFormat(FgSettings::getPhpDateFormat(), $joiningDate)->format('Y-m-d H:i:s');
            }
            $params['joiningDate'] = $joiningDate;
        }

        $params['contactId'] = $contactId;
        $params['now'] = date('Y-m-d H:i:s');
        $q = $q->where('C.id = :contactId')
            ->setParameters($params)
            ->getQuery();
        $res = $q->execute();
    }

    public function getContactClubMembershipDetails($contactId)
    {
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('contactName', 'Common\UtilityBundle\Extensions\FetchContactName');

        $qb = $this->createQueryBuilder('C')
            ->select('C.id, IDENTITY(C.clubMembershipCat) AS clubMembershipCatId, IDENTITY(C.club) AS clubId, contactName(C.id) AS contactName,C.joiningDate,C.firstJoiningDate')
            ->where('C.id = :contactId')
            ->setParameter('contactId', $contactId);
        $result = $qb->getQuery()->getSingleResult();

        return $result;
    }

    /**
     * validate transfer date.
     *
     * @param string $contacts
     * @param int    $clubId
     *
     * @return array
     */
    public function validateTransferDate($contacts, $clubId, $isnull = 0)
    {
        $isnull = $isnull ? 'IS NULL' : 'IS NOT NULL';
        $dateFormat = FgSettings::getMysqlDateFormat();
        $conn = $this->getEntityManager()->getConnection();
        $query = "SELECT date_format( joining_date,'$dateFormat' ) as joining_date1 FROM `fg_cm_membership_history` WHERE `contact_id` IN ($contacts) and `leaving_date` $isnull and `membership_club_id`={$clubId} ORDER BY leaving_date DESC LIMIT 1 ";

        $result = $conn->fetchAll($query);

        return $result[0];
    }

    /**
     * validate joining date.
     *
     * @param string $contacts
     * @param int    $clubId
     *
     * @return array
     */
    public function validateJoiningDate($contacts, $clubId, $isnull = 0)
    {
        $isnull = $isnull ? 'IS NULL' : 'IS NOT NULL';
        $dateFormat = FgSettings::getMysqlDateFormat();
        $conn = $this->getEntityManager()->getConnection();
        $query = "SELECT date_format( leaving_date,'$dateFormat' ) as leaving_date1 FROM `fg_cm_membership_history` WHERE `contact_id` IN ($contacts) and `leaving_date` $isnull and `membership_club_id`={$clubId} ORDER BY leaving_date DESC LIMIT 1 ";

        $result = $conn->fetchAll($query);

        return $result[0];
    }

    /**
     * Function to get contact's subfed Id.
     *
     * @param int $contactId contactId
     *
     * @return int
     */
    public function getSubFedContactId($contactId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT fed_contact_id,subfed_contact_id FROM fg_cm_contact WHERE fed_contact_id =' . $contactId . " AND subfed_contact_id !='' LIMIT 1";
        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * Function to get contact names for auto-complete fields - for fed admin eligibility.
     *
     * @param string $exclude       Exclude contact ids
     * @param int    $isComany      Whether to return company contacts or not
     * @param string $contType      Contact type
     * @param object $container     Container object
     * @param int    $clubId        Club id
     * @param string $clubType      Club type
     * @param string $passedColumns Passed columns
     * @param string $term          String to be searched
     *
     * @return array $contactsArray Result array of contacts.
     */
    public function getAutocompleteFedadminContacts($exclude, $isComany, $contType, $container, $clubId, $clubType, $passedColumns, $term, $stealth = 0, $roleId, $is_draft)
    {
        $firstname = '`' . $container->getParameter('system_field_firstname') . '`';
        $lastname = '`' . $container->getParameter('system_field_lastname') . '`';

        $sWhere = " C.is_permanent_delete=0 and (C.main_club_id = '{$clubId}' ) ";
        $joinsTab = " master_federation_{$clubId} AS mc LEFT JOIN ";
        $joinsOn = ' ON mc.fed_contact_id = C.fed_contact_id ';
        $joins = " LEFT JOIN fg_club fc On fc.id = C.club_id AND fc.club_type = 'federation' ";

        if ($stealth) {
            $sWhere .= ' AND C.is_stealth_mode = 0 ';
        }
        $sWhere .= ($exclude) ? " AND C.id NOT IN($exclude) " : '';
        $sWhere .= ($roleId) ? " AND C.id IN (SELECT rc.contact_id FROM fg_rm_role AS r INNER JOIN fg_rm_category_role_function AS rcrf ON r.id = rcrf.role_id  INNER JOIN fg_rm_role_contact AS rc ON rcrf.id=rc.fg_rm_crf_id WHERE r.id=$roleId)" : '';

        if ($isComany != 2) {
            $sWhere .= ($isComany == 1) ? ' AND C.is_company=1' : ' AND C.is_company=0';
        }

        if (isset($is_draft)) {
            $sWhere .= ' AND is_draft = ' . $is_draft;
        }

        $emailValidation = " AND S.3 IS NOT NULL AND S.3 !='' AND  S.3 NOT IN ( SELECT DISTINCT(ms.3) FROM fg_cm_contact fc INNER JOIN master_system ms On ms.fed_contact_id = fc.fed_contact_id WHERE fc.club_id IN (select fgc.id from fg_club fgc where fgc.federation_id = '{$clubId}' ) AND ms.3 IS NOT NULL)";
        //$emailValidation = '';
        $newfield = "IF (C.is_company=0 ,CONCAT(contactName(C.id),IF(DATE_FORMAT(`4`,'%Y') = '0000' OR `4` is NULL OR `4` ='','',CONCAT(' (',DATE_FORMAT(`4`,'%Y'),')'))),contactName(C.id)) as contactname";
        if ($passedColumns != '') {
            $newfield .= ", $passedColumns";
        }
        if ($term == '') {
            $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' $emailValidation ORDER BY contactname";
        } else {
            $search = explode(' ', trim($term), 2);
            if (sizeof($search) > 1) {
                $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id $joins where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' AND (S.$firstname LIKE '$search[0]%' OR S.$lastname LIKE '$search[0]%' OR S.`9` LIKE '$search[0]%') AND (S.$firstname LIKE '$search[1]%' OR S.$lastname LIKE '$search[1]%' OR S.`9` LIKE '$search[1]%') $emailValidation ORDER BY contactname";
            } else {
                $listquery = "SELECT C.id, $newfield FROM $joinsTab fg_cm_contact C $joinsOn LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id $joins where  $sWhere AND C.is_deleted=0 AND C.club_id = '{$clubId}' AND (S.$firstname LIKE :search OR S.$lastname LIKE :search OR S.`9` LIKE :search) $emailValidation ORDER BY contactname";
            }
        }

        $conn = $this->getEntityManager()->getConnection();
        $contactsArray = $conn->fetchAll($listquery, array(':search' => $term . '%'));

        return $contactsArray;
    }

    /**
     * Function to update last updated date.
     *
     * @param type $contactId
     */
    public function updateLastUpdated($contactId, $field)
    {
        $currentDate = date('Y-m-d H:i:s');
        $query = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmContact', 'C')
            ->set('C.lastUpdated', ':now')
            ->where('C.' . $field . ' IN (:contactId)')
            ->setParameters(array('now' => $currentDate, 'contactId' => $contactId))
            ->getQuery();

        return $query->execute();
    }

    /**
     * The function to update the first_joining_date then the joining date is edited.
     *
     * @param string $contactId Contact id
     */
    public function updateFirstJoiningDate($contactId)
    {
        if ($contactId != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_contact c
                    LEFT JOIN (
                            SELECT id,contact_id,joining_date FROM fg_cm_membership_history WHERE contact_id = :contactId ORDER BY joining_date ASC LIMIT 1
                            ) AS firstHistory ON firstHistory.contact_id = c.id
                    SET c.first_joining_date = firstHistory.joining_date WHERE c.id = :contactId';
            $conn->executeQuery($sql, array(':contactId' => $contactId));
        }

        return;
    }

    /**
     * The function to update the latest joining date as joining_date.
     *
     * The function to update the first_joining_date then the joining date is edited.
     *
     * @param string $contactId Contact id
     */
    public function updateCurrentJoiningDate($contactId)
    {
        if ($contactId != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_contact c
                    LEFT JOIN (
                            SELECT id,contact_id,joining_date FROM fg_cm_membership_history WHERE contact_id = :contactId ORDER BY joining_date DESC LIMIT 1
                            ) AS latestHistory ON latestHistory.contact_id = c.id
                    SET c.joining_date = latestHistory.joining_date WHERE c.id = :contactId';
            $conn->executeQuery($sql, array(':contactId' => $contactId));
        }

        return;
    }

    /**
     * The function to update the current leaving date as leaving_date.
     *
     * @param string $contactId Contact id
     */
    public function updateCurrentLeavingDate($contactId)
    {
        if ($contactId != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_contact c
                    LEFT JOIN (
                            SELECT id,contact_id,leaving_date FROM fg_cm_membership_history WHERE contact_id = :contactId ORDER BY joining_date DESC LIMIT 1
                            ) AS latestHistory ON latestHistory.contact_id = c.id
                    SET c.leaving_date = latestHistory.leaving_date WHERE c.id = :contactId';
            $conn->executeQuery($sql, array(':contactId' => $contactId));
        }

        return;
    }

    /**
     * Function is used to check whether the given date is a first joining date.
     *
     * @param int $contactId Contact id
     *
     * @return int $isFirstJoiningDate 0 or 1
     */
    public function checkWhetherIsFirstJoiningDate($contactId)
    {
        $qb = $this->createQueryBuilder('C')
            ->select('COUNT(C.id) AS isFirstJoiningDate')
            ->where('C.id = :contactId')
            ->andWhere('C.firstJoiningDate = C.joiningDate')
            ->andWhere('C.firstJoiningDate IS NOT NULL')
            ->setParameter('contactId', $contactId);
        $isFirstJoiningDate = $qb->getQuery()->getSingleScalarResult();

        return $isFirstJoiningDate;
    }

    /**
     * Function is used to collect all level id of selected contact.
     *
     * @param array $contactIds
     *
     * @return type
     */
    public function getAllContactIds($contactIds)
    {
        $qb = $this->createQueryBuilder('C')
            ->select('C.id, IDENTITY(C.fedContact), IDENTITY(C.subfedContact)')
            ->where('C.id IN (:contactId)')
            ->setParameter('contactId', $contactIds);
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    /**
     * first joining.
     *
     * @param type $contactIds
     * @param type $clubId
     *
     * @return type
     */
    public function getJoiningDate($contactIds, $clubId)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $conn = $this->getEntityManager()->getConnection();
        $query = "SELECT date_format( first_joining_date,'$dateFormat' ) as firstjoiningdate FROM fg_cm_contact WHERE `id` IN ($contactIds) ORDER BY  first_joining_date DESC LIMIT 1";

        $result = $conn->fetchAll($query);

        return $result[0];
    }

    /**
     * This function is used to get the shared clubs of a contact with some exceptions if any
     *
     * @param int   $fedContactId
     * @param array $excludeClubIds
     *
     * @return string $result Concated club ids
     */
    public function getClubsOfAContactBeforeMerging($fedContactId, $excludeClubIds = array())
    {
        $qb = $this->createQueryBuilder('C')
            ->select("GROUP_CONCAT(C.club SEPARATOR ',') as accessibleClubs")
            ->where('C.fedContact = :contactId AND C.isPermanentDelete = 0 AND C.isDraft = 0 AND C.isDeleted = 0')
            ->andWhere('(C.fedContact != C.id AND (C.subfedContact != C.id OR C.subfedContact IS NULL))');
        if (count($excludeClubIds) > 0) {
            $qb = $qb->andWhere($qb->expr()->notIn('C.club', $excludeClubIds));
        }
        $qb = $qb->groupBy('C.fedContact')
            ->setParameters(array('contactId' => $fedContactId))
            ->getQuery();
        $result = $qb->getSingleScalarResult();

        return $result;
    }

    /**
     * Function to get count of active club assignments.
     *
     * @param type $contactId Contact id
     *
     * @return $count count of active assignments
     */
    public function getActiveClubAssignments($contactId)
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $currentDate = date('Y-m-d H:i:s');
        $moduleQuery->select($moduleQuery->expr()->count('ca.id'))
            ->from('CommonUtilityBundle:FgCmContact', 'cc')
            ->leftJoin('CommonUtilityBundle:FgClubAssignment', 'ca', 'WITH', 'cc.fedContact = ca.fedContact')
            ->where('cc.id=:contactId')
            ->andWhere('ca.toDate IS NULL OR ca.toDate >:currentDate')
            ->setParameters(array('contactId' => $contactId, 'currentDate' => $currentDate));
        $count = $moduleQuery->getQuery()->getSingleScalarResult();

        return $count;
    }

    /**
     * Function to get club and contact details for API
     * 
     * @param int $clubId Club id
     */
    public function getApiClubContactDetails($clubId)
    {
        $federarationClubId = 2;
        $sql = "SELECT c.id as clubId, c.title as Name, ca.street as Strasse, ca.zipcode as PLZ, ca.city as Ort, cc.id as contactId, m.`2` as Vorname, m.`23` as Nachname, m.`4` as Geburtsdatum,m.`72` as Geschlecht, m.`3` as E-Mail,m.`47` as Strasse,m.`79` as PLZ, m.`77` as Ort, , mf.`72371` as Telefon, m.`86` as Natel, mf.`72382` as Magazin, cc.joining_date as Eintrittsdatum,f.title AS Funktion, r.is_executive_board  
                    FROM fg_club c
                    LEFT JOIN fg_club_address ca ON ca.id = c.correspondence_id 
                    LEFT JOIN fg_cm_contact cc ON cc.club_id = c.id 
                    LEFT JOIN master_system m ON m.fed_contact_id = cc.fed_contact_id 
                    INNER JOIN master_federation_" . $federarationClubId . " as mf ON mf.fed_contact_id = cc.fed_contact_id
                    LEFT JOIN fg_rm_role_contact crc ON crc.contact_id = cc.id 
                    LEFT JOIN fg_rm_category_role_function crf ON crf.id=crc.fg_rm_crf_id 
                    INNER JOIN fg_rm_role r ON r.id=crf.role_id AND r.is_executive_board=1  
                    LEFT JOIN fg_rm_function f ON f.id=crf.function_id AND f.is_active=1 
                    WHERE c.id = $clubId AND cc.fed_membership_cat_id != '' AND cc.fed_membership_cat_id IS NOT NULL ";

        $resultArray = $this->conn->fetchAll($sql);
        echo "<pre>";
        print_r($resultArray);
        exit;
    }

    /**
     * Method to get array of id, default_lang, default_system_lang, primary email of multiple contacts
     *
     * @param string $contactIds  contact-ids for which details to be taken
     *
     * @return array $resultArray array of id, default_lang, default_system_lang, primary email
     */
    public function getContactLanguageAndEmailDetails($contactIds)
    {
        return $this->createQueryBuilder('C')
                ->select('C.id, MS.correspondanceLang as default_lang, C.systemLanguage as default_system_lang, MS.primaryEmail ')
                ->innerJoin('CommonUtilityBundle:MasterSystem', 'MS', 'WITH', ' MS.fedContact = C.fedContact ')
                ->where("C.id IN ($contactIds) ")
                ->getQuery()
                ->getArrayResult();
    }

    /**
     * function to get the contact details.
     *
     * @param int    $contactId the contact id
     * @param object $conn      connection object
     * @param int    $setyob    Object
     *
     * @return array of contact name
     */
    public function getNameOfContact($contactId, $conn, $setyob = false)
    {
        if ($setyob) {
            $fieldsArray = $conn->fetchAll("SELECT contactNameYOB(C.id) AS name FROM fg_cm_contact C left join master_system S on C.id=S.fed_contact_id where C.id='$contactId'");
        } else {
            $fieldsArray = $conn->fetchAll("SELECT CONCAT(`23`,' ',`2`) AS name FROM fg_cm_contact C left join master_system S on C.id=S.fed_contact_id where C.id='$contactId'");
        }

        return $fieldsArray[0]['name'];
    }

    /**
     * Function to check if a federation contact given is subscribed for news letter in the specified club.
     *
     * @param int $fedContactId  The email that needs to be checked
     * @param int $clubId        The id of the club where the email need to be checked
     *
     * @return int
     */
    public function checkIfEmailIsSubscribedInClub($fedContactId, $clubId)
    {
        $qb = $this->createQueryBuilder('C')
            ->select('COUNT(C.id) AS numberOfSubscribed')
            ->where('C.fedContact = :contactId')
            ->andWhere('C.club = :clubId')
            ->andWhere('C.isSubscriber = 1')
            ->andWhere('C.isDeleted = 0')
            ->setParameter('contactId', $fedContactId)
            ->setParameter('clubId', $clubId);
        $subscribedContacts = $qb->getQuery()->getSingleScalarResult();

        return $subscribedContacts['numberOfSubscribed'];
    }

    /**
     * Function to check if a federation contact given is subscribed for news letter in the specified club.
     *
     * @param int $fedContactId  The fed contact if of the contact
     * @param int $clubId        The id of the club where the email need to be checked
     *
     * @return int
     */
    public function getClubContactId($fedContactId, $clubId)
    {
        $qb = $this->createQueryBuilder('C')
            ->select('C.id, C.isDeleted')
            ->where('C.fedContact = :fedContact')
            ->andWhere('C.club = :clubId')
            ->setParameter('fedContact', $fedContactId)
            ->setParameter('clubId', $clubId);
        $subscribedContacts = $qb->getQuery()->getOneOrNullResult();

        return $subscribedContacts;
    }

}
