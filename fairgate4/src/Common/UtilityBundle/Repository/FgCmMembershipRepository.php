<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;
use Common\UtilityBundle\Util\FgSettings;

/**
 * FgCmMembershipRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmMembershipRepository extends EntityRepository
{
       
    /**
     * Function to get memberships for a perticular Club, Fedration, Fedration Club , subfedration Club or subfedration.
     *
     * @param String  $clubType        Type of Club(Club, Fedration, Fedration Club , subfedration Club or subfedration)
     * @param Integer $clubId          club id
     * @param Integer $subFederationId subfederation Id
     * @param Integer $federationId    Federation Id
     * @param Integer $contactsId      Contact Id
     *
     * @return query result or as processed array based on the $exec parameter
     */
//public function getMembershipsSidebar($clubType = 'standard_club', $clubId = 0, $subFederationId = 0, $federationId = 0, $contactsId='',$countFlag=false)
//{
//
//    $clubidIn = array();
//
//    if ($clubType == 'sub_federation_club' || $clubType == 'sub_federation' || $clubType == 'federation_club') {
//        $clubidIn = "'$federationId','$clubId'";
//    } else {
//        $clubidIn = "'$clubId'";
//    }
//
//
//    $doctrineConfig = $this->getEntityManager()->getConfiguration();
//    $doctrineConfig->addCustomStringFunction('FIELD', 'Common\UtilityBundle\Extensions\Field');
//    $selectFields =($countFlag) ? 'm.id,IDENTITY(m.club) as clubId' : "m.id, IDENTITY(m.club) as clubId, FIELD(IDENTITY(m.club), $clubidIn) as orderfield, m.title,m.sortOrder,  IDENTITY(bm.contact) as bookmarked,bm.id as bookmarkId";
//
//    $qb = $this->createQueryBuilder('m')
//            ->select($selectFields)
//            ->addSelect("(SELECT  count(cnt.id) FROM CommonUtilityBundle:FgCmContact cnt  WHERE cnt.membershipCat=m.id  AND cnt.club = {$clubId})memCount")
//            ->addSelect("(SELECT  count(cnt.id) FROM CommonUtilityBundle:FgCmContact cnt  WHERE cnt.membershipCat=m.id  AND cnt.club IN({$federationId}))fedmemCount")
//            ->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', 'bm.membership = m.id AND bm.club=' . $clubId . ' AND bm.contact=' . $contactsId);
//    if ($clubType == 'sub_federation_club' || $clubType == 'sub_federation' || $clubType == 'federation_club') {
//        $qb->where(" m.club =$federationId OR   m.club= $clubId");
//    } else {
//        $qb->where("m.club= :clubId")
//                ->setParameter('clubId', $clubId);
//    }
//    if(!$countFlag) {
//      $qb->orderBy('orderfield, m.sortOrder');
//    }
//
//    $dataResult = $qb->getQuery()->getArrayResult();
//
//    return $dataResult;
//}

    /**
     * For collecting the table column title.
     *
     * @param type $columns Columns
     * @param type $lang    Language
     *
     * @return type
     */
    public function getTableTitle($columns, $lang = 'de')
    {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT  fa.id,  IF(fieldname_lang='' OR fieldname_lang IS NULL, fieldname, fieldname_lang) AS title
          FROM fg_cm_attribute AS fa
          LEFT JOIN fg_cm_attribute_i18n AS fai18 on fa.id=fai18.id and lang=:lang
          WHERE fa.id in ($columns)  ORDER BY  FIELD(fa.id,$columns)";
        $result = $conn->fetchAll($sql, array('lang' => $lang));

        return $result;
    }
    /**
     * For getting the result using the query parameter.
     *
     * @param type $query
     *
     * @return type
     */
    public function getContactList($query)
    {
        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->executeQuery($query)->fetchAll();

        return $result;
    }

    /**
     * Function to get total count of query.
     *
     * @param type $query
     *
     * @return type
     */
    public function getTotalCount($query)
    {
        $conn = $this->getEntityManager()->getConnection();
        $result = $conn->executeQuery($query)->fetchAll();

        return  $result->rowCount();
    }

    /**
     * For to check whether a category is a federation member or not.
     *
     * @param type $membershipId
     *
     * @return type
     *              Need to be addressed in the coming sprints of FED_V
     */
    public function checkFederationCat($membershipId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT  is_fed_category  FROM fg_cm_membership WHERE  id=:membershipId';
        $result = $conn->fetchAll($sql, array('membershipId' => $membershipId));

        return $result[0];
    }

    /**
     * Function to do list the log details of membership.
     *
     * @param int   $clubId           Club Iid
     * @param int   $membershipId     Membership Id
     * @param array $hierarchyClubIds Heirarchy club ids
     *
     * @return array $result Array of role logs.
     */
    public function getMembershipLog($clubId, $membershipId, $hierarchyClubIds)
    {
        $conn = $this->getEntityManager()->getConnection();
        $dateFormat = FgSettings::getMysqlDateTimeFormat();
        $clubIds = FgUtility::getSecuredData(implode(',', $hierarchyClubIds), $conn);
        if (!empty($hierarchyClubIds)) {
            $clubIds = "$clubIds,$clubId";
        } else {
            $clubIds = $clubId;
        }

        $sql = "SELECT m.id, m.club_id, m.membership_id, date_format( m.date,'".$dateFormat."') AS date, m.date AS dateOriginal, contactName(m.changed_by) as editedBy, m.kind, m.field, m.value_before, m.value_after,  "
                ." IF((m.kind = 'data'), 'data', 'assignments') AS tabGroups,
                    (CASE WHEN ((m.value_before IS NOT NULL AND m.value_before != '' AND m.value_before != '-') AND (m.value_after IS NULL OR m.value_after = '' OR m.value_after = '-')) THEN 'removed'
                           WHEN ((m.value_before IS NULL OR m.value_before = '' OR m.value_before = '-') AND (m.value_after IS NOT NULL AND m.value_after != '' AND m.value_after != '-')) THEN 'added'
                           WHEN ((m.value_before IS NOT NULL AND m.value_before != '' AND m.value_before != '-') AND (m.value_after IS NOT NULL AND m.value_after != '' AND m.value_after != '-') AND (m.value_before != m.value_after)) THEN 'changed'
                           ELSE 'none'
                    END) AS status,
                    (IF((m.value_after='' OR m.value_after IS NULL OR m.value_after='-'),m.value_before,m.value_after)) AS columnVal3"
                .' FROM fg_cm_membership_log m '
                .'where m.club_id IN ('.$clubIds.") AND kind IN ('data', 'assigned contacts') AND membership_id =".$membershipId
                .' ORDER BY DATE(m.date) DESC';
  // echo $sql;
        $result = $conn->executeQuery($sql)->fetchAll();
        $conn->close();

        return $result;
    }

    /**
     * function to check whether the membership belongs to the particular club.
     *
     * @param int $clubId       the club id
     * @param int $membershipId the membership category id
     *
     * @return bool
     */
    public function checkClubMembership($clubId, $membershipId)
    {
        $memCatArrays = array();
        $results = $this->createQueryBuilder('cm')
                ->select('cm.id as memCatId')
                ->where('cm.club=:clubId')
                ->setParameter('clubId', $clubId);

        $dataResult = $results->getQuery()->getResult();
        foreach ($dataResult as $key => $val) {
            $memCatArrays[] = $val['memCatId'];
        }
        if (in_array($membershipId, $memCatArrays)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Function to get the count of club level membership category.
     *
     * @param int $clubId logged in club id
     *
     * @return int
     */
    public function getClubMembershipCount($clubId)
    {
        $results = $this->createQueryBuilder('cm')
                ->select('COUNT(cm.id) as memCatCnt')
                ->where('cm.club=:clubId')
                ->setParameter('clubId', $clubId);

        $dataResult = $results->getQuery()->getResult();

        return $dataResult[0]['memCatCnt'];
    }

    /**
     * Function to get the details of a membership.
     *
     * @param int $membershipId
     *
     * @return array
     */
    public function getMembershipById($membershipId)
    {
        $results = $this->createQueryBuilder('m')
                        ->select('m.id,IDENTITY(m.club) AS clubId,m.title AS title')
                        ->where('m.id=:membershipId')
                        ->setParameter('membershipId', $membershipId);

        $membershipDetails = $results->getQuery()->getOneOrNullResult();

        return $membershipDetails;
    }

    /**
     * Function to get the memberships available to the current club.
     *
     *  For Federations : Only Federation memberships
     *  For Sub-Federations : Only Federation memberships
     *  For Clubs : (Federation membership+Club memberships, when C1 is on), (Federation membership, when C1 is off)
     *
     *  @param object $container Container object
     * 
     * @return array
     */
    public function getMembershipsOfClub($container)
    {
        $membershipArray = array();
        $club = $container->get('club');
        $clubType = $club->get('type');
        $federationId = $club->get('federation_id');
        $subFederationId = $club->get('sub_federation_id');
        $clubId = $club->get('id');
        $clubMembershipAvailable = $club->get('clubMembershipAvailable');
        $clubLanguage = $club->get('default_system_lang');

        switch ($clubType) {
            case 'federation':
                $clubArray = array($federationId);
                break;
            case 'sub_federation':
                $clubArray = array($federationId, $subFederationId);
                break;
            case 'sub_federation_club':
                $clubArray = ($clubMembershipAvailable) ? array($federationId,$clubId) : array($federationId);
                break;
            case 'federation_club':
                $clubArray = ($clubMembershipAvailable) ? array($federationId,$clubId) : array($federationId);
                break;
            case 'standard_club':
                $clubArray = array($clubId);
                break;
        }

        $results = $this->createQueryBuilder('m')
                        ->select('m.id, COALESCE(mi18n.titleLang,m.title) AS titleLang, IDENTITY(m.club) AS clubId')
                        ->leftJoin('CommonUtilityBundle:FgCmMembershipI18n', 'mi18n', 'WITH', "mi18n.id = m.id AND mi18n.lang = '".$clubLanguage."'")
                        ->where('m.club IN (:clubs)')
                        ->orderBy('m.sortOrder')
                        ->setParameter('clubs', $clubArray);

        $dataResult = $results->getQuery()->getResult();
        
        foreach($dataResult as $data){
          $membershipArray[$data['id']] =  $data; 
        }
        return $membershipArray;
    }
    
}
