<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgNotificationSpool;

/**
 * FgNotificationSpoolRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgNotificationSpoolRepository extends EntityRepository {
    /**
     * Function to add notification spool entries for message
     * @param type $email
     * @param type $templateContent
     */
    public function addNotificationEntries($email,$templateContent,$subject,$from, $notificationType = 'MESSAGE'){
        $message = \Swift_Message::newInstance()
                            ->setSubject($subject)
                            ->setFrom($from)
                            ->setTo($email)
                            ->setBody($templateContent,'text/html')
                            ->setPriority(3)
                            ->setCharset('utf-8');
        $spoolObj = new FgNotificationSpool();
        $spoolObj->setEmail($email);
        $spoolObj->setNotificationType($notificationType);
        $spoolObj->setTemplateContent(serialize($message));
        $this->_em->persist($spoolObj);
        $this->_em->flush();
    }
    /**
     * Function to get content from notification spool for cron sending
     * 
     * @return array
     */
    public function getSpoolEntries(){
        $qb = $this->findBy(array(),array(),200);
         
        return $qb;
    }
    /**
     * Function to delete spool entries after sending
     * 
     * @param type $spoolId
     * @return type
     */
    public function deleteFromSpool($spoolId){
        $qb = $this->createQueryBuilder('m')
                    ->delete()
                    ->where('m.id=:spoolId')
                    ->setParameter('spoolId', $spoolId);
       $result = $qb->getQuery()->execute();
       
       return $result;
    }
}

