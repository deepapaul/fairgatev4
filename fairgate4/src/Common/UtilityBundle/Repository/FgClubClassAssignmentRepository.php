<?php

/**
 * FgClubClassAssignmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package    CommonUtilityBundle
 * @subpackage Repository
 * @author     neethu.mg
 * @version    V4
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;

/**
 * Club class Assignment
 */
class FgClubClassAssignmentRepository extends EntityRepository {
    /* Function to get assignments of clubs for a given classification.
     *
     * @param string $clubIds        Club ids string
     * @param int    $clfnId         Classification id
     * @param int    $excludeClassId Class id to exclude from result
     *
     * @return array $assignments Result array of assignments.
     */

    public function getClubAssignmentsOfClfn($clubIds, $clfnId, $excludeClassId = '') {

        $clubIdStr = is_array($clubIds) ? implode(',', $clubIds) : $clubIds;
        $conn = $this->_em->getConnection();
        $clubIdStr = FgUtility::getSecuredData($clubIdStr, $conn);
        $clfnId = intval($clfnId);
        $excludeClassId = intval($excludeClassId);
        $qb = $this->createQueryBuilder('a')
                ->select('IDENTITY(a.club) as clubId,IDENTITY(a.class) as classId,IDENTITY(cc.classification) as classificationId')
                ->leftJoin('CommonUtilityBundle:FgClubClass', 'cc', 'WITH', '( a.class=cc.id)')
                ->leftJoin('CommonUtilityBundle:FgClubClassification', 'ccl', 'WITH', '( cc.classification=ccl.id)')
                ->Where('a.club in (' . $clubIdStr . ') AND cc.classification=' . $clfnId . ' AND a.class NOT IN (' . $excludeClassId . ') ');
        $clubAssignments = $qb->getQuery()->getResult();
        $assignments = array();
        foreach ($clubAssignments as $clubAssignment) {
            $assignments[$clubAssignment['clubId']]['classid'] = $clubAssignment['classId'];
        }


        return $assignments;
    }

    /**
     * Function to add or delete club assignments
     *
     * @param array  $assignmentArr    Assignments array
     * @param int    $federationclubId Federation Id of logged in club
     * @param object $clubService      Club service
     * @param int    $contactId        contact id
     * @param int    $clubId           Logged clubid
     *
     * @return array $resultArray       Array containing errors if any
     */
    public function updateClubAssignments($assignmentArr, $federationclubId, $clubService, $contactId, $clubId, $clubObj) {
        $insertCount = 0;
        $deleteCount = 0;
        $errorArray = array();
        $conn = $this->getEntityManager()->getConnection();
        $log = array();
        $validClassificationid = $this->_em->getRepository('CommonUtilityBundle:FgClubClassification')->getClubClassificationIds($federationclubId, $exec = true);
        $validClassification = explode(',', $validClassificationid[0]['ids']);

        foreach ($assignmentArr as $overviewclubId => $classificationArray) {
            $clubname = $this->_em->getRepository('CommonUtilityBundle:FgClub')->getClubname($overviewclubId, $clubService->get('default_lang'));
            $clubName = FgUtility::getSecuredDataString($clubname[0]['title'], $conn);
            $errorType = '';
            $hasError = false;
            $existingassignments = $this->getClassDetailsOfClub($overviewclubId);

            foreach ($classificationArray as $classificationId => $classificationArrDetail) {

                $errorType = '';
                if (!in_array($classificationId, $validClassification)) {
                    unset($classificationArray[$classificationId]);
                    $errorType = 'NOT_VALID_CLASSIFICATION';
                    continue;
                } else {

                    $clfnObj = $this->_em->getRepository('CommonUtilityBundle:FgClubClassification')->find($classificationId);
                    $clfnTitle = FgUtility::getSecuredDataString($clfnObj->getTitle(), $conn);
                    $sublevelAssign = $clfnObj->getSublevelAssign();
                    $classAssign = $clfnObj->getClassAssign();

                    $dataResult = $clubObj->getAllClassificationId($classificationId);


                    $validClass = explode(',', $dataResult[0]['ids']);

                    foreach ($classificationArrDetail['class'] as $classId => $classValue) {
                        $errorType = '';
                        if (!in_array($classId, $validClass)) {
                            unset($classificationArrDetail['class'][$classId]);
                            $errorType = 'NOT_VALID_CLASS';
                            continue;
                        } else {
                            $errorType = '';
                            foreach ($existingassignments as $value) {
                                if ($value['classification_id'] == $classificationId && $value['class_assign'] == 'single' && $classValue['is_new'] == $classId) {
                                    $hasError = true;
                                    $errorType = 'NO_MULTIPLE_ASSIGNMENT_POSSIBLE';
                                    $errorArray[$classificationId] = $classificationId;
                                    break;
                                }
                                if ($classValue['is_new'] == $classId && $classificationId == $value['classification_id'] && $classId == $value['class_id']) {
                                    $errorType = 'DUPLICATE_ASSIGNMENT';
                                    break;
                                }
                            }
                            if ($errorType == '') {

                                $classObj = $this->_em->getRepository('CommonUtilityBundle:FgClubClass')->find($classId);
                                $classTitle = FgUtility::getSecuredDataString($classObj->getTitle(), $conn);
                                $nowdate = strtotime(date('Y-m-d H:i:s'));
                                $dateToday = date('Y-m-d H:i:s', $nowdate);
                                if ($classValue['is_deleted'] == 1 && $classValue['is_new'] == $classId) {
                                    continue;
                                } else if ($classValue['is_deleted'] == 1) {

                                    //delete assignment
                                    foreach ($existingassignments as $key => $value) {
                                        if ((($clubService->get('type') == 'sub_federation' && $value['sublevel_assign'] == 'assign') || $clubService->get('type') == 'federation') && $classId == $value['class_id'] && $classificationId == $value['classification_id']) {

                                            $delete[$deleteCount] = "('$federationclubId', '$overviewclubId', '$classId')";
                                            $deleteCount = $deleteCount + 1;
                                            unset($existingassignments[$key]);
                                            $count = end(array_keys($log));

                                            //Log array
                                            $log[$count + 1] = ("('$clubId','$classId','$dateToday', 'assigned club', '-', '$clubName', '-', '$contactId')");
                                            $clublog[$count + 1] = "('$overviewclubId','$dateToday','assigned club','$clfnTitle','$classTitle','-','$contactId','$classId')";
                                            break;
                                        }
                                    }
                                } elseif ($classValue['is_new'] && (!array_key_exists($classificationId, $errorArray[$classificationId]) )) {
                                    //Insert new assignment
                                    $insert[$insertCount] = "('$federationclubId', '$overviewclubId', '$classId')";
                                    $insertCount = $insertCount + 1;
                                    //Log array
                                    $count = end(array_keys($log));
                                    $log[$count + 1] = "('$clubId','$classId','$dateToday', 'assigned club', '-', '-', '$clubName', '$contactId')";
                                    $clublog[$count + 1] = "('$overviewclubId','$dateToday','assigned club','$clfnTitle','-','$classTitle','$contactId','$classId')";

                                    array_push($existingassignments, array('class_id' => $classId, 'classification_id' => $classificationId, 'sublevel_assign' => $sublevelAssign, 'class_assign' => $classAssign));
                                }
                            }
                        }
                    }
                }
            }
        }

        $clubObj->executeAssignments($delete, $insert);
        $clubObj->logEntry($log, $clublog);

        $resultArray = array('errorType' => $errorType, 'errorArray' => $errorArray, 'insertCount' => $insertCount, 'deleteCount' => $deleteCount);

        return $resultArray;
    }

    /**
     * Function to get class details of club id
     *
     * @param int    $overviewclubId   Club id
     *
     * @return array details
     */
    public function getClassDetailsOfClub($overviewclubId) {
        $queryBuilder = $this->createQueryBuilder('a')
                ->select("IDENTITY(a.class) as class_id,ccl.id as classification_id,ccl.sublevelAssign,ccl.classAssign")
                ->leftJoin('CommonUtilityBundle:FgClubClass', 'cc', 'WITH', '( a.class=cc.id)')
                ->leftJoin('CommonUtilityBundle:FgClubClassification', 'ccl', 'WITH', '( cc.classification=ccl.id)')
                ->Where('a.club=' . $overviewclubId);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Function to get count of all assigned assignments of a club
     *
     * @param array  $clubType club type
     * @param object $conn     Connection
     * @param int    $clubid   Club id
     *
     * @return count
     */
    public function assignmentCount($clubType, $conn, $clubid) {
        switch ($clubType) {
            case 'federation':
                $clubType = "'federation' AS clubType";
                $addWhere = "";
                break;

            case 'sub_federation':
                $clubType = "'sub_federation' AS clubType";
                $addWhere = " AND ccl.sublevelAssign !='not visible' ";
                break;
        }

        $qb = $this->createQueryBuilder('a')
                ->select('IDENTITY(a.club) as clubId')
                ->leftJoin('CommonUtilityBundle:FgClubClass', 'cc', 'WITH', '( a.class=cc.id)')
                ->leftJoin('CommonUtilityBundle:FgClubClassification', 'ccl', 'WITH', '( cc.classification=ccl.id)')
                ->where('a.club = ' . $clubid . ' ' . $addWhere);

        $result = $qb->getQuery()->getResult();

        return count($result);
    }

}
