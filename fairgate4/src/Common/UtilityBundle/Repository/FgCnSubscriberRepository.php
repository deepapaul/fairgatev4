<?php

/**
 * FgClubRepository
 */
namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCnSubscriber;
use Common\UtilityBundle\Entity\FgCnSubscriberLog;
use Common\UtilityBundle\Util\FgSettings;

/**
 * FgClubRepository
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgCnSubscriberRepository extends EntityRepository
{

    /**
     * Function to get subscriber details of a club.
     *
     * @param int clubId Club Id.
     *
     * @return array $result Result Array.
     */
    public function getSubscribersList($container, $clubId, $start = 0, $length = 10, $orderBy = 'email', $orderAs = 'asc', $search = '', $logPath = '', $trans = '', $for = '', $selectedId = '', $clubLanguages = array())
    {
        $club = $container->get('club');
        $defaultSystemLang = $club->get('default_system_lang');
        $dateFormat = FgSettings::getMysqlDateFormat();
        $conn = $this->getEntityManager()->getConnection();
        if ($for == "exportselected") {
            $subquery = " AND c.id IN ($selectedId) ";
        } else {
            $subquery = " ";
        }
        if ($for != "exportall") {
            $limit = " limit $start,$length ";
        } else {
            $limit = '';
        }
        $searchQuery = " AND (c.email like :search OR c.last_name like :search OR c.first_name like :search OR c.company like :search OR c.correspondance_lang IN(SELECT short_name FROM fg_search_lang WHERE title LIKE :search AND fg_search_lang.lang='$defaultSystemLang' ))";
        $subscriberQuery = "SELECT c.id,c.email,c.last_name,c.first_name,c.gender,c.salutation,c.company,c.	correspondance_lang,DATE_FORMAT(c.created_at,'$dateFormat') as created_at,"
            . "DATE_FORMAT(c.edited_at,'$dateFormat') as edited_at, checkActiveContact(c.edited_by, $clubId) as activeContact, "
            . "IF((checkActiveContact(c.edited_by, $clubId) is null && c.edited_by != 1), CONCAT(contactName(c.edited_by),' ( ',(select fc.title from fg_cm_contact ct left join fg_club fc on ct.main_club_id=fc.id where ct.id=c.edited_by),' )') ,contactName(c.edited_by) )as edited_by, "
            . "(select count(newsletter_id) FROM fg_cn_newsletter_receiver_log WHERE subscriber_id=c.id) as newsletterCount "
            . "FROM fg_cn_subscriber c "
            . "WHERE c.club_id=:clubId $searchQuery  $subquery"
            . "order by (CASE WHEN " . $orderBy . " IS NULL then 3 WHEN " . $orderBy . "='' then 2 WHEN " . $orderBy . "='0000-00-00 00:00:00' then 1 ELSE 0 END),$orderBy $orderAs $limit ";

        $result = $conn->fetchAll($subscriberQuery, array('clubId' => $clubId, 'search' => '%' . $search . "%"));
        foreach ($result as $key => $subscriber) {

            $path = str_replace("subscriber", $subscriber['id'], str_replace("offset", ($key + $start), $logPath));
            $email = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['email']));
            $lastName = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['last_name']));
            $firstName = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['first_name']));
            $company = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['company']));
            if ($for !== "exportall" && $for != "exportselected") {
                $gendeR = $subscriber['gender'];
                $salutaton = $subscriber['salutation'];
            }
            $salutation = $gender = '';
            if (strtolower($subscriber['gender']) == 'male') {
                $gender = $trans->trans('CM_MALE');
            } elseif (strtolower($subscriber['gender']) == 'female') {
                $gender = $trans->trans('CM_FEMALE');
            }
            if (strtolower($subscriber['salutation']) == 'formal') {
                $salutation = $trans->trans('CM_FORMAL');
            } elseif (strtolower($subscriber['salutation']) == 'informal') {
                $salutation = $trans->trans('CM_INFORMAL');
            }
            $subscriberCorresLang = '';
            if ($subscriber['correspondance_lang']) {
                $subscriberCorresLang = $clubLanguages[$subscriber['correspondance_lang']];
            }

            $subscriberArray[] = array($subscriber['id'], $email, $lastName, $firstName, $gender, $salutation, $company, $subscriber['created_at'], $subscriber['edited_at'], $subscriber['edited_by'], $subscriber['newsletterCount'], $path, $gendeR, $salutaton, $subscriber['activeContact'], $subscriberCorresLang, $subscriber['correspondance_lang']);
        }

        return (count($subscriberArray) > 0) ? $subscriberArray : array();
    }

    /**
     * Function to get subscriber contact count
     * @param type $clubId
     * @param type $search
     * @return type
     */
    public function getSubscribersCount($clubId, $search = '')
    {
        $resultQuery = $this->createQueryBuilder('c')
            ->select('count(c.email)')
            ->where('c.club=:clubId')
            ->andWhere('c.email like :search OR c.lastName like :search OR c.firstName like :search OR c.company like :search')
            ->setParameter('clubId', $clubId)
            ->setParameter('search', '%' . $search . "%");
        $result = $resultQuery->getQuery()->getSingleScalarResult();
        return ($result) ? $result : false;
    }

    /**
     * Function to get subscriber contact count
     * @param type $clubId
     * @param type $search
     * @return type
     */
    public function searchEmailExists($conn = '', $clubId, $email)
    {
        $resultQuery = $this->createQueryBuilder('s')
            ->select('count(s.email) as emailCount,s.id')
            ->where('s.club=:clubId')
            ->andWhere('lower(s.email) like lower(:email)')
            ->setParameter('clubId', $clubId)
            ->setParameter('email', $email);
        $result = $resultQuery->getQuery()->getResult();
        return ($result) ? $result : false;
    }

    /**
     * Function to delete subscriber
     *
     * @param object $Subscriber
     *
     * @return boolean
     */
    public function deleteSubscriber($subscriber)
    {
        $this->_em->remove($subscriber);
        $this->_em->flush();
    }

    /**
     * Function to create subscriber
     *
     * @param type $email        email
     * @param type $firstName    firstName
     * @param type $lastName     lastName
     * @param type $comany       company
     * @param type $gender       gender
     * @param type $salutation   salutation
     */
    public function newSubscriber($attributes, $clubobj, $import = '', $importTable = '', $contactId)
    {

        $email = $attributes['Email'];
        $firstName = isset($attributes['FirstName']) ? $attributes['FirstName'] : "";
        $lastName = isset($attributes['LastName']) ? $attributes['LastName'] : "";
        $company = isset($attributes['Company']) ? $attributes['Company'] : "";
        $gender = isset($attributes['Gender']) ? $attributes['Gender'] : "";
        $salutation = isset($attributes['Salutation']) ? $attributes['Salutation'] : "";
        $correspondanceLanguage = isset($attributes['CorresLang']) ? $attributes['CorresLang'] : "";
        $newSubscriber = new FgCnSubscriber();
        $newSubscriber->setEmail($email);
        $newSubscriber->setClub($clubobj);
        $newSubscriber->setFirstName($firstName);
        $newSubscriber->setLastName($lastName);
        $newSubscriber->setGender($gender);
        $newSubscriber->setSalutation($salutation);
        $newSubscriber->setCompany($company);
        $newSubscriber->setImportId($import);
        $newSubscriber->setImportTable($importTable);
        $newSubscriber->setCreatedBy($contactId);
        $newSubscriber->setCreatedAt(new \DateTime("now"));
        $newSubscriber->setCorrespondanceLang($correspondanceLanguage);
        $this->_em->persist($newSubscriber);
        $this->_em->flush();
        $this->subscriberLog($attributes, $contactId, $clubobj);
    }

    public function subscriberLog($attributes, $contactId, $clubobj)
    {
        $conn = $this->getEntityManager()->getConnection();
        $lastInserted = $conn->executeQuery("SELECT LAST_INSERT_ID() AS subscriberId")->fetch();
        $subscriberId = $lastInserted['subscriberId'];
        $keyArray = array();
        $subscriber = $this->_em->getRepository('CommonUtilityBundle:FgCnSubscriber')->find($subscriberId);

        foreach ($attributes as $key => $value) {
            if ($key !== '_token') {
                if ($value != '' || $value != null) {
                    switch ($key) {
                        case 'Email': $key1 = 'email';
                            break;
                        case 'FirstName': $key1 = 'first_name';
                            break;
                        case 'LastName' : $key1 = 'last_name';
                            break;
                        case 'Salutation': $key1 = 'salutation';
                            break;
                        case 'Gender': $key1 = 'gender';
                            break;
                        case 'Company': $key1 = 'company';
                            break;
                        case 'CorresLang': $key1 = 'correspondance_lang';
                            break;
                    }
                    if (!(in_array($key1, $keyArray))) {
                        $subscriberLogObj = new FgCnSubscriberLog();
                        $subscriberLogObj->setField($key1);
                        $subscriberLogObj->setValueBefore(null);
                        $subscriberLogObj->setValueAfter($value);
                        $subscriberLogObj->setKind('data');
                        $subscriberLogObj->setDate(new \DateTime("now"));
                        $subscriberLogObj->setChangedBy($contactId);
                        $subscriberLogObj->setClub($clubobj);
                        $subscriberLogObj->setSubscriber($subscriber);
                        $this->_em->persist($subscriberLogObj);
                        if (!(in_array($key1, $keyArray))) {
                            array_push($keyArray, $key1);
                        }
                    }
                }
            }
        }
        $this->_em->flush();
        return true;
    }

    /**
     * Function to update subscriber
     *
     * @param type $oldSubscriber oldSubscriber obj
     */
    public function updateSubscriber($oldSubscriber, $attributes, $oldFormValues, $fgContact, $clubobj)
    {
        //print_r($attributes);die;

        foreach ($attributes as $key => $value) {

            switch ($key) {
                case 'Email': $oldSubscriber->setEmail($value);
                    $key1 = 'email';
                    break;
                case 'FirstName': $oldSubscriber->setFirstName($value);
                    $key1 = 'first_name';
                    break;
                case 'LastName' : $oldSubscriber->setLastName($value);
                    $key1 = 'last_name';
                    break;
                case 'Salutation': $oldSubscriber->setSalutation($value);
                    $key1 = 'salutation';
                    break;
                case 'Gender': $oldSubscriber->setGender($value);
                    $key1 = 'gender';
                    break;
                case 'Company': $oldSubscriber->setCompany($value);
                    $key1 = 'company';
                    break;
                case 'CorresLang': $oldSubscriber->setCorrespondanceLang($value);
                    $key1 = 'correspondance_lang';
                    break;
            }

            if ($key !== '_token') {
                if ($value != $oldFormValues[$key]) {
                    $subscriberLogObj = new FgCnSubscriberLog();
                    $subscriberLogObj->setField($key1);
                    $subscriberLogObj->setValueBefore($oldFormValues[$key]);
                    $subscriberLogObj->setValueAfter($value);
                    $subscriberLogObj->setKind('data');
                    $subscriberLogObj->setDate(new \DateTime("now"));
                    $subscriberLogObj->setChangedBy($fgContact);
                    $subscriberLogObj->setClub($clubobj);
                    $subscriberLogObj->setSubscriber($oldSubscriber);
                    $this->_em->persist($subscriberLogObj);
                }
            }
        }

        $oldSubscriber->setEditedBy($fgContact);
        $oldSubscriber->setEditedAt(new \DateTime("now"));
        $this->_em->persist($oldSubscriber);
        $this->_em->flush();
    }

    /**
     *
     * Function to get subscriber details
     *
     * @param int $subscriberId
     * @param int $clubId
     * @return type
     */
    public function getSubscriberDetails($subscriberId, $clubId)
    {

        $qs = $this->createQueryBuilder('s')
            ->select('s.email as Email,s.firstName as FirstName,s.lastName as LastName,s.company as Company ,s.gender as Gender,s.salutation as Salutation, s.correspondanceLang as CorresLang')
            ->Where('s.id=:subscriberId')
            ->andWhere('s.club =:clubId')
            ->setParameters(array('subscriberId' => $subscriberId, 'clubId' => $clubId));
        $result = $qs->getQuery()->getResult();

        return $result[0];
    }

    /**
     *
     * Function to delete subscribers
     *
     * @param int $conn
     * @param int $deleteId
     * @return type
     */
    public function deleteReactivateSubscriber($conn, $deleteId)
    {
        if (!empty($deleteId)) {
            $deleteQty = "DELETE FROM fg_cn_subscriber where id IN($deleteId)";
            $conn->executeQuery($deleteQty);
        }

        return true;
    }

    /**
     *
     * Function to delete subscribers
     *
     * @param int $conn
     * @param int $deleteId
     * @param int $clubId
     * @return type
     */
    public function deleteSubscribers($selectedId, $clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $subscriberId = implode(',', $selectedId);
        $deleteQuery = "DELETE FROM fg_cn_subscriber WHERE id IN ($subscriberId) AND club_id=:clubId ";
        $result = $conn->executeQuery($deleteQuery, array('clubId' => $clubId));

        return true;
    }

    /**
     * Function to check if access permitted
     *
     * @param type $subscriberid
     * @param type $clubId
     * @return type
     */
    public function getAccess($subscriberid, $clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT count(s.id) as count FROM fg_cn_subscriber s WHERE s.id= $subscriberid AND s.club_id=$clubId";
        $result = $conn->fetchAll($sql);

        return $result[0];
    }

    /**
     * Function to get subscriber details of a club.
     * 
     * @param int    $newsletterId    Newsletter id
     * @param int    $clubId          Club id 
     * @param string $clubSystemLang  Club system lang
     * @param string $clubDefaultLang Club default lang 
     * 
     * @return array Subscriber details 
     */
    public function getAdditionalSubscribersList($newsletterId, $clubId, $clubSystemLang, $clubDefaultLang)
    {
        $languagesArr = $this->_em->getRepository('CommonUtilityBundle:FgCnNewsletterPublishLang')->getNewsletterLanguageData($newsletterId);
        $languages = "'" . implode("','", $languagesArr) . "'";
        $conn = $this->getEntityManager()->getConnection();
        $orderBy = 'email';
        $orderAs = 'asc';

        $subscriberQuery = "SELECT id, email, CONCAT(last_name,' ',first_name) as contactname, company, subscriberSalutationText(id," . $clubId . ",'" . $clubSystemLang . "','" . $clubDefaultLang . "') as salutation, "
            . "correspondance_lang as corresLang FROM fg_cn_subscriber "
            . "WHERE club_id=:clubId AND correspondance_lang IN ($languages) "
            . "ORDER BY (CASE WHEN " . $orderBy . " IS NULL then 3 WHEN " . $orderBy . "='' then 2 WHEN " . $orderBy . "='0000-00-00 00:00:00' THEN 1 ELSE 0 END),$orderBy $orderAs";

        $result = $conn->fetchAll($subscriberQuery, array('clubId' => $clubId));
        foreach ($result as $key => $subscriber) {
            $email = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['email']));
            $contactname = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['contactname']));
            $salutation = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['salutation']));
            $company = str_replace("<", "&lt;", str_replace(">", "&gt;", $subscriber['company']));
            $corresLang = $subscriber['corresLang'];
            $subscriberArray[] = array($subscriber['id'], $email, $contactname, $salutation, $company, $corresLang);
        }

        return (count($subscriberArray) > 0) ? $subscriberArray : array();
    }

    /**
     * Function to get subscriber Name
     * @param int $subscriberId subscriberId
     * @return subscriberName
     */
    public function getSubscriberName($subscriberId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $storedprocedure = $conn->prepare("SELECT email,subscriberName($subscriberId, 1) as subscriberName FROM fg_cn_subscriber WHERE id = $subscriberId");
        $storedprocedure->execute();
        $results = $storedprocedure->fetchAll();
        $name = $results[0]['subscriberName'];
        $email = $results[0]['email'];
        return array('name' => $name, 'email' => $email);
    }

    /**
     * This function is used to delete subscribers with specific email
     *
     * @param int    $clubId Club id
     * @param string $email  Email address
     */
    public function deleteSubscriberWithEmail($clubId, $email)
    {
        $qb = $this->createQueryBuilder();
        $q = $qb->delete('CommonUtilityBundle:FgCnSubscriber', 'S')
            ->where($qb->expr()->eq('S.club', ':clubId'))
            ->andWhere($qb->expr()->eq('S.email', ':email'))
            ->setParameters(array('clubId' => $clubId, 'email' => $email))
            ->getQuery();
        $q->execute();
    }
    
    /**
     * This function is used to get the count of subscribers group by language
     * 
     * @param int  $clubId
     * 
     * @return array Subscriber count
     */
    public function getCountOfSubscribers($clubId, $clubLangs, $clubType)
    {
        if ($clubType == 'federation') {
            $qWhere = 's.club IN (:clubIds)';
            $clubIds = $this->getEntityManager()->getRepository('CommonUtilityBundle:FgClub')->getClubsWithinAFederation($clubId);
        } else {
            $qWhere = 's.club = :clubIds';
            $clubIds = $clubId;
        }
        $qs = $this->createQueryBuilder('s')
            ->select('count(s.id) AS subscriberCount, s.correspondanceLang AS lang')
            ->where($qWhere)
            ->andWhere('s.correspondanceLang IN (:corrLangs)')
            ->groupBy('s.correspondanceLang')
            ->setParameters(array('clubIds' => $clubIds, 'corrLangs' => $clubLangs));
        $result = $qs->getQuery()->getArrayResult();
        
        return $result;
    }
}
