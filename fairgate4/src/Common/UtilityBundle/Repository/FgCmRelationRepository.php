<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FgCmRelationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmRelationRepository extends EntityRepository
{

    /**
    * Function to get relations
    *
    * @param int    $clubId Club id
    * @param string $type   Relation type (household/both)
    *
    * @return array
    */
    public function getRelations($clubId, $type, $lang)
    {
        if ($type=='both') {
            $relationType = "c.isHousehold = 1 AND c.club = '1' ";
            $result = $this->createQueryBuilder("c")
                    ->select('c.id')
                    ->addSelect("(CASE WHEN (ri18n.titleLang='') THEN c.name ELSE ri18n.titleLang END) AS name")
                    ->leftJoin('CommonUtilityBundle:FgCmRelationI18n', 'ri18n', 'WITH', 'c.id = ri18n.id AND ri18n.lang=:lang')
                    ->where($relationType)
                    ->orderBy('c.sortOrder', 'ASC')
                    ->setParameters(array('lang' => $lang));
            $return['household']=$result->getQuery()->getResult();
        }
        $relationType = "c.isOtherPersonal = 1 AND c.club in ('1','$clubId') ";
        $result = $this->createQueryBuilder("c")
                ->select('c.id,c.isHousehold')
                ->addSelect("(CASE WHEN (ri18n.titleLang='') THEN c.name ELSE ri18n.titleLang END) AS name")
                ->leftJoin('CommonUtilityBundle:FgCmRelationI18n', 'ri18n', 'WITH', 'c.id = ri18n.id AND ri18n.lang=:lang')
                ->where($relationType)
                ->orderBy('c.sortOrder', 'ASC')
                ->setParameters(array('lang' => $lang));
        $return['other']= $result->getQuery()->getResult();

        return $return;
    }

    /**
     * Function to get relation names for given relation ids
     *
     * @param int/array $relationId Relation Id or Array of Relation Ids
     * @param object    $conn       Connection variable
     *
     * @return array    $relationNames Result array of relation ids and relation names
     */
    public function getRelationNames($relationId, $conn = false, $lang)
    {
        $relationNames = array();
        if (count($relationId)) {
            $hasConnection = $conn ? true : false;
            if (!$hasConnection) {
                $conn = $this->getEntityManager()->getConnection();
            }
            $relationIdStr = is_array($relationId) ? implode(',', $relationId) : $relationId;
            $relNames = $conn->fetchAll("SELECT GROUP_CONCAT(cr.`id`) AS reltnIds, GROUP_CONCAT(IF(Ri18n.title_lang='',cr.name,Ri18n.title_lang)) AS reltnNames FROM `fg_cm_relation` AS cr LEFT JOIN fg_cm_relation_i18n Ri18n ON cr.id=Ri18n.id AND Ri18n.lang='$lang' WHERE cr.`id` IN ($relationIdStr)");
            if (count($relNames)) {
                $reltnIds = explode(',', $relNames['0']['reltnIds']);
                $reltnNames = explode(',', $relNames['0']['reltnNames']);
                $relationNames = array_combine($reltnIds, $reltnNames);
            }
            if (!$hasConnection) {
                $conn->close();
            }
        }

        return $relationNames;
    }
    /**
     * Function to get all relations for a club
     *
     * @param Integer $clubId Club Id
     *
     * @return array $relations Result array of relation ids and relation names
     */
    public function getAllRelations($clubId, $lang)
    {
        $relationSql = "SELECT cr.id, IF(Ri18n.title_lang='',cr.name,Ri18n.title_lang) as name, cr.is_household, cr.is_other_personal FROM fg_cm_relation AS cr LEFT JOIN fg_cm_relation_i18n Ri18n ON cr.id=Ri18n.id AND Ri18n.lang='$lang' WHERE (cr.club_id =1 OR cr.club_id ='$clubId') ORDER BY cr.sort_order, cr.id";
        $rowRelationsArray = $this->getEntityManager()->getConnection()->fetchAll($relationSql);

        return  $rowRelationsArray;
    }
}
