<?php

/**
 * FgCmsContactTableRepository.
 *
 * @package 	WebsiteCMSBundle
 * @subpackage 	Repository
 * @author     	pitsolutions.ch
 * @version    	Fairgate V4
 *
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCmsContactTable;
use Website\CMSBundle\Util\FgCmsPortraitContainer;

/**
 * FgCmsContactTableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsContactTableRepository extends EntityRepository
{

    /**
     * This function is used to save the contact table and contact portrait wizard stage 1 details
     * 
     * @param array $data      Array of data to be saved
     * @param int   $clubId    Club id
     * @param int   $contactId Contact id
     * 
     * @return int Id Saved contact table id
     */
    public function saveContactTableStage1($data, $clubId, $contactId)
    {
        $tableId = $data['tableId'];
        $tableData = $data[$tableId];
        $tableObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsContactTable')->find($tableId);
        if (!empty($tableObj)) {
            $tableObj->setUpdatedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId));
            $tableObj->setUpdatedAt(new \DateTime('now'));
        } else {
            $tableObj = new FgCmsContactTable();
            $tableObj->setClub($this->_em->getReference('CommonUtilityBundle:FgClub', $clubId));
            $tableObj->setStage('stage1');
            $tableObj->setCreatedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId));
            $tableObj->setCreatedAt(new \DateTime('now'));
            $tableObj->setIsDeleted(0);
            $tableObj->setDisplayType($data['elementType']);
        }
        if (isset($tableData['filterId'])) {
            $tableObj->setFilter($this->_em->getReference('CommonUtilityBundle:FgFilter', $tableData['filterId']));
        }
        if (isset($tableData['includedContacts'])) {
            $tableObj->setIncludeContacts($tableData['includedContacts']);
        }
        if (isset($tableData['excludedContacts'])) {
            $tableObj->setExcludeContacts($tableData['excludedContacts']);
        }
        $this->_em->persist($tableObj);
        $this->_em->flush();

        return $tableObj->getId();
    }

    /**
     * This function is used to get the stage 1 contact table and contact portrait data
     * 
     * @param object $container Container object
     * @param object $clubObj   Club object
     * @param int    $tableId   Table id
     * 
     * @return array $result Contact table data details
     */
    public function getContactTableStage1Data($container, $clubObj, $tableId)
    {
        $queryResult = $this->createQueryBuilder('c')
            ->select("c.stage, IDENTITY(c.filter) AS filterId, c.includeContacts as includedContacts, c.excludeContacts as excludedContacts, (CASE WHEN (f.type = 'general') THEN 'contact' ELSE 'sponsor' END) AS filterType")
            ->leftJoin('CommonUtilityBundle:FgFilter', 'f', 'WITH', 'f.id = c.filter')
            ->where('c.id = :tableId')
            ->setParameters(array('tableId' => $tableId))
            ->getQuery()
            ->getArrayResult();
        $result = $queryResult[0];
        if ($result['includedContacts'] != '') {
            $result['includedContactDetails'] = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getContactName($result['includedContacts'], '', $clubObj, $container);
        }
        if ($result['excludedContacts'] != '') {
            $result['excludedContactDetails'] = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getContactName($result['excludedContacts'], '', $clubObj, $container);
        }

        return $result;
    }

    /**
     * This function is used to save stage 4 contact table data
     * 
     * @param array  $formArray   table appearance data
     * @param int    $tableId   Table id
     * @param object $container Container object
     * 
     * @return contact table id
     */
    public function saveContactTableAppearance($formArray, $tableId)
    {

        $tableObj = $this->_em->getReference('CommonUtilityBundle:FgCmsContactTable', $tableId);
        $tableObj->setRowPerpage($formArray['tableRaw']);
        $tableObj->setOverflowBehavior($formArray['tableOverflow']);
        $tableObj->setRowHighlighting($formArray['highlightRow']);
        $tableObj->setTableSearch($formArray['tableSearch']);
        $tableObj->setTableExport($formArray['tableExport']);
        $tableObj->setStage('stage4');
        $this->_em->persist($tableObj);
        $this->_em->flush();

        return $tableObj->getId();
    }

    /**
     * This function is used to get stage 4 contact table data
     * 
     * @param int    $tableId   Table id
     * 
     * @return array $result Contact table appearance data details
     */
    public function getContactTableAppearance($tableId)
    {
        $queryResult = $this->createQueryBuilder('c')
            ->select("c.rowPerpage, c.overflowBehavior, c.rowHighlighting, c.tableSearch,c.tableExport,c.stage")
            ->where('c.id = :tableId')
            ->setParameters(array('tableId' => $tableId))
            ->getQuery()
            ->getArrayResult();
        $result = $queryResult[0];

        return $result;
    }

    /**
     * To collect the table csettings data
     * @param int $tableId table id
     * 
     * @return array
     */
    public function getTableSettingData($tableId)
    {
        $result = $this->createQueryBuilder('ct')
            ->select("ct.columnData, ct.tableSearch, ct.tableExport as tableExport, ct.rowHighlighting, ct.rowPerpage, ct.columnData, ct.overflowBehavior, ct.includeContacts as includedContacts, ct.excludeContacts as excludedContacts,fi.filterData,(CASE WHEN (fi.type = 'general') THEN 'contact' ELSE 'sponsor' END) AS filterType")
            ->leftJoin('ct.filter', 'fi')
            ->where('ct.id = :tableId')
            ->andWhere('ct.isDeleted=0')
            ->andWhere("ct.stage='stage4'")
            ->setParameter('tableId', $tableId)
            ->getQuery()
            ->getArrayResult();

        if (count($result) > 0) {
            $result = $result[0];
        }

        return $result;
    }

    /**
     *
     * The function to set the table contact element stage
     * stage is just persisted not flushed
     *
     * @param int    $tableObj  table Object
     * @param string $stage     The stage that needs to be update
     *
     * @return object
     */
    public function setContactTableElementStage($tableObj, $stage)
    {
        if ($tableObj != '') {
            $currentStage = $tableObj->getStage();
            //Need to check 'stage1' and 'stage2'
            //The logic is to replace the 'stage' substring from the data and check it
            if (str_replace('stage', '', $currentStage) < str_replace('stage', '', $stage)) {
                $tableObj->setStage($stage);
                $this->_em->persist($tableObj);
                $this->_em->flush();
            }
        }
        return $tableObj;
    }

    /**
     * To collec the portrait element step3 data
     * @param type $portraitId id of the portrait 
     * @return type
     */
    public function getPortraitColumnData($portraitId)
    {
        $result = $this->createQueryBuilder('pe')
            ->select("pe.tableSearch, pe.portraitPerRow, pe.rowPerpage, pe.columnData,pe.id as portraitId, pe.stage, pc.id as containerId,pcc.id as columnId,d.id as dataId,d.sortOrder as dataSortOrder,pc.sortOrder as containerSortOrder,pc.size as containerColumnSize,di18n.lang,pcc.size as columnSize, IDENTITY(ce.box) AS boxId, ce.id AS elementId,cpcc.widthValue AS columnWidth, IDENTITY(pe.filter) AS filterId, f.type AS filterType")
            ->addSelect('pcc.sortOrder as columnSortOrder,d.columnType as columnType,d.columnSubtype as columnSubType, d.functionIds as functionIds,d.fieldDisplayType as fieldDisplayType,d.lineBreakBefore as lineBreakBefore,d.emptyValueDisplay as emptyValueDisplay,d.separateListing,d.profileImage as profileImage, IDENTITY(d.role) as role, IDENTITY(d.roleCategory) as roleCategory, IDENTITY(d.attribute) as attributeId,a.inputType as fieldType,di18n.titleLang as labelTitle,d.title as defaultLabel,IDENTITY(a.attributeset) as catId')
            ->innerJoin('CommonUtilityBundle:FgCmsPortraitContainer', 'pc', 'WITH', 'pc.portrait = pe.id')
            ->innerJoin('CommonUtilityBundle:FgCmsPortraitContainerColumn', 'pcc', 'WITH', 'pcc.container = pc.id')
            ->innerJoin('CommonUtilityBundle:FgFilter', 'f', 'WITH', 'f.id = pe.filter')
            ->leftJoin('CommonUtilityBundle:FgCmsContactTableColumns', 'd', 'WITH', 'd.column = pcc.id')
            ->leftJoin('CommonUtilityBundle:FgCmsContactTableColumnsI18n', 'di18n', 'WITH', 'di18n.id=d.id')
            ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'r.id = d.role')
            ->leftJoin('CommonUtilityBundle:FgRmCategory', 'c', 'WITH', 'c.id = d.roleCategory')
            ->leftJoin('CommonUtilityBundle:FgCmAttribute', 'a', 'WITH', 'a.id = d.attribute')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElement', 'ce', 'WITH', 'ce.table = pe.id')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContainerBox', 'cpcb', 'WITH', 'ce.box = cpcb.id')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContainerColumn', 'cpcc', 'WITH', 'cpcb.column = cpcc.id')
            ->where('pe.id = :portraitId')
            ->andWhere('d.isDeleted =0 OR d.isDeleted IS NULL')
            ->orderBy('pcc.sortOrder', 'ASC')
            ->addOrderBy('pc.sortOrder', 'ASC')
            ->addOrderBy('d.sortOrder', 'ASC')
            ->setParameters(array('portraitId' => $portraitId))
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    /**
     * This function is used to get stage 2 of portrait element
     * 
     * @param int    $tableId   Table id
     * 
     * @return array $result Portrait element display data details
     */
    public function getPortraitElementDisplay($tableId)
    {
        $queryResult = $this->createQueryBuilder('c')
            ->select("c.tableSearch, c.rowPerpage, c.portraitPerRow, c.initialSortingDetails, c.initialSortOrder")
            ->where('c.id = :tableId')
            ->setParameters(array('tableId' => $tableId))
            ->getQuery()
            ->getArrayResult();
        $result = $queryResult[0];
        $result['initialSortingDetails'] = json_decode($result['initialSortingDetails'], true);

        return $result;
    }

    /**
     * Method to save  2nd step of portrait element
     * 
     * @param int    $tableId   Table Id
     * @param array  $jsonData  Data to save
     * @param int    $contactId Logged in contactId
     * @param int    $colSize   Size of dropped column
     * @param object $container Container
     * 
     * @return boolean
     */
    public function savePortraitElementDisplay($tableId, $jsonData, $contactId, $colSize, $container)
    {
        $tableObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsContactTable')->find($tableId);
        if (!empty($tableObj)) {
            $stage = $tableObj->getStage();
            $tableObj->setUpdatedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId));
            $tableObj->setUpdatedAt(new \DateTime('now'));
            if (isset($jsonData['portraitPerRow'])) {
                $tableObj->setPortraitPerRow($jsonData['portraitPerRow']);
            }
            if (isset($jsonData['rowsPerPage'])) {
                $tableObj->setRowPerpage($jsonData['rowsPerPage']);
            }
            if (isset($jsonData['tableSearch'])) {
                $tableObj->setTableSearch($jsonData['tableSearch']);
            }
            if (isset($jsonData['sortingType'])) {
                $sortData['type'] = $jsonData['sortingType'];
                (isset($jsonData['sortingName'])) ? ($sortData['name'] = $jsonData['sortingName']) : '';
                $tableObj->setInitialSortingDetails(json_encode($sortData));
            }
            if (isset($jsonData['sortingOrder'])) {
                $tableObj->setInitialSortOrder($jsonData['sortingOrder']);
            }
            if ($stage == 'stage1') {
                $tableObj->setStage('stage2');
            }
            $this->_em->flush();
        }
        //insert into fg_cms_portrait_container
        if (isset($jsonData['portraitPerRow'])) {
            if ($stage == 'stage1') {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPortraitContainer')->insertPortraitContainer($tableObj->getId(), $jsonData['portraitPerRow'], $colSize);
            } else {
                $fgCmsPortraitContainerObj = new FgCmsPortraitContainer($container);
                $fgCmsPortraitContainerObj->adjustPortraitDisplayOnPortraitsPerRowUpdate($tableId);
            }
        }

        return true;
    }

    /**
     * This function is used to update the portraits per row on page container resize
     * 
     * @param int $tableId         The table id
     * @param int $portraitsPerRow The portraits per row
     * @param int $contactId       The contact id
     */
    public function updatePortraitsPerRow($tableId, $portraitsPerRow, $contactId)
    {
        $tableObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsContactTable')->find($tableId);
        if (!empty($tableObj)) {
            $tableObj->setUpdatedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId));
            $tableObj->setUpdatedAt(new \DateTime('now'));
            if (is_int($portraitsPerRow)) {
                $tableObj->setPortraitPerRow($portraitsPerRow);
            }
            $this->_em->flush();
        }
    }

    /**
     * This function is used to update the contact table wizard stages
     * 
     * @param int $tableId   The table id
     * @param int $contactId The contact id
     * @param int $stage     The wizard stage
     */
    public function updateContactTableStage($tableId, $contactId, $stage = 'stage1')
    {
        $tableObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsContactTable')->find($tableId);
        if (!empty($tableObj)) {
            //update stage only if new stage less than already saved stage 
            if (str_replace('stage', '', $tableObj->getStage()) < str_replace('stage', '', $stage)) {
                $tableObj->setStage($stage);
            }
            $tableObj->setUpdatedBy($this->_em->getReference('CommonUtilityBundle:FgCmContact', $contactId));
            $tableObj->setUpdatedAt(new \DateTime('now'));
            $this->_em->persist($tableObj);
            $this->_em->flush();
        }
    }
    
    /**
     * This function is used to get the portrait details
     * 
     * @param int $tableId The table id
     * 
     * @return array $portraitDetails The portrait details
     */
    public function getPortraitDetails($tableId)
    {
        $qb = $this->createQueryBuilder('CCT')
            ->select('PCC.widthValue AS pageColumnSize, CCT.portraitPerRow AS portraitsPerRow, CPC.id AS portraitContainerId, CPC.size AS portraitContainerSize, count(CPCC.id) AS portraitColumnCount')
            ->innerJoin("CommonUtilityBundle:FgCmsPortraitContainer", "CPC", "WITH", "CPC.portrait = CCT.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPortraitContainerColumn", "CPCC", "WITH", "CPCC.container = CPC.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContentElement", "PCE", "WITH", "PCE.table = CCT.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContainerBox", "PCB", "WITH", "PCB.id = PCE.box ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContainerColumn", "PCC", "WITH", "PCC.id = PCB.column ")
            ->where('CCT.id=:tableId')
            ->groupBy('CPCC.container')
            ->orderBy('CPC.sortOrder', 'ASC')
            ->setParameters(array('tableId' => $tableId));
        $portraitDetails = $qb->getQuery()->getArrayResult();

        return $portraitDetails;
    }
}
