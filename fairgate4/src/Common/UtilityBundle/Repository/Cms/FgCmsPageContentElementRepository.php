<?php

/**
 * FgCmsPageContentElementRepository.
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author     	pitsolutions.ch
 * @version    	Fairgate V4
 *
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgSettings;
use Common\UtilityBundle\Repository\Pdo\CmsPdo;
use Common\UtilityBundle\Repository\Pdo\ContactPdo;

/**
 * FgCmsPageContentElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContentElementRepository extends EntityRepository
{

    /**
     * To retrive clipboard element details
     * @param type $clubId current club id
     * @param type $lang   language of a viewing club
     * @return array clip board details
     */
    public function getClipboardDetails($clubId, $lang)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $clipboard = $this->createQueryBuilder('c')
            ->select("c.id as elementId,CASE WHEN FORM.id IS NULL THEN case when ci18.titleLang = '' or ci18.titleLang is null  then c.title else ci18.titleLang end ELSE FORM.title END as elementTitle,c.sortOrder as elementOrder,ct.logoName as logo, ct.label as label,ct.type as elementType,c.headerElementSize,(DATE_FORMAT(c.deletedAt, '$datetimeFormat')) as deletedAt")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentType', 'ct', 'WITH', 'ct.id = c.pageContentType')
            ->leftJoin('CommonUtilityBundle:FgCmsForms', 'FORM', 'WITH', 'FORM.id = c.form')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementI18n', 'ci18', 'WITH', 'ci18.id = c.id AND ci18.lang=:lang')
            ->where('c.club=:clubId AND c.deletedAt IS NOT NULL AND c.isDeleted=0 AND c.box IS NULL')
            ->orderBy('c.deletedAt', 'DESC')
            ->setParameters(array('clubId' => $clubId, 'lang' => $lang));

        return $clipboard->getQuery()->getArrayResult();
    }

    /**
     * Function to save header element details
     *
     * @param type $data
     * @param type $clubId
     * @param type $boxId
     * @param type $elementId
     * @param type $defaultLang
     */
    public function saveHeaderElement($data, $clubId, $boxId, $elementId, $defaultLang)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'header'));
        if ($elementId == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($data['sortOrder']) && $elementId == 'new') {
            $elementObj->setSortOrder($data['sortOrder']);
        }
        if (isset($data['title'][$defaultLang])) {
            $elementObj->setTitle($data['title'][$defaultLang]);
        }
        if (isset($data['titleSize'])) {
            $elementObj->setHeaderElementSize($data['titleSize']);
        }
        $this->_em->persist($elementObj);
        $this->_em->flush();

        $elId = $elementObj->getId();

        //Insert entry to i18n table
        foreach ($data['title'] as $lang => $titleLang) {
            $elementI18nObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementI18n')->findOneBy(array('lang' => $lang, 'id' => $elId));
            if ($elementI18nObj) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementI18n')->updateElementI18n($elId, $lang, $titleLang);
            } else {
                $elementI18nObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElementI18n();
                $elementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($elId);
                $elementI18nObj->setId($elementObj);
                $elementI18nObj->setLang($lang);
                $elementI18nObj->setTitleLang($titleLang);
                $this->_em->persist($elementI18nObj);
                $this->_em->flush();
            }
        }
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);

        return $elId;
    }

    /**
     * Function to save image element details
     *
     * @param type $data
     * @param type $clubId
     * @param type $elementId
     * 
     * @return element id
     */
    public function saveImageElement($container, $data, $clubId, $elementId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);               
        $cachingEnabled = $container->getParameter('caching_enabled');        
        
        if ($cachingEnabled) {
            //If it is cms page, delete the cache by pageId
            $clubCacheKey = $container->get('club')->get('clubCacheKey');
            $cacheArea = 'cms';
            $trailingPrefix = $data['pageId'].'_imageelement';
            $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
            $cacheDriver->setPrefixValueForDelete($clubCacheKey, $cacheArea, $trailingPrefix);
        
        }
        
        $imageVideoData = json_decode($data['saveData'], true);
        
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $data['boxId']);
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $data['pageId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'image'));
        if ($elementId == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($data['sortOrder']) && $elementId == 'new') {
            $elementObj->setSortOrder($data['sortOrder']);
        }
        if (isset($imageVideoData['element']['display']['display_type'])) {
            $elementObj->setImageElementDisplayType($imageVideoData['element']['display']['display_type']);
            if ($imageVideoData['element']['display']['display_type'] === 'slider') {
                $elementObj->setImageElementSliderTime($imageVideoData['element']['display']['slider_time']);
            }
        }
        ($imageVideoData['element']['image_action'] === 'detailView') ? $elementObj->setImageElementClickType('detail') : (($imageVideoData['element']['image_action'] === 'noneAction') ? $elementObj->setImageElementClickType('none') : $elementObj->setImageElementClickType('link'));
        ($imageVideoData['element']['image_action'] === 'linkView') ? $elementObj->setImageElementLinkOpentype($imageVideoData['element']['link_target']) :'';
        $this->_em->persist($elementObj);
        //insert content update type
        $pageObj->setContentUpdateTime(new \DateTime("now"));
        $this->_em->flush();

        return $elementObj->getId();
    }

    /**
     * Function to save login element details
     *
     * @param int $clubId
     * @param int $pageId
     * @param int $boxId
     * @param int $sortOrder
     * @param int $elementId
     *
     * @return element id
     */
    public function saveLoginElement($clubId, $pageId, $boxId, $sortOrder, $elementId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $pageId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'login'));
        if ($elementId == 0) {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($sortOrder)) {
            $elementObj->setSortOrder($sortOrder);
        }
        $this->_em->persist($elementObj);
        //insert content update type
        $pageObj->setContentUpdateTime(new \DateTime("now"));
        $this->_em->flush();

        return $elementObj->getId();
    }

    /**
     * Function to save newsletter Subscription element details
     *
     * @param int    $clubId    clubId
     * @param int    $pageId    pageId
     * @param int    $boxId     boxId
     * @param int    $sortOrder sortOrder
     * @param int    $elementId elementId
     * @param object $session   session object
     *
     * @return element id
     */
    public function saveNewsletterSubscriptionElement($clubId, $pageId, $boxId, $sortOrder, $elementId, $session)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $pageId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'newsletter-subscription'));
        if ($elementId == 0) {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($sortOrder)) {
            $elementObj->setSortOrder($sortOrder);
        }
        $this->_em->persist($elementObj);
        //insert content update type
        $pageObj->setContentUpdateTime(new \DateTime("now"));
        $this->_em->flush();
        //set session variable after saving
        $session->set("lastCmsPageEditTime_" + $pageId, $pageObj->getContentUpdateTime()->format('Y-m-d H:i:s'));

        return $elementObj->getId();
    }

    /**
     * Function to save newsletter archive element details
     *
     * @param int    $clubId    clubId
     * @param int    $pageId    pageId
     * @param int    $boxId     boxId
     * @param int    $sortOrder sortOrder
     * @param int    $elementId element Id
     * @param object $session   sesion object
     *
     * @return element id
     */
    public function saveNewsletterArchiveElementElement($clubId, $pageId, $boxId, $sortOrder, $elementId, $session)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $pageId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'newsletter-archive'));
        if ($elementId == 0) {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($sortOrder)) {
            $elementObj->setSortOrder($sortOrder);
        }
        $this->_em->persist($elementObj);
        //insert content update type
        $pageObj->setContentUpdateTime(new \DateTime("now"));
        $this->_em->flush();
        //set session variable after saving
        $session->set("lastCmsPageEditTime_" + $pageId, $pageObj->getContentUpdateTime()->format('Y-m-d H:i:s'));

        return $elementObj->getId();
    }

    /**
     * Function to save login element details
     *
     * @param int    $clubId    club id
     * @param int    $pageId    page id
     * @param int    $boxId     box id in page
     * @param int    $sortOrder sort order of elements in box
     * @param int    $elementId element id in box
     * @param object $session   session object
     *
     * @return element id
     */
    public function saveSupplementaryMenuElement($clubId, $pageId, $boxId, $sortOrder, $elementId, $session)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $pageId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'supplementary-menu'));
        if ($elementId == 0) {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        }
        if (isset($sortOrder)) {
            $elementObj->setSortOrder($sortOrder);
        }
        $this->_em->persist($elementObj);
        //insert content update type
        $pageObj->setContentUpdateTime(new \DateTime("now"));
        $this->_em->flush();
        //set session variable after saving
        $session->set("lastCmsPageEditTime_" + $pageId, $pageObj->getContentUpdateTime()->format('Y-m-d H:i:s'));
        
        return $elementObj->getId();
    }

    /**
     * insert new page content element
     * 
     * @param int $clubId      clubId
     * @param int $boxId       boxId
     * @param int $sortOrder   sort order
     * @param int $type        type of element
     *
     * @return int element id
     */
    public function insertNewElement($clubId, $boxId, $sortOrder, $type, $formId = '')
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => $type));
        $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
        $elementObj->setPageContentType($contentTypeObj)->setBox($boxObj)
            ->setClub($clubObj)->setSortOrder($sortOrder)
            ->setIsDeleted(0);
        if ($formId != '') {
            $formObj = $this->_em->getReference('CommonUtilityBundle:FgCmsForms', $formId);
            $elementObj->setForm($formObj);
        }
        $this->_em->persist($elementObj);
        $this->_em->flush();

        return $elementObj->getId();
    }

    /**
     * Function to save article element
     *
     * @param int $data    data to be saved
     * @param int $clubId  current club id
     *
     * @return int $elementId element id
     */
    public function saveArticleElement($data, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $data['boxId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'articles'));
        if ($data['elementId'] == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $data['elementId']);
            if ($data['isAllCat'] == '') {
                $elementObj->setIsAllCategory('');
            }
            if ($data['isAllArea'] == '') {
                $elementObj->setIsAllArea('');
            }
            if (isset($data['isAllCat']) || empty($data['categories'])) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArticleCategory')->deleteExistingElementCategory($data['elementId']);
            }
            if (isset($data['isAllArea']) || empty($data['areas'])) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArea')->deleteExistingElementArea($data['elementId']);
            }
        }
        if (isset($data['sortOrder']) && $data['elementId'] == 'new') {
            $elementObj->setSortOrder($data['sortOrder']);
        }
        if ((isset($data['areas'])) && (in_array($clubId, $data['areas']))) {
            $elementObj->setAreaClub($clubObj);
            unset($data['areas'][0]);
        } else {
            $elementObj->setAreaClub(null);
        }
        $sharedClubs = array();

        if (isset($data['isAllCat'])) {
            $elementObj->setIsAllCategory($data['isAllCat']);
        }
        if ($data['fedSharedVal']) {
            $sharedClubs[] = $data['fedSharedVal'];
        }
        if ($data['subFedSharedVal']) {
            $sharedClubs[] = $data['subFedSharedVal'];
        }
        if (!empty($sharedClubs)) {
            $elementObj->setSharedClub(implode(',', $sharedClubs));
        } else {
            $elementObj->setSharedClub('');
        }

        if (isset($data['isAllArea'])) {
            $elementObj->setIsAllArea($data['isAllArea']);
        }

        $this->_em->persist($elementObj);
        $this->_em->flush();

        $elementId = $elementObj->getId();

        if ((!empty($data['areas'])) && ($data['isAllArea'] == '')) {
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArea')->saveElementArea($elementId, $data['areas']);
        }
        if ((!empty($data['categories'])) && ($data['isAllCat'] == '')) {
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArticleCategory')->saveArticleElementCategory($elementId, $data['categories']);
        }
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);


        return $elementId;
    }

    /**
     * Function is used to get element details
     * 
     * @param   Int   $elementId
     * 
     * @return  Array $finalResult
     */
    public function getElementDetails($elementId)
    {
        $elObj = $this->createQueryBuilder('c')
            ->select("ci18.lang as lang, c.title as title, ci18.titleLang as titleLang, c.headerElementSize as headerElementSize, c.iframeElementCode as iframeCode, c.iframeElementUrl as iframeUrl, c.iframeElementHeight as iframeHeight")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementI18n', 'ci18', 'WITH', 'ci18.id = c.id')
            ->where('c.id=:elementId AND c.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));
        $dataResult = $elObj->getQuery()->getArrayResult();
        $finalResult = array();
        $finalResult['headerSize'] = $dataResult[0]['headerElementSize'];
        $finalResult['iframeCode'] = $dataResult[0]['iframeCode'];
        $finalResult['iframeUrl'] = $dataResult[0]['iframeUrl'];
        $finalResult['iframeHeight'] = $dataResult[0]['iframeHeight'];
        $finalResult['mainTitle'] = $dataResult[0]['title'];
        foreach ($dataResult as $data) {
            $finalResult['title'][$data['lang']] = $data['titleLang'];
        }

        return $finalResult;
    }

    /**
     * Function to save calendar element details
     *
     * @param array $elementArr element array
     * @param int $clubId vlub id

     * @return int $elementId element id
     */
    public function saveCalendarElement($elementArr, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $elementArr['boxId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'calendar'));
        if ($elementArr['elementId'] == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementArr['elementId']);
            if ($elementArr['isAllCategories'] == '') {
                $elementObj->setIsAllCategory('');
            }
            if ($elementArr['isAllArea'] == '') {
                $elementObj->setIsAllArea('');
            }
            if (isset($elementArr['isAllCategories']) || empty($elementArr['categories'])) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementCalendarCategory')->deleteExistingElementCategory($elementArr['elementId']);
            }
            if (isset($elementArr['isAllArea']) || empty($elementArr['areas'])) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArea')->deleteExistingElementArea($elementArr['elementId']);
            }
        }
        if (isset($elementArr['sortOrder']) && ($elementArr['elementId'] == 'new')) {
            $elementObj->setSortOrder($elementArr['sortOrder']);
        }
        if ((isset($elementArr['areas'])) && (in_array($clubId, $elementArr['areas']))) {
            $elementObj->setAreaClub($clubObj);
            unset($elementArr['areas'][0]);
        } else {
            $elementObj->setAreaClub(null);
        }
        $sharedClubs = array();
        if ($elementArr['fedSharedVal']) {
            $sharedClubs[] = $elementArr['fedSharedVal'];
        }
        if ($elementArr['subFedSharedVal']) {
            $sharedClubs[] = $elementArr['subFedSharedVal'];
        }
        if (!empty($sharedClubs)) {
            $elementObj->setSharedClub(implode(',', $sharedClubs));
        } else {
            $elementObj->setSharedClub('');
        }
        if (isset($elementArr['isAllArea'])) {
            $elementObj->setisAllArea($elementArr['isAllArea']);
        }
        if (isset($elementArr['isAllCategories'])) {
            $elementObj->setisAllCategory($elementArr['isAllCategories']);
        }
        $this->_em->persist($elementObj);
        $this->_em->flush();

        $elementId = $elementObj->getId();

        if (!empty($elementArr['areas']) && $elementArr['isAllArea'] == '') {
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementArea')->saveElementArea($elementId, $elementArr['areas']);
        }
        if (!empty($elementArr['categories']) && $elementArr['isAllCategories'] == '') {
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementCalendarCategory')->saveCalendarElementCategory($elementId, $elementArr['categories']);
        }
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($elementArr['pageId']);

        return $elementId;
    }

    /**
     * Function to save twitter element details
     *
     * @param array $elementArr element array
     * @param string $defaultClubLang club default language
     * @param int $clubId club id
     * 
     * @return int $elementId element id
     */
    public function saveTwitterElement($elementArr, $defaultClubLang, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $elementArr['boxId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'twitter'));
        if ($elementArr['elementId'] == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementArr['elementId']);
        }
        if (isset($elementArr['sortOrder']) && $elementArr['elementId'] == 'new') {
            $elementObj->setSortOrder($elementArr['sortOrder']);
        }
        if (isset($elementArr['acccountName'][$defaultClubLang])) {
            $elementObj->setTwitterDefaultAccount($elementArr['acccountName'][$defaultClubLang]);
        }
        if (isset($elementArr['contentHeightLimit'])) {
            $elementArr['contentHeightLimit'] = ($elementArr['contentHeightLimit'] == "") ? null : $elementArr['contentHeightLimit'];
            $elementObj->setTwitterContentHeight($elementArr['contentHeightLimit']); 
        }

        $this->_em->persist($elementObj);
        $this->_em->flush();

        $elementId = $elementObj->getId();
        //Insert entry to i18n table
        foreach ($elementArr['acccountName'] as $lang => $title) {
            $elementI18nObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementI18n')->findOneBy(array('lang' => $lang, 'id' => $elementId));
            if ($elementI18nObj) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementI18n')->updateTwitterElementI18n($elementId, $lang, $title);
            } else {
                $elementI18nObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElementI18n();
                $elementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($elementId);
                $elementI18nObj->setId($elementObj);
                $elementI18nObj->setLang($lang);
                $elementI18nObj->setTwitterAccountnameLang($title);
                $elementI18nObj->setTitleLang('');
                $this->_em->persist($elementI18nObj);
                $this->_em->flush();
            }
        }

        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($elementArr['pageId']);

        return $elementId;
    }

    /**
     * Function to get twitter account name details
     *
     * @param int $elementId Elements id
     *
     * @return array $finalResult
     */
    public function getTwitterAccountDetails($elementId)
    {
        $elObj = $this->createQueryBuilder('tw')
            ->select("ci18.lang as lang, tw.twitterDefaultAccount as accountName, ci18.twitterAccountnameLang as accountnameLang, tw.twitterContentHeight as twitterContentHeight ")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementI18n', 'ci18', 'WITH', 'ci18.id = tw.id')
            ->where('tw.id=:elementId AND tw.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));
        $dataResult = $elObj->getQuery()->getArrayResult();
        $finalResult = array();
        $finalResult['mainAccountName'] = $dataResult[0]['accountName'];
        $finalResult['twitterContentHeight'] = $dataResult[0]['twitterContentHeight'];        
        foreach ($dataResult as $data) {
            $finalResult['accountName'][$data['lang']] = $data['accountnameLang'];
        }

        return $finalResult;
    }

    /**
     * Function to update sort position if an element is moved to the box. So need to increase the sort order
     *
     * @param int $boxId     To box id
     * @param int $sortOrder Sort position
     *
     * @return boolean
     */
    public function updateElementSortPostion($toBoxId, $newSortOrder, $fromBoxId = '', $currentSortVal = '')
    {
        $qb = $this->createQueryBuilder('ce');
        if ($toBoxId == $fromBoxId) {
            if ($newSortOrder > $currentSortVal) {

                return $this->updateElementSortPostionPartOne($qb, $toBoxId, $newSortOrder);
            } else {

                return $this->updateElementSortPostionPartTwo($qb, $toBoxId, $newSortOrder);
            }
        } else {

            return $this->updateElementSortPostionPartThree($qb, $toBoxId, $newSortOrder);
        }
    }

    /**
     * Function to update sort position if an element is moved to the box. So need to increase the sort order - Part one
     * 
     * @param Object $qb           Query builder
     * @param int    $toBoxId      Box id
     * @param int    $newSortOrder Sort order value
     * 
     * @return int
     */
    public function updateElementSortPostionPartOne($qb, $toBoxId, $newSortOrder)
    {
        $qb->select('ce.id as elementId', 'ce.sortOrder as elementOrder', 'pcb.id as boxId')
            ->leftJoin('ce.box', 'pcb')
            ->where('ce.box=:boxId')
            ->andWhere('ce.sortOrder >:sortOrder')
            ->orderBy('ce.sortOrder', 'ASC')
            ->setParameters(array('boxId' => $toBoxId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $result['elementId']);
                $elementObj->setSortOrder($result['elementOrder'] + 1);
                $this->_em->persist($elementObj);
            }
            $this->_em->flush();
        } else {
            return $newSortOrder + 1;
        }

        return $newSortOrder + 1;
    }

    /**
     * Function to update sort position if an element is moved to the box. So need to increase the sort order - Part two
     * 
     * @param Object $qb           Query builder
     * @param int    $toBoxId      Box id
     * @param int    $newSortOrder Sort order value
     * 
     * @return int
     */
    public function updateElementSortPostionPartTwo($qb, $toBoxId, $newSortOrder)
    {
        $qb->select('ce.id as elementId', 'ce.sortOrder as elementOrder', 'pcb.id as boxId')
            ->leftJoin('ce.box', 'pcb')
            ->where('ce.box=:boxId')
            ->andWhere('ce.sortOrder >=:sortOrder')
            ->orderBy('ce.sortOrder', 'ASC')
            ->setParameters(array('boxId' => $toBoxId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $result['elementId']);
                $elementObj->setSortOrder($result['elementOrder'] + 1);
                $this->_em->persist($elementObj);
            }
            $this->_em->flush();
        }

        return $newSortOrder;
    }

    /**
     * Function to update sort position if an element is moved to the box. So need to increase the sort order - Part three
     * 
     * @param Object $qb           Query builder
     * @param int    $toBoxId      Box id
     * @param int    $newSortOrder Sort order value
     * 
     * @return int
     */
    public function updateElementSortPostionPartThree($qb, $toBoxId, $newSortOrder)
    {
        $qb->select('ce.id as elementId', 'ce.sortOrder as elementOrder', 'pcb.id as boxId')
            ->leftJoin('ce.box', 'pcb')
            ->where('ce.box=:boxId')
            ->andWhere('ce.sortOrder >=:sortOrder')
            ->orderBy('ce.sortOrder', 'ASC')
            ->setParameters(array('boxId' => $toBoxId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $result['elementId']);
                $elementObj->setSortOrder($result['elementOrder'] + 1);
                $this->_em->persist($elementObj);
            }
            $this->_em->flush();
        }

        return $newSortOrder;
    }

    /**
     * Function to move and update element and sort position
     *
     * @param array $elementDetails Element details array
     *
     * @return boolean
     */
    public function moveElementsAndUpdatePosition($elementDetails)
    {
        $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementDetails['elementId']);
        $boxObject = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $elementDetails['toBox']);
        $elementObj->setBox($boxObject);
        $elementObj->setSortOrder($elementDetails['sortOrder']);
        $this->_em->persist($elementObj);
        $this->_em->flush();

        return true;
    }

    /**
     * Function to remove elements to clipboard
     *
     * @param array $elementArray Elements details
     *
     * @return boolean
     */
    public function removeElementsToClipboard($elementArray)
    {
        foreach ($elementArray as $elementId) {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
            $elementObj->setBox(null);
            $elementObj->setDeletedAt(new \DateTime("now"));
            $this->_em->persist($elementObj);
        }
        $this->_em->flush();

        return true;
    }

    /**
     * Function to get aricle or calendar element details for edit
     *
     * @param int    $elementId   element id
     * @param string $elementType element type either aticle or calendar
     *
     * @return array $returnArray return result
     */
    public function getArticleElementDetails($elementId, $elementType)
    {
        $catTable = ($elementType == 'article') ? 'CommonUtilityBundle:FgCmsPageContentElementArticleCategory' : 'CommonUtilityBundle:FgCmsPageContentElementCalendarCategory';
        $element = $this->createQueryBuilder('e')
            ->select("GROUP_CONCAT( DISTINCT ar.role) AS areas, GROUP_CONCAT(DISTINCT cat.category) as categoryIds, e.isAllArea, e.isAllCategory, e.sharedClub AS clubShared, IDENTITY(e.areaClub) AS areaClub")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementArea', 'ar', 'WITH', 'ar.element = e.id')
            ->leftJoin($catTable, 'cat', 'WITH', 'cat.element = e.id')
            ->where('e.id=:elementId AND e.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));

        $dataResult = $element->getQuery()->getArrayResult();
        $finalResult = $dataResult[0];

        $categoryArray = array();
        $areaArray = array();
        if ($finalResult['areas'] || ($finalResult['areaClub']) || ($finalResult['isAllArea'] == '')) {
            $areaArray['areaIds'] = explode(',', $finalResult['areas']);
        } else {
            $areaArray['areaIds'] = array("ALL_AREAS");
        }
        if ($finalResult['categoryIds'] || ($finalResult['isAllCategory'] == '')) {
            $categoryArray['catIds'] = explode(',', $finalResult['categoryIds']);
        } else {
            $categoryArray['catIds'] = array("ALL_CATS");
        }
        if ($finalResult['clubShared']) {
            $finalResult['sharedClub'] = explode(',', $finalResult['clubShared']);
        }

        return array_merge($categoryArray, $areaArray, $finalResult);
    }

    /**
     * Function to get selectected areas and categories for calendar elements
     *
     * @param int $elementId Elements id
     *
     * @return string $finalResult
     */
    public function getCalendarElementDetails($elementId)
    {
        $element = $this->createQueryBuilder('e')
            ->select("GROUP_CONCAT( DISTINCT ar.role) AS areaIds, GROUP_CONCAT(DISTINCT cat.category) as categoryIds, e.isAllArea, e.isAllCategory, e.sharedClub, IDENTITY(e.areaClub) AS areaClub")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementArea', 'ar', 'WITH', 'ar.element = e.id')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementCalendarCategory', 'cat', 'WITH', 'cat.element = e.id')
            ->where('e.id=:elementId AND e.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));
        $dataResult = $element->getQuery()->getArrayResult();

        return $dataResult[0];
    }

    /**
     * Function to save map element
     *
     * @param int $data    data to be saved
     * @param int $clubId  current club id
     *
     * @return int $elementId element id
     */
    public function saveMapElement($data, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $data['boxId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'map'));
        if ($data['elementId'] == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $data['elementId']);
        }
        $elementObj->setTitle($data['location']);
        $elementObj->setMapElementLatitude($data['latitude']);
        $elementObj->setMapElementLongitude($data['longitude']);
        if (isset($data['sortOrder']) && $data['elementId'] == 'new') {
            $elementObj->setSortOrder($data['sortOrder']);
        }
        $elementObj->setMapElementShowMarker($data['mapMarker']);
        $elementObj->setMapElementDisplayStyle($data['mapDisplay']);
        $elementObj->setMapElementHeight($data['mapHeight']);
        if (isset($data['mapZoomValue'])) {
            $elementObj->setMapElementZoomValue($data['mapZoomValue']);
        }

        $this->_em->persist($elementObj);
        $this->_em->flush();

        $elementId = $elementObj->getId();
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);

        return $elementId;
    }

    /**
     * Function to get map element data for edit
     *
     * @param int $elementId  element id
     *
     * @return array $finalResult final result
     */
    public function getMapElementData($elementId)
    {
        $element = $this->createQueryBuilder('e')
            ->select("e.mapElementLatitude as latitude, e.title as location, e.mapElementLongitude as longitude , e.mapElementShowMarker as mapMarker, e.mapElementHeight as mapHeight, e.mapElementDisplayStyle as mapDisplay, e.mapElementZoomValue as mapZoomValue")
            ->where('e.id=:elementId AND e.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));

        $dataResult = $element->getQuery()->getArrayResult();

        return $dataResult[0];
    }

    /**
     * This function is used to save iframe element details
     * @param type $data
     * @param type $clubId
     * @param type $boxId
     * @param type $elementId
     * @return int $elId
     */
    public function saveIframeElement($data, $clubId, $boxId, $elementId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'iframe'));
        if ($elementId == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        }
        if (isset($data['sortOrder']) && $elementId == 'new') {
            $elementObj->setSortOrder($data['sortOrder']);
        }
        if (isset($data['iframeCode'])) {
            $elementObj->setIframeElementCode($data['iframeCode']);
        }
        if (isset($data['iframeUrl'])) {
            $elementObj->setIframeElementUrl($data['iframeUrl']);
        }
        if (isset($data['iframeHeight'])) {
            $elementObj->setIframeElementHeight($data['iframeHeight']);
        }
        $this->_em->persist($elementObj);
        $this->_em->flush();
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);

        return $elementObj->getId();
    }

    /**
     * Function to get image element details 
     *
     * @param int $elementId Elements id
     * @param int $isPublic scope of contact
     * @return string $finalResult
     */
    public function getImageElementData($elementId, $isPublic = '')
    {
        $scopeCondition = ($isPublic == 1) ? 'AND g.scope = "PUBLIC" ' : '';
        $conn = $this->getEntityManager()->getConnection();
        $imageElement = "SELECT e.image_element_display_type, e.image_element_click_type,e.image_element_link_opentype, e.image_element_slider_time, m.item_id, m.sort_order, m.image_element_link_type, m.image_element_external_link, m.navigation_id,n.is_active,n.navigation_url, (SELECT GROUP_CONCAT(gi18.lang, '|@@@|', IFNULL(gi18.description_lang,'') SEPARATOR '|&&&|') FROM fg_gm_item_i18n AS gi18 WHERE gi18.id = g.id) AS descLang, g.type, g.filepath, g.video_thumb_url, g.file_size, g.scope "
            . "FROM fg_cms_page_content_element e "
            . "left join fg_cms_page_content_media m on e.id=m.element_id "
            . "left join fg_gm_items g on m.item_id=g.id "
            . "left join fg_cms_navigation n on n.id=m.navigation_id "
            . "where m.element_id=:elementId $scopeCondition"
            . "order by m.sort_order";
        
        return $conn->fetchAll($imageElement, array(':elementId' => $elementId));
    }
    
  
    
    
    
    /**
     * Function to save elements moved from clipboard
     *
     * @param Object $container        Container
     * @param int    $pageId           Page id
     * @param array  $clipboardDetails Clipboard details
     * @param int    $contactId        Contact id
     *
     * @return boolean
     */
    public function moveElementFromClipboard($container, $pageId, $clipboardDetails, $contactId)
    {
        $clipboardDetails['sortOrder'] = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->updateElementSortPostion($clipboardDetails['boxId'], $clipboardDetails['sortOrder']);
        $cmsPdo = new CmsPdo($container);
        $cmsPdo->saveElementFromClipboard($clipboardDetails);

        $pdo = new ContactPdo($container);
        $pdo->reorderSortPosition('fg_cms_page_content_element', 'box_id', $clipboardDetails['boxId'], 'sort_order');

        $pageObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->find($pageId);
        $pageTitle = $pageObj->getTitle();
        $logArray = array();
        $element = $clipboardDetails['elementId'];
        $logArray[] = "('$element', '$pageId', 'page', 'added', '', '$pageTitle', now(), $contactId)";
        $cmsPdo->saveLog($logArray);

        return true;
    }

    /**
     * Function to update sort order before adding new Element.
     * @param type $boxId
     * @param type $sortOrder
     */
    public function reOrderSortPosition($boxId, $sortOrder)
    {
        $qb = $this->createQueryBuilder('ce');
        $qb->select('ce.id as elementId', 'ce.sortOrder as elementOrder', 'pcb.id as boxId')
            ->leftJoin('ce.box', 'pcb')
            ->where('ce.box=:boxId')
            ->andWhere('ce.sortOrder >=:sortOrder')
            ->orderBy('ce.sortOrder', 'ASC')
            ->setParameters(array('boxId' => $boxId, 'sortOrder' => $sortOrder));
        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $result['elementId']);
                $elementObj->setSortOrder($result['elementOrder'] + 1);
                $this->_em->persist($elementObj);
            }
            $this->_em->flush();
        }
    }

    /**
     *
     * The function to save the form element to the DB
     *
     * @param array $data The array will form details
     * @param int   $clubId The club Id
     *
     * @return int
     */
    public function saveFormElement($data, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'form'));
        $elementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($data['elementId']);
        if ($elementObj == '') {
            $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $data['boxId']);
            $formObj = $this->_em->getReference('CommonUtilityBundle:FgCmsForms', $data['formId']);
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
            $elementObj->setForm($formObj);
        }

        $elementObj->setSortOrder($data['sortOrder']);
        $this->_em->persist($elementObj);
        $this->_em->flush();

        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);
        return $elementObj->getId();
    }

    /**
     *
     * The function to get Active form elements of a club
     *
     * @param  int    $clubId  club Id
     * @param  string $lang    default club language
     *
     * @return array   $return active forms
     */
    public function getActiveFormElementDetails($clubId, $lang)
    {
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'form'));
        $contentTypeId = $contentTypeObj->getId();
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $activeForms = $this->createQueryBuilder('c')
            ->select("c.id as id,F.title AS title,c.sortOrder as elementOrder,COUNT(cfi.id) as inquiryCount,(DATE_FORMAT(c.deletedAt, '$datetimeFormat')) as deletedAt")
            ->innerJoin('CommonUtilityBundle:FgCmsForms', 'F', 'WITH', 'F.id = c.form ')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementFormInquiries', 'cfi', 'WITH', 'cfi.element = c.id')
            ->where('c.club=:clubId AND c.pageContentType =:contentTypeId AND c.deletedAt IS NULL AND c.isDeleted=0 AND c.box IS NOT NULL ')
            ->groupBy('c.id')
            ->setParameters(array('clubId' => $clubId, 'contentTypeId' => $contentTypeId));
        $return = $activeForms->getQuery()->getArrayResult();

        return ((count($return) > 0) ? $this->getSidebarFormat($return) : $return);
    }

    /**
     *
     * The function to get clipboard form elements of a club
     *
     * @param  int    $clubId  club Id
     * @param  string $lang    default club language
     *
     * @return array  $return  clipboard forms
     */
    public function getClipboardFormElementDetails($clubId, $lang)
    {
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'form'));
        $contentTypeId = $contentTypeObj->getId();
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $clipboardForms = $this->createQueryBuilder('c')
            ->select("c.id as id,F.title AS title,c.sortOrder as elementOrder,COUNT(cfi.id) as inquiryCount,(DATE_FORMAT(c.deletedAt, '$datetimeFormat')) as deletedAt")
            ->innerJoin('CommonUtilityBundle:FgCmsForms', 'F', 'WITH', 'F.id = c.form ')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementFormInquiries', 'cfi', 'WITH', 'cfi.element = c.id')
            ->where('c.club=:clubId AND c.pageContentType =:contentTypeId AND c.deletedAt IS NOT NULL AND c.isDeleted=0 AND c.box IS NULL ')
            ->groupBy('c.id')
            ->setParameters(array('clubId' => $clubId, 'contentTypeId' => $contentTypeId));
        $return = $clipboardForms->getQuery()->getArrayResult();

        return ((count($return) > 0) ? $this->getSidebarFormat($return) : $return);
    }

    /**
     *
     * The function to get deleted form elements of a club
     *
     * @param  int     $clubId  club Id
     * @param  string  $lang    default club language
     *
     * @return array   $return  deleted forms
     */
    public function getDeletedFormElementDetails($clubId, $lang)
    {
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'form'));
        $contentTypeId = $contentTypeObj->getId();
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $deletedForms = $this->createQueryBuilder('c')
            ->select("c.id as id,F.title AS title,c.sortOrder as elementOrder,COUNT(cfi.id) as inquiryCount,(DATE_FORMAT(c.deletedAt, '$datetimeFormat')) as deletedAt")
            ->innerJoin('CommonUtilityBundle:FgCmsForms', 'F', 'WITH', 'F.id = c.form ')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementFormInquiries', 'cfi', 'WITH', 'cfi.element = c.id')
            ->where('c.club=:clubId AND c.pageContentType =:contentTypeId AND c.deletedAt IS NOT NULL AND c.isDeleted=1 AND c.box IS NULL ')
            ->groupBy('c.id')
            ->having('COUNT(cfi.id) > 0')
            ->setParameters(array('clubId' => $clubId, 'contentTypeId' => $contentTypeId));
        $return = $deletedForms->getQuery()->getArrayResult();

        return ((count($return) > 0) ? $this->getSidebarFormat($return) : $return);
    }

    /**
     * The function to get array result in sidebar format
     *
     * @param  array  $return  form details
     *
     * @return array  $return  formated sidebar data
     */
    private function getSidebarFormat($return)
    {
        // function to change array key count
        array_walk($return, function (& $item) {
            $item['count'] = $item['inquiryCount'];
            unset($item['inquiryCount']);
        });

        return $return;
    }

    /**
     *
     * The function return form title and is active form
     *
     * @param  int $elementId   elementId 
     * @param  int $contactLang contactLang 
     *
     * @return array of formTitle and isActive
     */
    public function getFormTitleAndActive($elementId, $contactLang)
    {
        $pages = $this->createQueryBuilder('E')
            ->select("F.title AS formTitle, CASE WHEN (IDENTITY(E.box) IS NOT NULL AND IDENTITY(E.box) != '' AND E.isDeleted = 0 AND E.deletedAt IS NULL) THEN '1' ELSE '0' END as isActive")
            ->innerJoin('CommonUtilityBundle:FgCmsForms', 'F', 'WITH', 'F.id = E.form ')
            ->andWhere('E.id = :elementId')
            ->setParameters(array('elementId' => $elementId));

        return $pages->getQuery()->getSingleResult();
    }

    /**
     * Function to save sponsor Ad element details
     *
     * @param array $elementArr element array
     * @param int   $clubId     current club id

     * @return int $elementId element id
     */
    public function saveSponsorAdElement($elementArr, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $elementArr['boxId']);
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => 'sponsor-ads'));
        if ($elementArr['elementId'] == 'new') {
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
        } else {
            $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementArr['elementId']);
        }
        if ($elementArr['sponsorAreas']) {
            $adAreaObj = $this->_em->getReference('CommonUtilityBundle:FgSmAdArea', $elementArr['sponsorAreas']);
            $elementObj->setSponsorAdArea($adAreaObj);
        }
        $elementObj->setSponsorAdDisplayType($elementArr['adDisplay']);
        if ($elementArr['adDisplay'] == 'fader') {
            $elementObj->setSponsorAdDisplayTime($elementArr['faderTime']);
            $elementObj->setSponsorAdMaxWidth('');
        } elseif ($elementArr['adDisplay'] == 'horizontal') {
            $elementObj->setSponsorAdDisplayTime('');
            $elementObj->setSponsorAdMaxWidth($elementArr['horizontalWidth']);
        } else {
            $elementObj->setSponsorAdDisplayTime('');
            $elementObj->setSponsorAdMaxWidth('');
        }
        if (isset($elementArr['sortOrder']) && ($elementArr['elementId'] == 'new')) {
            $elementObj->setSortOrder($elementArr['sortOrder']);
        }
        $this->_em->persist($elementObj);
        $this->_em->flush();
        $elementId = $elementObj->getId();
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElementSponsorServices')->saveSponsorServices($elementId, $elementArr['sponsorServices']);


        return $elementId;
    }

    /**
     * Function to get sposnor Ad saved Data

     * @param  int   $elementId element Id

     * @return array $sponsorData saved sposnor element data
     */
    public function getSponsorAdElementData($elementId)
    {
        $sponsor = $this->createQueryBuilder('p')
            ->select("GROUP_CONCAT( DISTINCT sr.service) AS sponsorServices,p.sponsorAdDisplayType,p.sponsorAdDisplayTime,p.sponsorAdMaxWidth,GROUP_CONCAT( DISTINCT p.sponsorAdArea) As adAreaIds")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementSponsorServices', 'sr', 'WITH', 'sr.element = p.id')
            ->where('p.id =:elementId AND p.isDeleted=0')
            ->setParameters(array('elementId' => $elementId));
        $sponsorData = $sponsor->getQuery()->getArrayResult();

        return $sponsorData[0];
    }

    /**
     *
     * The function to save the contact table element to the DB
     *
     * @param array $data The array wilh contact table elelment details
     * @param int   $clubId The club Id
     */
    public function saveContactTableElement($data, $clubId)
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $elementType = ($data['elementType'] == 'table') ? 'contacts-table' : 'portrait-element';
        $contentTypeObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentType')->findOneBy(array('type' => $elementType));
        $elementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($data['elementId']);
        if (empty($elementObj)) {
            $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $data['boxId']);
            $tableObj = $this->_em->getReference('CommonUtilityBundle:FgCmsContactTable', $data['tableId']);
            $elementObj = new \Common\UtilityBundle\Entity\FgCmsPageContentElement();
            $elementObj->setPageContentType($contentTypeObj);
            $elementObj->setBox($boxObj);
            $elementObj->setClub($clubObj);
            $elementObj->setIsDeleted(0);
            $elementObj->setTable($tableObj);
        }
        $elementObj->setSortOrder($data['sortOrder']);
        $this->_em->persist($elementObj);
        $this->_em->flush();

        $this->_em->getRepository('CommonUtilityBundle:FgCmsPage')->saveContentUpdateTime($data['pageId']);

        return $elementObj->getId();
    }
    
    /**
     * To get the all content detail of a page
     * 
     * @param integer $elementIds       id of page
     * @param string  $lang             language of club
     * @param int     $clubId           club Id
     * @param int     $clubCacheKey     club Cache Key
     * @param int     $cacheLifeTime    cache Life Time
     * @param boolean $cachingEnabled   caching Enabled
     * @return type
     */
    public function getOnLoadPageDetails($pageId, $elementIds, $lang, $clubId, $clubCacheKey, $cacheLifeTime, $cachingEnabled) 
    {
        $cacheKey = str_replace('{{cache_area}}', 'cms', $clubCacheKey);
        $cacheKey = $cacheKey.$pageId;
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        $qb = $this->createQueryBuilder('ce')
            ->select("COALESCE(NULLIF(cei18.twitterAccountnameLang,'') , ce.twitterDefaultAccount) as accountName, ce.twitterContentHeight")
            ->addSelect("ce.id as elementId,ct.type as elementType, COALESCE(NULLIF(cei18.titleLang,'') , ce.title) as elementTitle,ce.headerElementSize,ce.isAllCategory,ce.isAllArea,ct.logoName as logo")
            ->addSelect('ce.imageElementDisplayType,ce.imageElementSliderTime, IDENTITY(ce.form) as formId')
            ->addSelect('ce.mapElementLatitude,ce.mapElementLongitude,ce.mapElementShowMarker,ce.mapElementHeight,ce.mapElementDisplayStyle,ce.mapElementZoomValue')
            ->addSelect('ce.iframeElementCode,ce.iframeElementUrl as iframeUrl,ce.iframeElementHeight')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentType', 'ct', 'WITH', 'ct.id = ce.pageContentType')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentElementI18n', 'cei18', 'WITH', 'cei18.id = ce.id AND cei18.lang=:lang')
            ->where('ce.id IN (:elementIds)')
            ->andWhere('ce.deletedAt IS NULL')
            ->andWhere('ce.club=:clubId')
            ->setParameters(array('lang' => $lang, 'elementIds' => $elementIds, 'clubId' => $clubId));
        
        //$result = $qb->getQuery()->getArrayResult();
        $result = $cacheDriver->getCachedResult($qb, $cacheKey, $cacheLifeTime, $cachingEnabled);
        $resultArray = array_combine(array_column($result,'elementId'),$result);

        return $resultArray;
    }
    
    
    /**
     * Get image elements ajax data
     * 
     * @param object $container     Container
     * @param int    $pageId        PageId
     * @param int    $elementIds    ElementIds
     * 
     * @return array
     */
    public function getImageElementsDataAjax($container,$pageId, $elementIds)
    {
        $clubService = $container->get('club');
        $contactId = $container->get('contact')->get('id');
        $superadmin = $container->get('contact')->get('isSuperAdmin');
        
        $clubCacheKey = $clubService->get('clubCacheKey');
        $cacheLifeTime = $clubService->get('cacheLifeTime');
        $cachingEnabled = $container->getParameter('caching_enabled');
        
        $isPublic = 0;
        if(!$contactId){
            $isPublic = 1;
        }
        if (!$superadmin && $contactId) {
            // logged in contact and is not a superadmin
            $contactLang = $container->get('contact')->get('corrLang');
        } else {
            //is superadmin or is not logged in
            $contactLang = $clubService->get('default_lang');
        }
        
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        $qb = $this->createQueryBuilder('e')
            ->select("e.id, e.imageElementDisplayType as image_element_display_type,e.imageElementClickType as image_element_click_type,e.imageElementLinkOpentype as image_element_link_opentype, e.imageElementSliderTime as image_element_slider_time, m.imageElementLinkType as image_element_link_type")
            ->addSelect("IDENTITY(m.item) as item, m.sortOrder as sort_order, m.imageElementExternalLink as image_element_external_link, IDENTITY(m.navigation) as navigation_id ")
            ->addSelect("n.isActive as is_active , n.navigationUrl as navigation_url")
            ->addSelect("g.type, g.filepath, g.videoThumbUrl as video_thumb_url, g.fileSize as file_size, g.scope")
            ->addSelect("COALESCE(NULLIF(gi18.descriptionLang,'') , g.description) as description")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentMedia', 'm', 'WITH', 'e.id = m.element')
            ->leftJoin('CommonUtilityBundle:FgGmItems', 'g', 'WITH', 'g.id = m.item')
            ->leftJoin('CommonUtilityBundle:FgGmItemI18n', 'gi18', 'WITH', 'gi18.id = g.id AND gi18.lang = :lang')
            ->leftJoin('CommonUtilityBundle:FgCmsNavigation', 'n', 'WITH', 'n.id = m.navigation')
            ->where('m.element IN (:elementIds)');
        $params = array('elementIds'=>$elementIds,'lang' => $contactLang);        
        
        if ($isPublic == 1){ 
            $prefixKey = str_replace('{{cache_area}}', 'cms', $clubCacheKey);
            $cacheKey = $prefixKey.$pageId.'_imageelement';
            $qb ->andWhere("g.scope = :public");
            $params = array('elementIds'=>$elementIds,'lang' => $contactLang,'public' => 'PUBLIC');
        } else {
            $prefixKey = str_replace('{{cache_area}}', 'cms', $clubCacheKey);
            $cacheKey = $prefixKey.$pageId.'_imageelement'.$contactId;                                   
        }
        
        $qb ->orderBy('e.id,m.sortOrder')->setParameters($params);
        $result = $cacheDriver->getCachedResult($qb, $cacheKey, $cacheLifeTime, $cachingEnabled);                       
        
        return $result;
    }
}
