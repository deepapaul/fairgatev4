<?php

/**
 * FgCmsPageContentElementI18nRepository.
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author     	pitsolutions.ch
 * @version    	Fairgate V4
 *
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;

/**
 * FgCmsPageContentElementI18nRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContentElementI18nRepository extends EntityRepository
{

    /**
     * Function to update element title i18n
     * @param Int    $id     element id
     * @param String $lang   language
     * @param String $title  title
     */
    public function updateElementI18n($id, $lang, $title)
    {
        $qb = $this->createQueryBuilder();
        $que = $qb->update('CommonUtilityBundle:FgCmsPageContentElementI18n', 'ei18n')
            ->set('ei18n.titleLang', ":title")
            ->where('ei18n.lang=:lang')
            ->andWhere('ei18n.id =:elId')
            ->setParameter('elId', $id)
            ->setParameter('lang', $lang)
            ->setParameter('title', $title)
            ->getQuery();
        $que->execute();

        return true;
    }

    /**
     * Function to update fetch header element title for all languages and format the array
     * 
     * @param array $elementIdArray Element array
     * 
     * @return array
     */
    public function getHeaderTitleLang($elementIdArray)
    {
        $qb = $this->createQueryBuilder('cei18n')
            ->select('ce.id', 'cei18n.titleLang', 'cei18n.lang', 'ce.title')
            ->leftJoin('cei18n.id', 'ce')
            ->where("ce.id IN (:elementId)")
            ->setParameters(array('elementId' => $elementIdArray));

        $result = $qb->getQuery()->getResult();
        $resultArray = array();
        foreach ($result as $val) {
            $resultArray[$val['id']][$val['lang']] = ($val['titleLang'] != '') ? $val['titleLang'] : $val['title'];
        }

        return $resultArray;
    }
    /**
     * Function to update fetch twitter element title for all languages and format the array
     * 
     * @param array $elementIdArray Element array
     * 
     * @return array
     */
    public function getTwitterTitleLang($elementIdArray)
    {
        $qb = $this->createQueryBuilder('cei18n')
            ->select('cei18n.twitterAccountnameLang', 'cei18n.lang', 'ce.twitterDefaultAccount')
            ->leftJoin('cei18n.id', 'ce')
            ->where("ce.id IN (:elementId)")
            ->setParameters(array('elementId' => $elementIdArray));

        $result = $qb->getQuery()->getResult();
        $resultArray = array();
        foreach ($result as $val) {
            $resultArray[$val['lang']] = ($val['twitterAccountnameLang'] != '') ? $val['twitterAccountnameLang'] : $val['twitterDefaultAccount'];
        }

        return $resultArray;
    }
     /**
     * Function to update twitter element account name i18n
     * 
     * @param Int    $id     element id
     * @param String $lang   language
     * @param String $title  title
     */
    public function updateTwitterElementI18n($id, $lang, $title)
    {
        $qb = $this->createQueryBuilder();
        $que = $qb->update('CommonUtilityBundle:FgCmsPageContentElementI18n', 'tei18n')
            ->set('tei18n.twitterAccountnameLang', ":title")
            ->where('tei18n.lang=:lang')
            ->andWhere('tei18n.id =:elId')
            ->setParameter('elId', $id)
            ->setParameter('lang', $lang)
            ->setParameter('title', $title)
            ->getQuery();
        $que->execute();

        return true;
    }
}
