<?php

/**
 * FgCmsPageContentMediaRepository.
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author     	pitsolutions.ch
 * @version    	Fairgate V4
 *
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;

/**
 * FgCmsPageContentMediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContentMediaRepository extends EntityRepository
{

    /**
     * Function to save the media added to an image element.
     * @param array   $imageElementData
     * @param array $galleryIds
     * @param Integer $elementId
     */
    public function linkElementItem($imageElementData, $galleryIds, $elementId)
    {
        $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        foreach ($galleryIds as $galleryIdKey => $galleryIdVal) {
            if (array_key_exists($galleryIdKey, $imageElementData)) {
                $imageElementData[$galleryIdVal] = $imageElementData[$galleryIdKey];
                unset($imageElementData[$galleryIdKey]);
            }
        }

        if (count($imageElementData) > 0) {
            foreach ($imageElementData as $key => $value) {
                if (array_key_exists('type', $value)) {
                    $itemObj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $value['itemId']);
                } else {
                    $itemObj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $key);
                }
                $mediaObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->findOneBy(array('item' => $itemObj, 'element' => $elementObj));
                if (!$mediaObj) {
                    $mediaObj = new \Common\UtilityBundle\Entity\FgCmsPageContentMedia();
                    $mediaObj->setItem($itemObj);
                    $mediaObj->setElement($elementObj);
                }
                $mediaObj->setSortOrder($value['sort_order']);
                $mediaObj->setImageElementLinkType($value['link_type']);
                if ($value['link_type'] == 'internal') {
                    $navObj = $this->_em->getReference('CommonUtilityBundle:FgCmsNavigation', $value['link_value']);
                    $mediaObj->setNavigation($navObj);
                } else {
                    $mediaObj->setImageElementExternalLink($value['link_value']);
                }
                $this->_em->persist($mediaObj);
            }
        }
        $this->_em->flush();
    }

    /**
     * Function to edit all descrpition.
     *
     * @param array  $descDet
     * @param string $defLang
     * @param array  $clubLang
     *
     * @return array
     */
    public function editItemDesc($descDet, $defLang, $clubLang, $container)
    {
        foreach ($descDet as $itemId => $desc) {
            if (array_key_exists('type', $desc)) {
                $itemId = $desc['itemId'];
                $itemobj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $itemId);
            } else {
                $itemobj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $itemId);
            }
            $itemobj->setDescription(FgUtility::getSecuredDataString($desc['description'][$defLang], $this->_em->getConnection()));
            $this->_em->persist($itemobj);
            $this->_em->flush();

            //insert into fg_gm_item_i18n
            foreach ($desc['description'] as $lang => $editVal) {
                $descVal = str_replace('<script', '<scri&nbsp;pt', $editVal);
                $gmItemI18nObj = $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->findOneBy(array('id' => $itemId, 'lang' => $lang));
                if ($gmItemI18nObj) {
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->updateLangDesc($itemId, $lang, $descVal);
                } else {
                    $this->_em->getRepository('CommonUtilityBundle:FgGmItemI18n')->insertLangDesc($itemId, $lang, $descVal, $container);
                }
            }
        }

        return 'success';
    }

    /**
     * Function to remove the media added to an image element.
     *
     * @param array   $isDeletedArray
     * @param Integer $elementId
     */
    public function unLinkElementItem($isDeletedArray, $elementId)
    {
        $elementObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContentElement', $elementId);
        foreach ($isDeletedArray as $key => $val) {
            if (array_key_exists('type', $val)) {
                $itemObj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $val['itemId']);
            } else {
                $itemObj = $this->_em->getReference('CommonUtilityBundle:FgGmItems', $key);
            }
            $mediaDelObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->findOneBy(array('item' => $itemObj, 'element' => $elementObj));
            $this->_em->remove($mediaDelObj);
        }
        $this->_em->flush();
    }

    /**
     * Function to save the media added to an text element.
     *
     * @param array   $itemIdArray      array with gallery item ids
     * @param Integer $elementId        element id
     * @param array   $textElementId    text element id
     */
    public function saveTextElementMedia($itemIdArray, $elementId, $textElementId)
    {
        $elementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($elementId);
        $textElementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->find($textElementId);

        foreach ($itemIdArray as $item) {
            $textElementMediaObj = new \Common\UtilityBundle\Entity\FgCmsPageContentMedia();
            $itemObj = $this->_em->getRepository('CommonUtilityBundle:FgGmItems')->find($item['itemId']);
            $textElementMediaObj->setElement($elementObj);
            $textElementMediaObj->setItem($itemObj);
            $textElementMediaObj->setTextElement($textElementObj);
            $textElementMediaObj->setSortOrder($item['sortOrder']);
            $this->_em->persist($textElementMediaObj);
        }
        $this->_em->flush();

        return;
    }

    /**
     * Function to update sort order.
     *
     * @param array $mediaArray array to save
     */
    public function updateTextElementMediaSortOrder($mediaArray)
    {
        foreach ($mediaArray as $media) {
            if ($media['sort_order'] && $media['mediaid'] && $media['itemid']) {
                $mediaObj = $this->find($media['mediaid']);
                $mediaObj->setSortOrder($media['sort_order']);
                $this->_em->persist($mediaObj);
                $this->_em->flush();
            }
        }

        return;
    }

    /**
     * Function to remove the media added to an text element.
     *
     * @param array $mediaIdArray array with text element-media Ids
     */
    public function removeTextElementAttachment($mediaIdArray)
    {
        foreach ($mediaIdArray as $mediaId) {
            $textElementMediaObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->find($mediaId);
            if ($textElementMediaObj) {
                $this->_em->remove($textElementMediaObj);
            }
        }
        $this->_em->flush();

        return;
    }

    /**
     * Function to get all  the image urls of elements for og data
     *
     * @param array $elementId The list of elements
     *
     * @return array 
     */
    public function getImageOGDetails($elementId)
    {
        $qb = $this->createQueryBuilder('A')
            ->select('GROUP_CONCAT(GI.filepath) AS imagenames')
            ->innerJoin('CommonUtilityBundle:FgGmItems', 'GI', 'WITH', 'A.item = GI.id')
            ->where('A.element IN ( :elementId )')
            ->andWhere('GI.type=:type')
            ->setParameter('elementId', $elementId)
            ->setParameter('type', 'image');

        $result = $qb->getQuery()->getOneOrNullResult();
        if (isset($result['imagenames'])) {
            $metaArray = array_unique(explode(',', $result['imagenames']));
        } else {
            $metaArray = array();
        }

        return $metaArray;
    }
}
