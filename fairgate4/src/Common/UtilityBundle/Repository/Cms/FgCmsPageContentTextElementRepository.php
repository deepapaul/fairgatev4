<?php 
/**
 * FgCmsPageContentTextElementRepository.
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author     	pitsolutions.ch
 * @version    	Fairgate V4
 *
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;
use Internal\GalleryBundle\Util\GalleryList;
use Common\UtilityBundle\Util\FgSettings;

/**
 * FgCmsPageContentTextElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContentTextElementRepository extends EntityRepository
{

    /**
     * save text element
     *
     * @param obj $container
     * @param array $textElementData
     * @param int $pageId
     * @param int $boxId
     * @param int $elementId
     *
     * @return id
     */
    private $textElementId;

    /**
     * save text element - create /edit
     *
     * @param object $container         container
     * @param array  $textElementData   textElementData
     * @param int    $pageId            pageId
     * @param int    $boxId             boxId
     * @param int    $sortOrder         sortOrder
     * @param int    $elementId         elementId
     * @return int
     */
    public function saveTextElement($container, $textElementData, $pageId, $boxId, $sortOrder, $elementId,$defaultClubLang)
    {
        $this->removeCache($container,$pageId);
        
        if (isset($textElementData['text'])) {
            $elementId = $this->saveText($container, $textElementData, $pageId, $boxId, $sortOrder, $elementId,$defaultClubLang);
        }
        if (isset($textElementData['slider_time'])) {
            $textElementObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($elementId);
            $textElementObj->setImageElementSliderTime($textElementData['slider_time']);
            $this->_em->flush();
        }
        if (isset($textElementData['media'])) {
            $textElement = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->findOneBy(array('element' => $elementId));
            $this->textElementId = $textElement->getId();
            $this->saveMedia($container, $textElementData['media'], $elementId, $this->textElementId);
        }

        return $elementId;
    }
    
    /**
     * Remove cache
     * 
     * @param object $container container
     * @param int    $pageId    page Id
     */
    private function removeCache($container, $pageId){        
        $clubCacheKey = $container->get('club')->get('clubCacheKey');
        $cachingEnabled = $container->getParameter('caching_enabled');
        if ($cachingEnabled) {
            $cacheArea = 'cms';
            $trailingPrefix = $pageId.'_textelement';
            $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
            $cacheDriver->setPrefixValueForDelete($clubCacheKey, $cacheArea, $trailingPrefix);
        }   
    }

    /**
     * The function to save the text to the database.
     *
     * @param object $container container
     * @param array $textArray  text array
     * @param array $pageId     page id
     * @param array $boxId      box id
     * @param array $sortOrder  sort order
     * @param int   $elementId  element Id
     *
     * @return void
     */
    public function saveText($container, $textArray, $pageId, $boxId, $sortOrder, $elementId,$defaultClubLang)
    {
        $clubId = $container->get('club')->get('id');
        $clubDefaultLanguage = $container->get('club')->get('club_default_lang');
        $contactId = $container->get('contact')->get('id');
        $clubLanguages = $container->get('club')->get('club_languages');
        //create element

        $this->textElementId = '';
        if ($elementId == 'new') {
            //update sortorder
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->reOrderSortPosition($boxId, $sortOrder);
            $elementId = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->insertNewElement($clubId, $boxId, $sortOrder, 'text');
        } else {
            $textElement = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->findOneBy(array('element' => $elementId));
            $this->textElementId = $textElement->getId();
        }

        $this->textElementId = $this->insertPageContentTextElement($textArray, $elementId, $clubDefaultLanguage, $this->textElementId);
        $textVersionId = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElementHistory')->insertTextElementHistory($textArray['text'], $contactId, $this->textElementId, $clubDefaultLanguage);

        //Save to i18n table
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElementHistoryI18n')->insertTextElementHistoryi18n($textArray['text'], $textVersionId, $clubLanguages,$this->textElementId,$defaultClubLang);

        //Update the article table
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->updateVersion($textVersionId, $this->textElementId);

        //Save position
        return $elementId;
    }

    /**
     * save text element media
     *
     * @param obj $container        container
     * @param array $mediaArray     media Array
     * @param int $elementId        element Id
     * @param int $textElementId    textElement Id
     *
     */
    public function saveMedia($container, $mediaArray, $elementId, $textElementId)
    {
        $club = $container->get('club');
        $contactId = $container->get('contact')->get('id');
        $clubId = $club->get('id');
        $clubLanguages = $club->get('club_languages');
        $clubDefaultLanguage = $club->get('club_default_lang');
        if (isset($mediaArray['images']) || isset($mediaArray['videos'])) {
            $deletedMediaArray = $mediaItemArray = array();

            foreach ($mediaArray as $type => $media) {
                foreach ($media as $items) {
                    //$itemStatus new/item/media
                    foreach ($items as $mediaIds => $eachItem) {
                        $eachItem['source'] = 'cmstextelement';
                        if (isset($eachItem['is_deleted']) && $eachItem['is_deleted'] == 1) {
                            //media to be deleted
                            $deletedMediaArray[] = $mediaIds;
                        } else {
                            $eachItem['type'] = ($type == 'images') ? 'IMAGE' : 'VIDEO';
                            if ($eachItem['type'] == 'VIDEO') {
                                //write video image to temp folder
                                $imageExtension = end(explode('.', $eachItem['videoThumbImg']));
                                $content = file_get_contents($eachItem['videoThumbImg']);
                                $fileName = md5(rand()) . '.' . $imageExtension;
                                $fp = fopen('uploads/temp/' . $fileName, 'w');
                                fwrite($fp, $content);
                                fclose($fp);
                                $eachItem['videoThumbImg'] = $fileName;
                            }
                            $mediaItemArray[] = $eachItem;
                        }
                    }
                }
            }

            $uploadedFileDetails = $this->moveMediaFileToFolder($container, $mediaItemArray, $clubId);
            //update filepath in $mediaItemArray
            foreach ($uploadedFileDetails['fileName'] as $key => $uploadedFilePath) {
                $mediaItemArray[$key]['filepath'] = $uploadedFilePath;
            }

            $articleMediaArray = $this->_em->getRepository('CommonUtilityBundle:FgGmItems')
                ->saveMediaItem($container, $mediaItemArray, $clubId, $contactId, $clubLanguages, $clubDefaultLanguage);

            if (count($articleMediaArray) > 0) {
                //article media insertion
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->saveTextElementMedia($articleMediaArray, $elementId, $textElementId);
            }
            //update sort-order in article media
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->updateTextElementMediaSortOrder($mediaItemArray);

            if (count($deletedMediaArray) > 0) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentMedia')->removeTextElementAttachment($deletedMediaArray);
            }
        }
        if (isset($mediaArray['position'])) {
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->updatePosition($mediaArray['position'], $elementId);
        }
    }

    /**
     * The function will save the media from the temp to to the club folder.
     *
     * @param object $container      container object
     * @param array  $mediaItemArray mediaItemArray
     * @param int    $clubId         clubId
     *
     * @return array uploaded File Details
     */
    private function moveMediaFileToFolder($container, $mediaItemArray, $clubId)
    {
        foreach ($mediaItemArray as $media) {
            if ($media['itemid'] == '' && $media['type'] == 'IMAGE') {
                $galleryImgArr[] = $media['filepath'];
                $orgImgNameArr[] = $media['fileName'];
            }
            if ($media['type'] == 'VIDEO' && ($media['videoThumbImg'])) {
                $galleryImgArr[] = $media['videoThumbImg'];
                $orgImgNameArr[] = $media['videoThumbImg'];
            }
        }
        $galleryListObj = new GalleryList($container, 'cmstextelement');

        return $galleryListObj->movetoclubgallery($galleryImgArr, $orgImgNameArr, $clubId);
    }

    /**
     * Function to create the text entry and text18n for text element
     * This function will also update the text-version of the text element
     *
     * @param array  $textArray           The array with the details to be saved
     * @param int    $elementId           The id of the element
     * @param string $clubDefaultLanguage the default language of the club
     * @param int    $textElementId       text element id if present
     *
     * @return int Id of the textelement version
     */
    public function insertPageContentTextElement($textArray, $elementId, $clubDefaultLanguage, $textElementId = '')
    {
        if ($textElementId == '') {
            $textObj = new \Common\UtilityBundle\Entity\FgCmsPageContentTextElement();
        } else {
            $textObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->find($textElementId);
        }
        $textObj->setElement($this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentElement')->find($elementId));

        (isset($textArray['text'][$clubDefaultLanguage]['text'])) ? $textObj->setText(str_replace('<script', '<scri&nbsp;pt', $textArray['text'][$clubDefaultLanguage]['text'])) : '';
        (isset($textArray['media']['position'])) ? $textObj->setPosition($textArray['media']['position']) : '';
        $this->_em->persist($textObj);
        $this->_em->flush();

        return $textObj->getId();
    }

    /**
     * update position
     *
     * @param int $position     position
     * @param int $elementId    elementId
     *
     * @return null
     */
    public function updatePosition($position, $elementId)
    {
        $textObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->findOneBy(array('element' => $elementId));
        $textObj->setPosition($position);
        $this->_em->persist($textObj);
        $this->_em->flush();

        return;
    }

    /**
     * update version
     *
     * @param int $textVersionId    textVersionId
     * @param int $textElementId    textElementId
     *
     * @return null
     */
    public function updateVersion($textVersionId, $textElementId)
    {
        $textObj = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElement')->find($textElementId);
        $textVersion = $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContentTextElementHistory')->find($textVersionId);
        $textObj->setVersion($textVersion);
        $textObj->setText($textVersion->getText());
        $this->_em->persist($textObj);

        $textVersion->setLastEditedDate(new \DateTime('now'));
        $this->_em->persist($textVersion);
        $this->_em->flush();
        return;
    }

    /**
     * Method to get element text section data in required format array.
     *
     * @param int $elementId elementId
     *
     * @return array $dataArray array of text section datas
     */
    public function getTextElement($elementId, $container)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $qb = $this->createQueryBuilder('A')
            ->select(" TEHI.lang as lang ,"
                . "TEHI.textLang as textLang, "
                . "TEH.text as defaultText, A.position,  PCE.imageElementSliderTime as sliderTime, "
                . " TEH.id as textElementId, (DATE_FORMAT(TEH.lastEditedDate, '$datetimeFormat')) as lastEditedDate ")
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentElement', 'PCE', 'WITH', 'PCE.id = A.element')    
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentTextElementHistory', 'TEH', 'WITH', 'TEH.id = A.version')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentTextElementHistoryI18n', 'TEHI', 'WITH', 'TEHI.id = TEH.id')
            ->where('A.element=:elementId')
            ->setParameters(array('elementId' => $elementId));
        $results = $qb->getQuery()->getArrayResult();
        $textElementData = (!empty($results)) ? $results[0] : array();

        //text section
        if (count($textElementData) > 0) {
            //text section
        
                foreach ($results as $data) {
                    $lang = $data['lang'];
                    $textArray = $data['textLang'];
                    $dataArray['textelement']['text'][$lang]['text'] = FgUtility::correctCkEditorUrl($textArray, $container, $container->get('club')->get('id'));
                }
            
            $dataArray['textelement']['text']['default']['text'] = FgUtility::correctCkEditorUrl($textElementData['defaultText'], $container, $container->get('club')->get('id'));
            $dataArray['textelement']['text']['default']['date'] = $textElementData['lastEditedDate'];
        }
        $dataArray['textelement']['media']['position'] = $textElementData['position'];
        $dataArray['textelement']['slider']['slider'] = $textElementData['sliderTime'];
       
        return $dataArray;
    }

    /**
     * Method to get media section data in required format array.
     *
     * @param int $container container
     * @param int $elementId elementId
     *
     * @return array $dataArray array of media section datas
     */
    public function getTextElementMedia($container, $elementId, $isPublic = false, $columnWidth = '')
    {
        $itemCondition = ($isPublic) ? " AND GI.scope ='PUBLIC'" : '';
        $clubId = $container->get('club')->get('id');
        $qb = $this->createQueryBuilder('A')
            ->select('AM.id AS mediaId, AM.sortOrder AS sortOrder, GI.id AS itemsId, GI.fileSize as mediaSize, GI.filepath as mediaFileName, A.position, '
                . 'GI.type, GI.filepath, GI.videoThumbUrl, GI.description as defaultDesc, '
                . "GROUP_CONCAT(GIL.lang SEPARATOR '|&&&|' ) as mediaLangArray, "
                . "GROUP_CONCAT(GIL.descriptionLang SEPARATOR '|&&&|' ) as mediaDescArray ")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentMedia', 'AM', 'WITH', 'A.id= AM.textElement')
            ->leftJoin('CommonUtilityBundle:FgGmItems', 'GI', 'WITH', 'AM.item = GI.id' . $itemCondition)
            ->leftJoin('CommonUtilityBundle:FgGmItemI18n', 'GIL', 'WITH', 'GIL.id = GI.id')
            ->where('A.element=:elementId')
            ->orderBy('AM.sortOrder', 'ASC')
            ->groupBy('AM.id')
            ->setParameters(array('elementId' => $elementId));

        $articleMedias = $qb->getQuery()->getArrayResult();
        $dataArray['textelement']['media']['position'] = $articleMedias[0]['position'];
        $folderWidth = $this->getTextElementFrondendDetails($columnWidth, $articleMedias[0]['position']);
        $imgSrc = FgUtility::getUploadFilePath($clubId, 'gallery');
        foreach ($articleMedias as $articleMedia) {
            $dataArray['textelement']['media']['position'] = $articleMedia['position'];
            if ($articleMedia['mediaId']) {
                $mediaLangArray = explode('|&&&|', $articleMedia['mediaLangArray']);
                $mediaDescArray = explode('|&&&|', $articleMedia['mediaDescArray']);
                if ($articleMedia['type'] == 'IMAGE') {
                    $dataArray['textelement']['media'][$articleMedia['mediaId']] = array('mediaId' => $articleMedia['mediaId'], 'itemId' => $articleMedia['itemsId'], 'imgsrc' => '/' . $imgSrc . '/' . $folderWidth . '/' . $articleMedia['mediaFileName'], 'imgsrc1920' => '/' . $imgSrc . '/width_1920/' . $articleMedia['mediaFileName'], 'sortOrder' => $articleMedia['sortOrder'], 'size' => $articleMedia['mediaSize'], 'description' => array(), 'type' => 'images', 'imageName' => $articleMedia['mediaFileName']);
                } elseif ($articleMedia['type'] == 'VIDEO') {
                    $dataArray['textelement']['media'][$articleMedia['mediaId']] = array('mediaId' => $articleMedia['mediaId'], 'itemId' => $articleMedia['itemsId'], 'imgsrc' => '/' . $imgSrc . '/' . $folderWidth . '/' . $articleMedia['filepath'], 'imgsrc1920' => '/' . $imgSrc . '/width_1920/' . $articleMedia['filepath'], 'sortOrder' => $articleMedia['sortOrder'], 'videoThumbUrl' => $articleMedia['videoThumbUrl'], 'description' => array(), 'type' => 'videos', 'videoThumbImg' => $articleMedia['filepath'], 'videoUrl' => $articleMedia['videoThumbUrl']);
                }
                if ($articleMedia['mediaLangArray'] && count($mediaLangArray) > 0) {
                    foreach ($mediaLangArray as $keyLang => $lang) {
                        $dataArray['textelement']['media'][$articleMedia['mediaId']]['description'][$lang] = stripslashes($mediaDescArray[$keyLang]);
                    }
                }
                $dataArray['textelement']['media'][$articleMedia['mediaId']]['description']['default'] = stripslashes($articleMedia['defaultDesc']);
            }
        }

        return $dataArray['textelement']['media'];
    }

    /**
     * Method to get media image width folder.
     *
     * @param int $columnWidth column width
     * @param string $position position
     *
     * @return array $dataArray array of media section datas
     */
    private function getTextElementFrondendDetails($columnWidth, $position)
    {
        if ($position == 'topSlider' || $position == 'bottomslider') {
            $folderWidth = ($columnWidth == 1) ? 'width_300' : (($columnWidth == 2 || $columnWidth == 3) ? 'width_580' : 'width_1140');
        } else {
            $folderWidth = ($columnWidth >= 5 || $columnWidth == 2) ? 'width_580' : 'width_300';
        }

        return $folderWidth;
    }

    /**
     * get text element history
     *
     * @param int $elementId    elementId
     * @param int $clubId       clubId
     *
     * @return array
     */
    public function getHistory($elementId, $clubId)
    {
        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $doctrineConfig->addCustomStringFunction('contactNameNoSort', 'Common\UtilityBundle\Extensions\FetchContactNameNoSort');
        $doctrineConfig->addCustomStringFunction('checkActiveContact', 'Common\UtilityBundle\Extensions\CheckActiveContact');

        $log = $this->createQueryBuilder('l')
            ->select("IDENTITY(e.textElement) as textelement, contactNameNoSort(IDENTITY(e.lastEditedBy) 0) as updatedBy, "
                . "checkActiveContact(e.lastEditedBy, :clubId) as activeContactId, "
                . "(DATE_FORMAT(e.lastEditedDate, '$datetimeFormat')) as lastEdited, e.text, fcc.isStealthMode as isStealth, "
                . "e.id as id ")
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentTextElementHistory', 'e', 'WITH', 'e.textElement = l.id')
            ->leftJoin('CommonUtilityBundle:FgCmContact', 'fcc', 'WITH', 'fcc.id = e.lastEditedBy')
            ->where('l.element=:elementId')
            ->andWhere('e.id != l.version')
            ->orderBy('e.lastEditedDate', 'DESC')
            ->setParameters(array('elementId' => $elementId, 'clubId' => $clubId));

        return $log->getQuery()->getArrayResult();
    }
  
    /**
     * Method to get element text section data in required format array.
     * 
     * @param object $container     container
     * @param int    $pageId        pageId
     * @param int    $elementIds    element Ids
     * 
     * @return array $dataArray     array of text section datas
     */
    public function getTextElementAjax($container,$pageId, $elementIds)
    {
        $clubService = $container->get('club');
        $contactId = $container->get('contact')->get('id');
        $superadmin = $container->get('contact')->get('isSuperAdmin');
        if (!$superadmin && $contactId) {
            // logged in contact and is not a superadmin
            $contactLang = $container->get('contact')->get('corrLang');
        } else {
            //is superadmin or is not logged in
            $contactLang = $clubService->get('default_lang');
        }
        
        $cacheLifeTime = $clubService->get('cacheLifeTime');
        $cachingEnabled = $container->getParameter('caching_enabled');
        $cacheKey = $this->cacheNaming($clubService,$pageId, 'textelement',$contactId); 
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();

        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        $qb = $this->createQueryBuilder('A')
            ->select("IDENTITY(A.element) as element, COALESCE(NULLIF(TEHI.textLang,'') , TEH.text) as description, A.position,  PCE.imageElementSliderTime as sliderTime, "
                . " (DATE_FORMAT(TEH.lastEditedDate, '$datetimeFormat')) as lastEditedDate ")
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentElement', 'PCE', 'WITH', 'PCE.id = A.element')    
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentTextElementHistory', 'TEH', 'WITH', 'TEH.id = A.version')
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentTextElementHistoryI18n', 'TEHI', 'WITH', 'TEHI.id = TEH.id and TEHI.lang =:lang')
            ->where('A.element IN (:elementIds)')
            ->setParameters(array('elementIds' => $elementIds,'lang'=>$contactLang));
        //$results = $qb->getQuery()->getArrayResult();
        
        $results = $cacheDriver->getCachedResult($qb, $cacheKey, $cacheLifeTime, $cachingEnabled);
        
         $dataArray = array();
        foreach ($results as $data) {
            $element = $data['element'];
            $dataArray["E_$element"]['element'] = $element;
            $dataArray["E_$element"]['text']['text'] = FgUtility::correctCkEditorUrl($data['description'], $container, $container->get('club')->get('id'));
            $dataArray["E_$element"]['text']['date'] = $data['lastEditedDate'];
            $dataArray["E_$element"]['slider']['slider'] = $data['sliderTime'];
        }
        
        $media = $this->getTextElementMediaAjax($dataArray,$container,$elementIds , $contactId, $contactLang,$pageId);
        
        return $media;
    }
    
    
    /**
     * get TextElement Media Ajax website -Method to get media section data in required format array.
     * @param type      $dataArray      dataArray
     * @param int       $container      container
     * @param array     $elementIds     elementIds
     * @param int       $contactId      contactId
     * @param string    $contactLang    contactLang
     * @param int       $pageId         pageId
     *  
     * @return array $dataArray array of media section datas
     */
    private function getTextElementMediaAjax($dataArray,$container, $elementIds, $contactId, $contactLang,$pageId)
    {
        $clubService = $container->get('club');
        $cacheLifeTime = $clubService->get('cacheLifeTime');
        $cachingEnabled = $container->getParameter('caching_enabled');
        $cacheKey = $this->cacheNaming($clubService,$pageId, 'textelementmedia',$contactId); 
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        
        $itemCondition = (!$contactId) ? " AND GI.scope ='PUBLIC'" : '';
        $clubId = $clubService->get('id');
        
        $qb = $this->createQueryBuilder('A')
            ->select('cc.widthValue as widthValue,IDENTITY(A.element) as element, AM.id AS mediaId, AM.sortOrder AS sortOrder, GI.id AS itemsId, GI.fileSize as mediaSize, GI.filepath as mediaFileName, A.position, '
                . "GI.type, GI.filepath, GI.videoThumbUrl, COALESCE(NULLIF(GIL.descriptionLang,''),GI.description) as description") 
            ->leftJoin('CommonUtilityBundle:FgCmsPageContentMedia', 'AM', 'WITH', 'A.id= AM.textElement')
            ->leftJoin('CommonUtilityBundle:FgGmItems', 'GI', 'WITH', 'AM.item = GI.id' . $itemCondition)
            ->leftJoin('CommonUtilityBundle:FgGmItemI18n', 'GIL', 'WITH', 'GIL.id = GI.id AND GIL.lang =:lang')
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentElement', 'ce', 'WITH', 'ce.id = A.element')
            ->innerJoin('CommonUtilityBundle:FgCmsPageContainerBox', 'cb', 'WITH', 'ce.box = cb.id')
            ->innerJoin('CommonUtilityBundle:FgCmsPageContainerColumn', 'cc', 'WITH', 'cb.column = cc.id')
            ->where('A.element IN (:elementId)')
            ->orderBy('AM.sortOrder', 'ASC')
            ->groupBy('AM.id')
            ->setParameters(array('elementId' => $elementIds,'lang' => $contactLang));

        //$result = $qb->getQuery()->getArrayResult();
        $result = $cacheDriver->getCachedResult($qb, $cacheKey, $cacheLifeTime, $cachingEnabled);
        
        $imgSrc = FgUtility::getUploadFilePath($clubId, 'gallery');
        
        foreach ($result as $media) {
            $element = $media['element'];
            $dataArray["E_$element"]['position'] = $media['position'];
            $dataArray["E_$element"]['columnWidth'] = $media['widthValue'];
            $folderWidth = $this->getTextElementFrondendDetails($media['widthValue'],$media['position']);
            if ($media['mediaId']) {
                if ($media['type'] == 'IMAGE') {
                    $dataArray["E_$element"]['media'][] = array('description' => stripslashes($media['description']),'mediaId' => $media['mediaId'], 'itemId' => $media['itemsId'], 'imgsrc' => '/' . $imgSrc . '/' . $folderWidth . '/' . $media['mediaFileName'], 'imgsrc1920' => '/' . $imgSrc . '/width_1920/' . $media['mediaFileName'], 'sortOrder' => $media['sortOrder'], 'size' => $media['mediaSize'], 'type' => 'images', 'imageName' => $media['mediaFileName']);
                    $dataArray["E_$element"]['ogtag'][] = $media['mediaFileName'];
                } elseif ($media['type'] == 'VIDEO') {
                    $dataArray["E_$element"]['media'][] = array('description' => stripslashes($media['description']),'mediaId' => $media['mediaId'], 'itemId' => $media['itemsId'], 'imgsrc' => '/' . $imgSrc . '/' . $folderWidth . '/' . $media['filepath'], 'imgsrc1920' => '/' . $imgSrc . '/width_1920/' . $media['filepath'], 'sortOrder' => $media['sortOrder'], 'videoThumbUrl' => $media['videoThumbUrl'], 'type' => 'videos', 'videoThumbImg' => $media['filepath'], 'videoUrl' => $media['videoThumbUrl']);
                }
            }
        }

        return $dataArray;
    }
    /**
     * caching name
     * 
     * @param object $clubService   clubService
     * @param int    $pageId        pageId
     * @param int    $trailingName  trailingName
     * @param int    $contactId     contactId
     */
    private function cacheNaming($clubService,$pageId,$trailingName, $contactId){
        $clubCacheKey = $clubService->get('clubCacheKey');
        $prefixKey = str_replace('{{cache_area}}', 'cms', $clubCacheKey);
        
        if (!$contactId) {           
            $cacheKey = $prefixKey.$pageId.'_'.$trailingName;
        } else {            
            $cacheKey = $prefixKey.$pageId.'_'.$trailingName.$contactId; 
        }
        return $cacheKey;
    }

}
