<?php

/**
 * FgCmsPageContainerColumnRepository 
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author      pitsolutions.ch
 * @version     Fairgate V4
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCmsPageContainerColumn;

/**
 * FgCmsPageContainerColumnRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContainerColumnRepository extends EntityRepository
{

    /**
     * Function to isert container columns according to count
     *
     * @param int $pageContainerId
     * @param int $columnCount
     * @return boolean
     */
    public function insertContainerColumns($pageContainerId, $columnCount, $currentSortValue = '', $isDefault = 0)
    {
        $pageContainerObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainer', $pageContainerId);

        // Add container columns according to count
        for ($i = 1; $i <= $columnCount; $i++) {
            $fgCmsPageContainerColumn = new FgCmsPageContainerColumn();
            $fgCmsPageContainerColumn->setContainer($pageContainerObj);
            if ($currentSortValue != '') {
                $fgCmsPageContainerColumn->setSortOrder($currentSortValue + 1);
                $currentSortValue++;
            } else {
                $fgCmsPageContainerColumn->setSortOrder($i);
            }
            $widthValue = 1;
            if ($isDefault == 1) {
                //New page: First box should have maximum width fair2356 kanban
                if ($pageContainerObj->getPage()->getType() == 'page') {
                    $widthValue = ($pageContainerObj->getPage()->getSidebarType() == 'wide') ? 4 : (($pageContainerObj->getPage()->getSidebarType() == 'small') ? 5 : 6);
                } else {
                    $widthValue = ($pageContainerObj->getPage()->getType() == 'footer') ? 6 : (($pageContainerObj->getPage()->getSidebarType() == 'wide') ? 2 : 1);
                }
            }

            $fgCmsPageContainerColumn->setWidthValue($widthValue);
            $this->_em->persist($fgCmsPageContainerColumn);
            $this->_em->flush();

            // Add default one box for each column
            $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContainerBox')->addNewContainerBox($fgCmsPageContainerColumn, 1);
        }

        return true;
    }

    /**
     * Get container column details
     *
     * @param Int $containerId Container Id
     * @param Ont $order       Sort order
     *
     * @return Aray
     */
    public function getContainerColumnDetails($containerId, $order = 'ASC')
    {
        $qb = $this->createQueryBuilder('pcc');
        $qb->select('pcc.id as columnId', 'pcc.widthValue', 'pcc.sortOrder')
            ->where('pcc.container=:containerId')
            ->orderBy('pcc.sortOrder', $order)
            ->setParameter('containerId', $containerId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Function to change width of a column
     *
     * @param Int $columnId Column id
     * @param Int $width    New width value
     *
     * @return boolean
     */
    public function changeWidthValue($columnId, $width)
    {
        $fgCmsPageContainerColumn = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerColumn', $columnId);
        $fgCmsPageContainerColumn->setWidthValue($width);
        $this->_em->persist($fgCmsPageContainerColumn);
        $this->_em->flush();

        return true;
    }

    /**
     * Function to add new column with custom width value
     *
     * @param int $pageContainerId Container id
     * @param int $sortValue       Sort value
     * @param int $widthValue      Width value
     *
     * @return boolean
     */
    public function addNewCustomColumn($pageContainerId, $sortValue, $widthValue)
    {
        $pageContainerObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainer', $pageContainerId);
        $fgCmsPageContainerColumn = new FgCmsPageContainerColumn();
        $fgCmsPageContainerColumn->setContainer($pageContainerObj);
        $fgCmsPageContainerColumn->setSortOrder($sortValue);
        $fgCmsPageContainerColumn->setWidthValue($widthValue);
        $this->_em->persist($fgCmsPageContainerColumn);
        $this->_em->flush();
        // Add default one box for each column
        $this->_em->getRepository('CommonUtilityBundle:FgCmsPageContainerBox')->addNewContainerBox($fgCmsPageContainerColumn, 1);

        return true;
    }

    /**
     * Get container column-box details
     *
     * @param Int $containerId Container Id
     * @param Ont $order       Sort order
     *
     * @return Aray
     */
    public function getContainerBoxDetails($containerId, $order = 'ASC')
    {
        $qb = $this->createQueryBuilder('pcc');
        $qb->select('pcb.id as boxId', 'pcb.sortOrder as boxOrder', 'pcc.id as columnId', 'pcc.sortOrder as columnOrder', 'pcc.widthValue as widthValue')
            ->leftJoin("CommonUtilityBundle:FgCmsPageContainerBox", "pcb", "WITH", "pcb.column = pcc.id ")
            ->where('pcc.container=:containerId')
            ->orderBy('pcc.sortOrder', $order)
            ->addOrderBy('pcb.sortOrder', $order)
            ->setParameter('containerId', $containerId);

        $resultArray = $qb->getQuery()->getArrayResult();
        $finalArray = array();
        $previousColumnId = '';
        foreach ($resultArray as $result) {
            if ($previousColumnId != $result['columnId']) {
                $finalArray[$result['columnId']]['columnOrder'] = $result['columnOrder'];
                $finalArray[$result['columnId']]['widthValue'] = $result['widthValue']; //for sidecolumn
            }
            $finalArray[$result['columnId']]['box'][$result['boxId']]['boxOrder'] = $result['boxOrder'];
        }

        return $finalArray;
    }

    /**
     * This function is used to get the details of portrait elements inside a page container
     * 
     * @param int $clubId      the club id
     * @param int $containerId The page container id
     * 
     * @return array $portraitDetails The portrait details
     */
    public function getPortraitElementsInAContainer($clubId, $containerId)
    {
        $qb = $this->createQueryBuilder('PCC')
            ->select('PCC.widthValue as pageContainerSize, PCE.id AS elementId, IDENTITY(PCE.table) AS portraitId, CCT.portraitPerRow AS portraitsPerRow, CPC.id AS portraitContainerId, CPC.size as portraitContainerSize')
            ->innerJoin("CommonUtilityBundle:FgCmsPageContainerBox", "PCB", "WITH", "PCB.column = PCC.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContentElement", "PCE", "WITH", "PCE.box = PCB.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContentType", "PCT", "WITH", "PCT.type = 'portrait-element' ")
            ->innerJoin("CommonUtilityBundle:FgCmsContactTable", "CCT", "WITH", "CCT.id = PCE.table ")
            ->innerJoin("CommonUtilityBundle:FgCmsPortraitContainer", "CPC", "WITH", "CPC.portrait = CCT.id ")
            ->where('PCC.container=:containerId')
            ->andWhere('PCE.club=:clubId')
            ->andWhere('PCE.isDeleted=0')
            ->orderBy('PCC.sortOrder', 'ASC')
            ->addOrderBy('PCB.sortOrder', 'ASC')
            ->addOrderBy('PCE.sortOrder', 'ASC')
            ->setParameters(array('containerId' => $containerId, 'clubId' => $clubId));
        $portraitDetails = $qb->getQuery()->getArrayResult();

        return $portraitDetails;
    }

    /**
     * This function is used to get the details of article elements inside a page container
     * 
     * @param int $clubId      the club id
     * @param int $containerId The page container id
     * 
     * @return array $articleDetails The article details
     */
    public function getArticleElementsInAContainer($clubId, $containerId)
    {
        $qb = $this->createQueryBuilder('PCC')
            ->select('PCC.widthValue as pageContainerSize, PCE.id AS elementId, PCE.articlePerRow AS articlesPerRow')
            ->innerJoin("CommonUtilityBundle:FgCmsPageContainerBox", "PCB", "WITH", "PCB.column = PCC.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContentElement", "PCE", "WITH", "PCE.box = PCB.id ")
            ->innerJoin("CommonUtilityBundle:FgCmsPageContentType", "PCT", "WITH", "PCT.type = 'articles' ")
            ->where('PCC.container=:containerId')
            ->andWhere('PCE.club=:clubId')
            ->andWhere('PCE.isDeleted=0')
            ->orderBy('PCC.sortOrder', 'ASC')
            ->addOrderBy('PCB.sortOrder', 'ASC')
            ->addOrderBy('PCE.sortOrder', 'ASC')
            ->setParameters(array('containerId' => $containerId, 'clubId' => $clubId));
        $articleDetails = $qb->getQuery()->getArrayResult();

        return $articleDetails;
    }
}
