<?php 
/**
 * FgCmsPageContainerRepository 
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author      pitsolutions.ch
 * @version     Fairgate V4
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCmsPageContainer;

/**
 * FgCmsPageContainerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContainerRepository extends EntityRepository
{

    /**
     * Function to insert new container for a page
     *
     * @param int $pageId
     * @param int $containerSortOrder
     *
     * @return int
     */
    public function insertNewContainer($pageId, $containerSortOrder)
    {
        $pageObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPage', $pageId);

        $fgCmsPageContainer = new FgCmsPageContainer();
        $fgCmsPageContainer->setPage($pageObj);
        $fgCmsPageContainer->setSortOrder($containerSortOrder);
        $this->_em->persist($fgCmsPageContainer);
        $this->_em->flush();

        return $fgCmsPageContainer->getId();
    }

    /**
     * Function to delete a container
     *
     * @param int $containerId Container id
     *
     * @return boolean
     */
    public function removeContainer($containerId)
    {
        $containerObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainer', $containerId);

        if ($containerObj) {
            $this->_em->remove($containerObj);
            $this->_em->flush();
        }

        return true;
    }

    /**
     * Function to set sort value of each container while sorting containers
     *
     * @param Array $containerArray Container details
     *
     * @return boolean
     */
    public function sortPageContainers($containerArray)
    {
        foreach ($containerArray as $containerKey => $containerValue) {
            $containerObject = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainer', $containerKey);
            $containerObject->setSortOrder($containerValue['sortOrder']);
            $this->_em->persist($containerObject);
        }
        $this->_em->flush();

        return true;
    }

    /**
     * Function is used to delete a perticular column and move the boxes
     * inside that content to the previous column according to the column count
     *
     * @param Array  $boxDetailsValue  All box details inside a column
     * @param Int    $columnId         Delete column id
     * @param Object $newColumnObject  Column Object
     * @param Int    $lastBoxSortOrder Box sort order
     *
     * @return boolean
     */
    public function deleteColumnAndMoveBoxes($boxDetailsValue, $columnId, $newColumnObject, $lastBoxSortOrder)
    {
        foreach ($boxDetailsValue as $boxKey => $boxValue) {
            if ($boxKey != '') {
                $lastBoxSortOrder++;
                $boxObject = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxKey);
                $boxObject->setColumn($newColumnObject);
                $boxObject->setSortOrder($lastBoxSortOrder);
                $this->_em->persist($boxObject);
            }
        }
        $this->_em->flush();
        $deleteColumnObject = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerColumn', $columnId);
        if ($deleteColumnObject) {
            $this->_em->remove($deleteColumnObject);
            $this->_em->flush();
        }

        return $lastBoxSortOrder;
    }
}
