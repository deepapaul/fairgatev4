<?php 
/**
 * FgCmsPageContainerBoxRepository 
 *
 * @package 	CommonUtilityBundle
 * @subpackage 	Repository
 * @author      pitsolutions.ch
 * @version     Fairgate V4
 */
namespace Common\UtilityBundle\Repository\Cms;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCmsPageContainerBox;

/**
 * FgCmsPageContainerBoxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmsPageContainerBoxRepository extends EntityRepository
{

    /**
     * Function to add new box inside a column of a container
     *
     * @param Object $fgCmsPageContainerColumn Column object
     * @param int    $sortValue Sort position
     *
     * @return int
     */
    public function addNewContainerBox($fgCmsPageContainerColumn, $sortValue)
    {
        $fgCmsPageContainerBox = new FgCmsPageContainerBox();
        $fgCmsPageContainerBox->setColumn($fgCmsPageContainerColumn);
        $fgCmsPageContainerBox->setSortOrder($sortValue);
        $this->_em->persist($fgCmsPageContainerBox);
        $this->_em->flush();

        return $fgCmsPageContainerBox->getId();
    }

    /**
     * Function to delete a box insid a container
     *
     * @param int $boxId Box id
     *
     * @return boolean
     */
    public function removeContainerBox($boxId)
    {
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxId);

        if ($boxObj) {
            $this->_em->remove($boxObj);
            $this->_em->flush();
        }

        return true;
    }

    /**
     * Function to update sort position if a new box is moved to the column. So need to increase the sort order
     * 
     * @param int $fromColumnId From column id
     * @param int $toColumnId   To column id
     * @param int $sortOrder    Sort position
     * 
     * @return int
     */
    public function updateBoxSortPostion($fromColumnId, $toColumnId, $newSortOrder, $currentSortVal = '')
    {
        $qb = $this->createQueryBuilder('pcb');
        if ($fromColumnId == $toColumnId) {
            if ($newSortOrder > $currentSortVal) {

                return $this->updateBoxSortPostionPartOne($qb, $toColumnId, $newSortOrder);
            } else {

                return $this->updateBoxSortPostionPartTwo($qb, $toColumnId, $newSortOrder);
            }
        } else {

            return $this->updateBoxSortPostionPartThree($qb, $toColumnId, $newSortOrder);
        }
    }

    /**
     * Function to update sort position if a new box is moved to the column. So need to increase the sort order - Part three
     * 
     * @param object $qb           Query builder object
     * @param int    $toColumnId   To column id
     * @param int    $newSortOrder New sort value
     * 
     * @return int
     */
    public function updateBoxSortPostionPartThree($qb, $toColumnId, $newSortOrder)
    {
        $qb->select('pcb.id as boxId', 'pcb.sortOrder as boxOrder', 'pcc.id as columnId')
            ->leftJoin('pcb.column', 'pcc')
            ->where('pcb.column=:columnId')
            ->andWhere('pcb.sortOrder >=:sortOrder')
            ->orderBy('pcb.sortOrder', 'ASC')
            ->setParameters(array('columnId' => $toColumnId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $result['boxId']);
                $boxObj->setSortOrder($result['boxOrder'] + 1);
                $this->_em->persist($boxObj);
            }
            $this->_em->flush();
        }

        return $newSortOrder;
    }

    /**
     * Function to update sort position if a new box is moved to the column. So need to increase the sort order - Part two
     * 
     * @param object $qb           Query builder object
     * @param int    $toColumnId   To column id
     * @param int    $newSortOrder New sort value
     * 
     * @return int
     */
    public function updateBoxSortPostionPartTwo($qb, $toColumnId, $newSortOrder)
    {
        $qb->select('pcb.id as boxId', 'pcb.sortOrder as boxOrder', 'pcc.id as columnId')
            ->leftJoin('pcb.column', 'pcc')
            ->where('pcb.column=:columnId')
            ->andWhere('pcb.sortOrder >=:sortOrder')
            ->orderBy('pcb.sortOrder', 'ASC')
            ->setParameters(array('columnId' => $toColumnId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $result['boxId']);
                $boxObj->setSortOrder($result['boxOrder'] + 1);
                $this->_em->persist($boxObj);
            }
            $this->_em->flush();
        }

        return $newSortOrder;
    }

    /**
     * Function to update sort position if a new box is moved to the column. So need to increase the sort order - Part One
     * 
     * @param object $qb           Query builder object
     * @param int    $toColumnId   To column id
     * @param int    $newSortOrder New sort value
     * 
     * @return int
     */
    public function updateBoxSortPostionPartOne($qb, $toColumnId, $newSortOrder)
    {
        $qb->select('pcb.id as boxId', 'pcb.sortOrder as boxOrder', 'pcc.id as columnId')
            ->leftJoin('pcb.column', 'pcc')
            ->where('pcb.column=:columnId')
            ->andWhere('pcb.sortOrder >:sortOrder')
            ->orderBy('pcb.sortOrder', 'ASC')
            ->setParameters(array('columnId' => $toColumnId, 'sortOrder' => $newSortOrder));

        $resultArray = $qb->getQuery()->getArrayResult();

        if (!empty($resultArray)) {
            foreach ($resultArray as $result) {
                $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $result['boxId']);
                $boxObj->setSortOrder($result['boxOrder'] + 1);
                $this->_em->persist($boxObj);
            }
            $this->_em->flush();
        } else {
            return $newSortOrder + 1;
        }

        return $newSortOrder + 1;
    }

    /**
     * Function to move and update box and sort position
     *
     * @param array $boxDetails Box details array
     *
     * @return boolean
     */
    public function moveBoxAndUpdatePosition($boxDetails)
    {
        $boxObj = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerBox', $boxDetails['boxId']);
        $columnObject = $this->_em->getReference('CommonUtilityBundle:FgCmsPageContainerColumn', $boxDetails['toColumn']);
        $boxObj->setColumn($columnObject);
        $boxObj->setSortOrder($boxDetails['sortOrder']);
        $this->_em->persist($boxObj);
        $this->_em->flush();

        return true;
    }

    /**
     * Function to get full container details
     *
     * @param int $pageContainerId    Container id
     * @param int $containerSortOrder Container sort order
     *
     * @return array
     */
    public function getContainerDetails($pageContainerId, $containerSortOrder = '')
    {
        $qb = $this->createQueryBuilder('pcb');
        $qb->select('pcb.id as boxId', 'pcb.sortOrder as boxOrder', 'pcc.id as columnId', 'pcc.sortOrder as columnOrder', 'pcc.widthValue')
            ->leftJoin('pcb.column', 'pcc')
            ->leftJoin('pcc.container', 'pc')
            ->where('pcc.container=:containerId')
            ->orderBy('pcc.sortOrder', 'ASC')
            ->addOrderBy('pcb.sortOrder', 'ASC')
            ->setParameter('containerId', $pageContainerId);

        $resultArray = $qb->getQuery()->getArrayResult();
        $finalArray = array();
        $previousColumnId = '';
        $finalArray['container'][$pageContainerId]['containerId'] = $pageContainerId;
        $finalArray['container'][$pageContainerId]['sortOrder'] = $containerSortOrder;
        foreach ($resultArray as $result) {
            if ($previousColumnId != $result['columnId']) {
                $finalArray['container'][$pageContainerId]['columns'][$result['columnId']]['columnId'] = $result['columnId'];
                $finalArray['container'][$pageContainerId]['columns'][$result['columnId']]['sortOrder'] = $result['columnOrder'];
                $finalArray['container'][$pageContainerId]['columns'][$result['columnId']]['widthValue'] = "{$result['widthValue']}";
            }
            $finalArray['container'][$pageContainerId]['columns'][$result['columnId']]['box'][$result['boxId']]['boxId'] = $result['boxId'];
            $finalArray['container'][$pageContainerId]['columns'][$result['columnId']]['box'][$result['boxId']]['sortOrder'] = $result['boxOrder'];
        }

        return $finalArray;
    }
}
