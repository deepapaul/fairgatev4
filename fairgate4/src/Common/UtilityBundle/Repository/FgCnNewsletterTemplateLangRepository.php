<?php
/** 
 * FgCnNewsletterTemplateLangRepository
 * 
 * This Repository is used for handling functions for Newsletter template languages 
 * 
 * @package    CommonUtilityBundle 
 * @subpackage Repository 
 * @author     pitsolutions.ch 
 * @version    Fairgate V4 
 * 
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgCnNewsletterTemplateLang;

/**
 * FgCnNewsletterTemplateLangRepository
 *
 * This class was generated by the Doctrine ORM for handling functions for Newsletter template languages
 */
class FgCnNewsletterTemplateLangRepository extends EntityRepository {
   
    /**
     * Method to update newsletter template language
     * 
     * @param object $templateObj   template Object
     * @param array  $languageArray language array to update
     * 
     * @return boolean
     */
    public function updateTemplateLanguage($templateObj, $languageArray) {
        $this->deleteTemplateLanguage($templateObj->getId());  
        $this->insertTemplateLanguage($templateObj, $languageArray); 
        
        return true;
    }
    
    /**
     * Method to delete languages of a particulat template
     * 
     * @param int $templateId
     */
    private function deleteTemplateLanguage($templateId) {        
        $qb = $this->createQueryBuilder('TL')
                    ->delete()
                    ->where('TL.template=:templateId')
                    ->setParameter('templateId', $templateId);
        $qb->getQuery()->execute();        
    }
    
    /**
     * Method to insert languages of a template
     * 
     * @param object $templateObj   template Object
     * @param array  $languageArray language array to update
     */
    private function insertTemplateLanguage($templateObj, $languageArray) {        
        foreach($languageArray as $language) {
            $templateLangObj = new FgCnNewsletterTemplateLang();          
            $templateLangObj->setLanguageCode($language)
                    ->setTemplate($templateObj);
            $this->_em->persist($templateLangObj);
        }        
        $this->_em->flush();
    }
    
    /**
     * Method to get languages as comma separated string of a template
     * 
     * @param int $templateId
     * 
     * @return string
     */
    public function getTemplateLanguages($templateId) {
        $qb = $this->createQueryBuilder('TL')
                    ->select("GROUP_CONCAT(TL.languageCode) as langs")
                    ->where('TL.template=:templateId')
                    ->setParameter('templateId', $templateId);
        $result = $qb->getQuery()->getArrayResult(); 
       
        return $result[0]['langs'];
    }
}
