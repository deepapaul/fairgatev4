<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgSettings;
use Common\UtilityBundle\Entity\FgCmMembershipHistory;

/**
 * FgCmMembershipRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmMembershipHistoryRepository extends EntityRepository
{

    /**
     * Function to get the last two leaving dates if any.
     *
     * @param int    $contactId Contact Id
     * @param int    $clubId    Club Id
     * @param string $dateType  JoinigDate/LeavingDate
     *
     * @return array $leavingDates Last two leaving dates
     */
    public function getLastLeavingDates($contactId = '', $clubId, $dateType = 'leavingDate')
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.' . $dateType . ' AS dateArr')
            ->where('m.contact= :contactId')
            ->andWhere('m.membershipClub =:clubId')
            ->addOrderBy('m.joiningDate', 'DESC')
            ->setMaxResults(2)
            ->setParameter('clubId', $clubId)
            ->setParameter('contactId', $contactId);
        $result = $qb->getQuery()->getArrayResult();
        $leavingDates = array();

        foreach ($result as $val) {
            if ($val['dateArr'] != '') {
                $leavingDates[] = $val['dateArr']->format(FgSettings::getPhpDateFormat());
            }
        }

        return $leavingDates;
    }

    /**
     * Function to update membership history of contact on joining/leaving date update.
     *
     * @param int    $contactId ContactId
     * @param string $dateType  joining_date/leaving_date
     * @param date   $newDate
     * @param string $sortOrder ASC/DESC
     *
     * @return
     */
    public function updateMembershipHistoryOfContact($contactId = '', $dateType = 'leaving_date', $newDate = '', $sortOrder = 'DESC')
    {
        if ($contactId != '' && $newDate != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_membership_history m SET m.' . $dateType . " = '" . $newDate . "' WHERE m.contact_id =:contactId  ORDER BY m." . $dateType . ' ' . $sortOrder . '  LIMIT 1';
            $conn->executeQuery($sql, array(':contactId' => $contactId));
        }

        return;
    }

    /**
     * function to get the memberaship history.
     *
     * @param int  $membershipId the membership category id
     * @param int  $contactId    the contact id
     * @param date $fromDate     the joining date
     * @param date $toDate       the leaving date
     *
     * @return array
     */
    public function getMembershipLogs($from = 'delete', $membershipId, $contactId, $fromDate = '', $toDate = '')
    {
        $where = ($from == 'delete') ? 'm.membership_id' : 'm.id';
        $fromwhere = '';
        $towhere = '';
        if ($fromDate != '') {
            $fromDate = strtotime($fromDate);
            $fromDate = date('Y-m-d', $fromDate);
            $fromwhere = "and DATE(m.joining_date) = '$fromDate' ";
        }
        if ($toDate != '') {
            $toDate = strtotime($toDate);
            $toDate = date('Y-m-d', $toDate);
            $towhere = "and DATE(m.leaving_date) = '$toDate' ";
        }
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT  m.id,m.joining_date,m.leaving_date FROM fg_cm_membership_history m WHERE  m.contact_id=:contactId and  {$where }=:membershipId $fromwhere $towhere";
        $result = $conn->fetchAll($sql, array('contactId' => $contactId, 'membershipId' => $membershipId));

        return $result[0];
    }

    /**
     * function to get the memberaship history by contactid.
     *
     * @param int  $membershipId the membership category id
     * @param int  $contactId    the contact id
     * @param date $toDate       the leaving date
     *
     * @return array
     */
    public function getContactMembershipByDate($contactId, $clubid, $toDate = '', $operator = '<=')
    {
        $fromwhere = '';
        $towhere = '';

        if ($toDate != '') {
            $toDate = strtotime($toDate);
            $toDate = date('Y-m-d', $toDate);
            $towhere = "and DATE(m.leaving_date) $operator '$toDate' ";
        }
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT  * FROM fg_cm_membership_history m WHERE  m.contact_id=$contactId and m.membership_club_id=$clubid and m.membership_type='club'   $towhere order by id desc limit 0,1";
        $result = $conn->fetchAll($sql);

        return $result[0];
    }

    /**
     * function to get the log id of current membership id of the contact.
     *
     * @param int $currentMemId the current membership id
     * @param int $contactId    the contact id
     *
     * @return int
     */
    public function getCurrentMembershipLogId($currentMemId, $contactId)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.id AS logId')
            ->where('m.contact= :contactId')
            ->andWhere('m.membership =:membershipId')
            // ->andWhere("m.leavingDate IS NULL")
            ->addOrderBy('m.joiningDate', 'DESC')
            ->setMaxResults(1)
            ->setParameter('contactId', $contactId)
            ->setParameter('membershipId', $currentMemId);
        $result = $qb->getQuery()->getArrayResult();

        return $result[0]['logId'];
    }

    /**
     * @param type $joingDate
     * @param type $leavingDate
     * @param type $membershipId
     */
    public function addMembershipLog($joiningDate, $leavingDate, $membershipId, $contactId, $clubId, $currentcontact, $contactName, $type)
    {
        $type = ($type == 'fed_membership') ? 'federation' : 'club';
        $joiningDate = \DateTime::createFromFormat(FgSettings::getPhpDateFormat(), $joiningDate);
        $joiningDate = $joiningDate->format('Y-m-d H:i:s');
        $leavingDate = \DateTime::createFromFormat(FgSettings::getPhpDateFormat(), $leavingDate);
        $leavingDate = $leavingDate->format('Y-m-d H:i:s');
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'INSERT INTO `fg_cm_membership_history` (`id`, `contact_id`, `membership_club_id`, `membership_id`, `membership_type`, `joining_date`, `leaving_date`, `changed_by`) '
            . "VALUES (NULL, $contactId, $clubId, $membershipId, '$type', '$joiningDate', '$leavingDate', $currentcontact)";
        $conn->executeQuery($sql);
        $lastId = $conn->fetchAll('SELECT LAST_INSERT_ID() AS lastId');
        $lastId = $lastId[0]['lastId'];
        $sql = 'INSERT INTO `fg_cm_membership_log` (`club_id`, `contact_id`, `membership_id`, `date`, `kind`, `field`,`value_before`,`value_after`,`changed_by`) '
            . "VALUES ($clubId, $contactId, $membershipId, '$leavingDate', 'assigned contacts','','$contactName','',$currentcontact),"
            . "($clubId, $contactId, $membershipId, '$joiningDate', 'assigned contacts','','','$contactName',$currentcontact)";
        $conn->executeQuery($sql);

        return $lastId;
    }

    /**
     * @param type $contactId
     * @param type $clubId
     * @param type $clubType
     *
     * @return int
     */
    public function getMaxofJoiningDate($contactIds, $clubId, $clubType)
    {
        $qs = $this->createQueryBuilder('m')
            ->select('MAX(m.joiningDate) as maxDate, COUNT(c.id) as memberId')
            ->leftJoin('m.contact', 'c')
            ->where("m.contact IN($contactIds)");
        if ($clubType == 'federation' || $clubType == 'sub_federation') {
            $qs->andWhere("c.fedMembershipCat != '' OR c.fedMembershipCat IS NOT NULL");
        } elseif ($clubType == 'sub_federation_club' || $clubType == 'federation_club' || $clubType == 'standard_club') {
            $qs->andWhere("c.clubMembershipCat != '' OR c.clubMembershipCat IS NOT NULL");
        }

        $result = $qs->getQuery()->getResult();

        return $result[0];
    }

    /**
     * function to check valid membershi period for contact log.
     *
     * @param date $joiningDate
     * @param date $leavingDate
     * @param int  $contactId
     * @param int  $clubId
     *
     * @return int error exists then 1 else 0
     */
    public function checkValidMembershipPeriod($joiningDate, $leavingDate, $contactId, $clubId, $membershipHistoryId = 0, $field = 'default')
    {
        $errorexists = 0;
        $newjoiningDate = 0;
        $newleavingDate = 0;
        if ($field != 'leaving_date') {
            $joiningDate = \DateTime::createFromFormat(FgSettings::getPhpDateFormat(), $joiningDate);
            $newjoiningDate = $joiningDate->format('U');
            $joiningDate = $joiningDate->format('Y-m-d') . ' 00:00:00';
            $extracond1 = "OR ( ('" . $joiningDate . "' < m.joining_date ) AND  ('" . $joiningDate . "' < m.leaving_date ) AND ('" . $leavingDate . "'  > m.joining_date ) AND  ('" . $leavingDate . "' > m.leaving_date ))";
        }
        if ($field != 'joining_date') {
            $leavingDate = \DateTime::createFromFormat(FgSettings::getPhpDateFormat(), $leavingDate);
            $newleavingDate = $leavingDate->format('U');
            $leavingDate = $leavingDate->format('Y-m-d') . ' 00:00:00';
            $extracond1 = "OR ( ('" . $joiningDate . "' < m.joining_date ) AND  ('" . $joiningDate . "' < m.leaving_date ) AND ('" . $leavingDate . "'  > m.joining_date ) AND  ('" . $leavingDate . "' > m.leaving_date ))";
        }
        $extracond1 = '';
        $currentDate = date('d.m.Y');
        $currentDate1 = \DateTime::createFromFormat('d.m.Y', $currentDate);
        $currentDate = $currentDate1->format('Y-m-d H:i:s');
        $newcurrentDate = $currentDate1->format('U');
        
        //check if the joining date /leaving date is greater than today 
        //check if joining date is greater than leaving date
        if (($newjoiningDate > $newcurrentDate) || ($newleavingDate > $newcurrentDate) || ($newjoiningDate > $newleavingDate && $newleavingDate != '')) {
            $errorexists = 1;
        }
        $extracond = '';
        $joiningDate2 = strtotime($joiningDate);
        $joiningDate2 = date('Y-m-d', $joiningDate2);
        $joiningDate2 = $joiningDate2 . ' 00:00:00';
        $leavingDate2 = strtotime($leavingDate);
        $leavingDate2 = date('Y-m-d', $leavingDate2);
        $leavingDate2 = $leavingDate2 . ' 00:00:00';
        
        //for inline edit - exclude the membership history entry than is being edited from validation
        // add entry membershiphistoryid passed wil be zero
        if ($membershipHistoryId) {
            $extracond = ' and m.id !=' . $membershipHistoryId;
        }
        /**
         * two case
         * case 1 when existing leaving dates in membershiphistorytable is null then
         *        check if new joining date or new leaving date is greater than existing joining date
         * case 2 when existing leaving dates in membershiphistorytable is not empty
         *        check if new new joining date or newleaving date is between existing joining and existing leaving date
         *          or existing joining date/leaving date is between then newly entered  values
         * checks -  club id and contact id/fedcontact id based on type of membership 
         */
        if (!$errorexists) {
            $conn = $this->getEntityManager()->getConnection();

            $sql = 'SELECT  m.id,m.joining_date,m.leaving_date,m.membership_club_id,m.contact_id FROM fg_cm_membership_history m '
                . "WHERE ( case when (m.leaving_date IS NOT NULL OR m.leaving_date!='') then ("
                . "('" . $joiningDate2 . "' BETWEEN m.joining_date AND m.leaving_date )"
                . " OR ('" . $leavingDate2 . "' BETWEEN m.joining_date AND m.leaving_date ) "
                . " OR ((m.joining_date BETWEEN '" . $joiningDate . "' AND '" . $leavingDate . "') AND (m.leaving_date BETWEEN '" . $joiningDate . "' AND '" . $leavingDate . "'))"
                . ' )else ('
                . "('" . $joiningDate2 . "'  > m.joining_date ) OR  ('" . $leavingDate2 . "' > m.joining_date )"
                . ') end )'
                . " and m.contact_id= $contactId and m.membership_club_id =$clubId {$extracond}";
            $result = $conn->fetchAll($sql);
            $count = 0;
            foreach ($result as $key => $value) {
                $count = $count + 1;
            }
            $errorexists = ($count > 0) ? 1 : 0;
        }
        return $errorexists;
    }

    public function getJustBeforeDates($contactId = '', $dateType = 'leavingDate', $currentJoinOrLeaveDate = '')
    {
        $sort = ($dateType == 'leavingDate') ? 'ASC' : 'DESC';
        $where = ($dateType == 'leavingDate') ? ('m.' . $dateType . ' < :currentJoinOrLeaveDate') : ('m.' . $dateType . ' > :currentJoinOrLeaveDate');
        $qb = $this->createQueryBuilder('m')
            ->select('m.' . $dateType . ' AS dateArr')
            ->where('m.contact= :contactId')
            ->andWhere($where)
            ->addOrderBy('m.' . $dateType, $sort)
            ->setMaxResults(1)
            ->setParameter('contactId', $contactId)
            ->setParameter('currentJoinOrLeaveDate', $currentJoinOrLeaveDate);
        $result = $qb->getQuery()->getArrayResult();
        $dateArr = array();
        foreach ($result as $val) {
            if ($val['dateArr'] != '') {
                $dateArr[] = $val['dateArr']->format(FgSettings::getPhpDateFormat());
            }
        }

        return $dateArr;
    }

    public function getMembershipHistoryObject($id)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.id, m.joiningDate, m.leavingDate, IDENTITY(m.membership) AS membershipId, IDENTITY(m.contact) AS contactId')
            ->where('m.id = :mId')
            ->setParameter('mId', $id);

        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

    public function updateMembershipHistoryEntryOfContact($contactId = '', $membershipHistoryId = '', $column = '', $val = '')
    {
        if ($contactId != '' && $membershipHistoryId != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = 'UPDATE fg_cm_membership_history m SET m.' . $column . " = '" . $val . "' WHERE m.id =:mId AND m.contact_id =:contactId";
            $conn->executeQuery($sql, array(':contactId' => $contactId, ':mId' => $membershipHistoryId));
        }

        return;
    }

    public function getLatestMembershipLogDetails($membershipHistoryId, $contactId = '')
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT mh.joining_date AS dateFromOriginal,mh.leaving_date AS dateToOriginal,m.title AS Membership, contactName(:contactId) AS editedBy
                 FROM fg_cm_membership_history mh LEFT JOIN fg_cm_membership m ON mh.membership_id=m.id WHERE mh.id=:mhId';
        $result = $conn->fetchAll($sql, array('mhId' => $membershipHistoryId, 'contactId' => $contactId));

        return $result[0];
    }

    /**
     * Function to get all membership logs.
     * @param type $contactId contact id
     * @param type $clubId club id
     * @param type $clubHeirarchy club heirarchy
     * @param type $club club service
     * @return type
     */
    public function getAllMembershipLogs($contactId, $clubId, $clubHeirarchy, $club)
    {
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('DATE_FORMAT', 'Common\UtilityBundle\Extensions\DateFormat');
        array_push($clubHeirarchy, $clubId);
        $clubHeirarchy = implode(',', $clubHeirarchy);
        $dateFormat = FgSettings::getMysqlDateFormat();
        $contact = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $fedContactId = $contact->getFedContact()->getId();
        $qry = $this->createQueryBuilder('ml')
            ->select("ml.id, c.id as clubId, ml.membershipType, (DATE_FORMAT(ml.joiningDate, '$dateFormat')) as joiningDate,(DATE_FORMAT(ml.leavingDate, '$dateFormat')) as leavingDate,(CASE WHEN ( (mi18n.titleLang !='' AND mi18n.titleLang IS NOT NULL)) THEN mi18n.titleLang ELSE m.title END) as title")
            ->leftJoin('ml.membership', 'm')
            ->leftJoin("CommonUtilityBundle:FgCmMembershipI18n", "mi18n", "WITH", "mi18n.id = m.id AND mi18n.lang ='" . $club->get('default_lang') . "'")
            ->leftJoin('m.club', 'c')
            ->where("m.club IN($clubHeirarchy)")
            ->andWhere("ml.contact IN($contactId,$fedContactId)")
            ->orderBy('ml.joiningDate', 'DESC');
        $result = $qry->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get all membership logs.
     *
     * @param int $contactId           contact id
     * @param int $currentMembershipId current membership that is been editing
     *
     * @return type
     */
    public function validateMembershipDate($contactId, $date, $clubHeirarchy, $currentMembershipId)
    {
        $clubHeirarchyString = implode(',', $clubHeirarchy);
        $dateFormat = FgSettings::getMysqlDateFormat();
        $query = "SELECT
                (DATE_FORMAT(ml.joining_date, '$dateFormat')) as joiningDate,
                (DATE_FORMAT(ml.leaving_date, '$dateFormat')) as leavingDate
                 FROM fg_cm_membership_history ml
                 LEFT JOIN fg_cm_membership m ON m.id = membership_id
                 WHERE
                 m.club_id IN ($clubHeirarchyString)
                 AND ml.contact_id = $contactId
                 AND ('$date' BETWEEN ml.joining_date AND ml.leaving_date)
                 AND ml.id != $currentMembershipId
                 ORDER BY ml.id DESC";
        $result = $this->getEntityManager()->getConnection()->fetchAll($query);
        return $result;
    }

    /**
     * This function is used to insert entry in federation membership hitory table of a contact.
     *
     * @param int $clubId       Club id
     * @param int $fedContactId Fed contact id
     * @param int $membershipId Membership id
     * @param int $changedBy    Changed By
     */
    public function insertFedMembershipHistory($clubId, $fedContactId, $membershipId, $changedBy, $membershipType = 'federation', $joiningDate = '')
    {
        $clubObj = $this->_em->getReference('CommonUtilityBundle:FgClub', $clubId);
        $contactObj = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $fedContactId);
        $membershipObj = $this->_em->getReference('CommonUtilityBundle:FgCmMembership', $membershipId);
        $currentContactObj = $this->_em->getReference('CommonUtilityBundle:FgCmContact', $changedBy);
        if ($joiningDate == '') {
            $joiningDate = new \DateTime();
        } else {
            $dateObj = new \DateTime();
            $joiningDate = $dateObj->createFromFormat(FgSettings::getPhpDateFormat(), $joiningDate)->format('Y-m-d H:i:s');
            $joiningDate = new \DateTime($joiningDate);
        }

        $membershipHistoryObj = new FgCmMembershipHistory();
        $membershipHistoryObj->setContact($contactObj);
        $membershipHistoryObj->setMembershipClub($clubObj);
        $membershipHistoryObj->setMembership($membershipObj);
        $membershipHistoryObj->setMembershipType($membershipType);
        $membershipHistoryObj->setJoiningDate($joiningDate);
        $membershipHistoryObj->setChangedBy($currentContactObj);
        $this->_em->persist($membershipHistoryObj);
        $this->_em->flush();
    }

    /**
     * This function is used to update the leaving date of a contact when federation membership
     * is changed from one to another.
     *
     * @param int $fedContactId Fed Contact Id
     * @param int $membershipId Membership Id
     */
    public function updateFedMembershipHistory($fedContactId, $membershipId, $leavingDate = '')
    {
        $leavingDate = ($leavingDate != '') ? $leavingDate : date('Y-m-d H:i:s');
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmMembershipHistory', 'C')
            ->set('C.leavingDate', ':leavingDate')
            ->where('C.contact=:fedContactId')
            ->andWhere('C.membership=:membershipId')
            ->andWhere("C.leavingDate IS NULL OR C.leavingDate = ''")
            ->setMaxResults(1)
            ->setParameters(array('fedContactId' => $fedContactId, 'membershipId' => $membershipId, 'leavingDate' => $leavingDate))
            ->getQuery();

        $res = $q->execute();
    }

    public function validateInlineMembershipPeriod($field, $membershipHistoryId, $contact, $newDate, $clubId)
    {
        $reqDetails = $this->getMembershipLogs('inline', $membershipHistoryId, $contact);

        if ($field == 'joining_date') {
            $errorexists = $this->checkValidMembershipPeriod($newDate, $reqDetails['leaving_date'], $contact, $clubId, $membershipHistoryId, $field);
        } else {
            $errorexists = $this->checkValidMembershipPeriod($reqDetails['joining_date'], $newDate, $contact, $clubId, $membershipHistoryId, $field);
        }

        return $errorexists;
    }

    public function deleteMembershipHistoryOfContact($contactId = '', $membershipHistoryId = '')
    {
        if ($contactId != '' && $membershipHistoryId != '') {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "Delete From fg_cm_membership_history  WHERE m.id =$membershipHistoryId AND m.contact_id =$contactId";
            $conn->executeQuery('DELETE FROM fg_cm_membership_history WHERE contact_id=:contactId and id=:membershipHistoryId', array('contactId' => $contactId, 'membershipHistoryId' => $membershipHistoryId));
        }

        return;
    }

    public function updateClubMembershipHistory($clubId, $contactId, $membershipId, $leavingDate = '', $newMembershipId = '', $transferDate = '')
    {
        $params = array();
        $q = $this->createQueryBuilder()
            ->update('CommonUtilityBundle:FgCmMembershipHistory', 'C');
        if ($newMembershipId != '') {
            $q = $q->set('C.membership', ':newMembershipId');
            $params['newMembershipId'] = $newMembershipId;
        } else {
            $dateObj = new \DateTime();
            $leavingDate = $dateObj->createFromFormat(FgSettings::getPhpDateFormat(), $leavingDate)->format('Y-m-d H:i:s');

            $q = $q->set('C.leavingDate', ':leavingDate');
            $params['leavingDate'] = $leavingDate;
        }
        if ($transferDate != '') {
            $dateObj = new \DateTime();
            $transferDate = $dateObj->createFromFormat(FgSettings::getPhpDateFormat(), $transferDate)->format('Y-m-d H:i:s');

            $q = $q->set('C.joiningDate', ':joiningDate');
            $params['joiningDate'] = $transferDate;
        }
        $params['clubId'] = $clubId;
        $params['contactId'] = $contactId;
        $params['membershipId'] = $membershipId;
        $q = $q->where('C.contact=:contactId')
            ->andWhere('C.membership= :membershipId')
            ->andWhere("C.leavingDate IS NULL OR C.leavingDate = ''")
            ->andWhere('C.membershipClub = :clubId')
            ->setMaxResults(1)
            ->setParameters($params)
            ->getQuery();

        $res = $q->execute();
    }

    public function getPreviousLeavingDate($contactId = '', $clubId, $pastLeavingDate = false)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.joiningDate AS joiningDateArr, m.leavingDate AS leavingDateArr')
            ->where('m.contact= :contactId')
            ->andWhere('m.membershipClub =:clubId')
            ->andWhere('m.membershipType =:clubType');
        if ($pastLeavingDate) {
            $qb = $qb->andWhere("m.leavingDate IS NOT NULL AND m.leavingDate != ''");
        }
        $qb = $qb->addOrderBy('m.joiningDate', 'DESC')
            ->setMaxResults(2)
            ->setParameters(array('clubId' => $clubId, 'contactId' => $contactId, 'clubType' => 'club'));
        $result = $qb->getQuery()->getArrayResult();
        $leavingDates = array();
        foreach ($result as $val) {
            if ($val['leavingDateArr'] != '') {
                $leavingDates[] = $val['leavingDateArr']->format(FgSettings::getPhpDateFormat());
            } else {
                $leavingDates[] = $val['joiningDateArr']->format(FgSettings::getPhpDateFormat());
            }
        }

        return $leavingDates;
    }

    /**
     * Function to check previous membership to assign first_joining_date.
     *
     * @param int    $contactId
     * @param string $type      club/federation
     *
     * @return array
     */
    public function getMembershipHistory($contactId, $type = 'club')
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.id, m.joiningDate, m.leavingDate, IDENTITY(m.membership) AS membershipId, IDENTITY(m.contact) AS contactId')
            ->where('m.contact = :contactId')
            ->andWhere("m.membershipType='{$type}'")
            ->setMaxResults(2)
            ->setParameter('contactId', $contactId);

        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

    /**
     * Function to get the first leaving date if any.
     *
     * @param int    $contactId Contact Id
     * @param int    $clubId    Club Id
     * @param string $dateType  JoinigDate/LeavingDate
     *
     * @return array $leavingDates Last two leaving dates
     */
    public function getFirstJoiningOrLeavingDate($contactId = '', $clubId, $dateType = 'leavingDate')
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.' . $dateType . ' AS dateArr')
            ->where('m.contact= :contactId')
            ->andWhere('m.membershipClub =:clubId')
            ->addOrderBy('m.joiningDate', 'ASC')
            ->setMaxResults(1)
            ->setParameter('clubId', $clubId)
            ->setParameter('contactId', $contactId);
        $result = $qb->getQuery()->getArrayResult();
        $dateArr = array();

        foreach ($result as $val) {
            if ($val['dateArr'] != '') {
                $dateArr[] = $val['dateArr']->format(FgSettings::getPhpDateFormat());
            }
        }

        return $dateArr;
    }
}
