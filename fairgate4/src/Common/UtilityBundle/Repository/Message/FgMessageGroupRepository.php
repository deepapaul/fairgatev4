<?php

namespace Common\UtilityBundle\Repository\Message;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgMessageGroup;

/**
 * FgMessageGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgMessageGroupRepository extends EntityRepository {

    /*
     * The fucntion to insert the group Ids of a message
     * Will be applicable onlt to team and workgroup messages
     */
    public function insertMessageGroup($messageObj, $groupIds) {
        
        foreach($groupIds as $roleId)
        {
            $messageGroupObj = new FgMessageGroup();
            $messageGroupObj->setMessage($messageObj);
            $messageGroupObj->setRole($this->_em->getRepository('CommonUtilityBundle:FgRmRole')->find($roleId));
            $this->_em->persist($messageGroupObj);  
            $this->_em->flush();
        }
        return;
    }
    
    /**
     * Function to get the message groups of a message
     * @param int $messageId 
     * @return int
     */
    public function getMessageGroupDetails($messageId) {
        $qb = $this->createQueryBuilder('mg')
                    ->select('r.id,r.title')
                    ->leftJoin('mg.role', 'r')
                    ->where('mg.message=:messageid')
                    ->setParameter('messageid', $messageId);
        
       $result = $qb->getQuery()->getArrayResult();
       return $result;
    }
    
    /**
     * Function to get the groups that have been added to a message
     * @param int $messageId 
     * @return int
     */
    public function deleteGroupsInMessage($messageId) {
        
        $qb = $this->createQueryBuilder('mg')
                    ->delete()
                    ->where('mg.message=:messageid')
                    ->setParameter('messageid', $messageId);
        
       $result = $qb->getQuery()->execute();
       return $result;
    }
    /**
     * Function to get the message groups(Teams/Workgroups) of a message
     * @param int $messageId 
     * @return string
     */
    public function getMessageGroups($messageId) {
        $qb = $this->createQueryBuilder('mg')
                    ->select('GROUP_CONCAT(r.id) groups')
                    ->leftJoin('mg.role', 'r')
                    ->where('mg.message=:messageid')
                    ->groupBy('mg.message')
                    ->setParameter('messageid', $messageId);
        
       $result = $qb->getQuery()->getOneOrNullResult();
       return $result;
    }
}
