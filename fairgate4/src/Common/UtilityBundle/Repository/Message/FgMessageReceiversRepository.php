<?php

namespace Common\UtilityBundle\Repository\Message;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgMessageReceivers;

/**
 * FgMessageReceiversRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgMessageReceiversRepository extends EntityRepository {

    /*
     * The fucntion to insert the group Ids of a message
     * Will be applicable onlt to team and workgroup messages
     */
    public function insertMessageReceivers($messageObj, $contactIds, $currentUser) {
        
        foreach($contactIds as $contactId)
        {
            $messageReceiversObj = new FgMessageReceivers();
            $messageReceiversObj->setMessage($messageObj);
            $messageReceiversObj->setUnreadCount(0);
            $messageReceiversObj->setIsDeleted(0);
            $messageReceiversObj->setIsNotificationEnabled(1);
            $messageReceiversObj->setContact($this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId));
            $messageReceiversObj->setReadAt(($contactId == $currentUser)?(new \DateTime("now")):NULL);
            $this->_em->persist($messageReceiversObj);  
            $this->_em->flush();
        }
        return;
    }
     
    /**
     * Function to get the reciepients of a message
     * 
     * @param int $messageId 
     * 
     * @return int
     */
    public function getMessageReceivers($messageId,$excludeSender = true) {
        
        $qb = $this->createQueryBuilder('mr')
                    ->select('c.id,contactname(c.id) AS title')
                    ->leftJoin('mr.contact', 'c')
                    ->leftJoin('mr.message', 'm')
                    ->where('mr.message=:messageid')
                    ->setParameter('messageid', $messageId);
        
         if($excludeSender){
          $qb->andWhere('m.createdBy !=c.id');
        }
        
       $result = $qb->getQuery()->getArrayResult();
       return $result;
    }
        
    /**
     * Function to get the groups that have been added to a message
     * 
     * @param int $messageId 
     * 
     * @return int
     */
    public function deleteReceiversInMessage($messageId) {
        
        $qb = $this->createQueryBuilder('mr')
                    ->delete()
                    ->where('mr.message=:messageid')
                    ->setParameter('messageid', $messageId);
        
       $result = $qb->getQuery()->execute();
       return $result;
    }
    
    /**
     * Method to set read status of message 
     * 
     * @param int $messageId Message Id
     * @param int $contactId ContactId
     * 
     * @return int
     */
    public function setMessageRead($messageId, $contactId) {
        $receiverObj = $this->findOneBy(array("message" => $messageId, "contact" => $contactId));
        if($receiverObj) {
            $receiverObj->setUnreadCount(0);
            $receiverObj->setReadAt(new \DateTime("now"));  
            $this->_em->persist($receiverObj);
            $this->_em->flush();
            
            return $receiverObj->getUnreadCount();
        }                
    }
    /**
     * Function to get the reciepients contactId of a message
     * 
     * @param int $messageId 
     * 
     * @return int
     */
    public function getMessageReceiverIds($messageId,$excludeSender=true) {
        
        $qb = $this->createQueryBuilder('mr')
                    ->select('GROUP_CONCAT(c.id) as contacts')
                    ->leftJoin('mr.contact', 'c')
                    ->leftJoin('mr.message', 'm')
                    ->where('mr.message=:messageid');
        if($excludeSender){
          $qb->andWhere('m.createdBy !=c.id');
        }
        $qb->setParameter('messageid', $messageId);
        
        $result = $qb->getQuery()->getOneOrNullResult();
       
        return $result;
    }
    /**
     * Method to delete message 
     * 
     * @param string $messageIds Comma separated Message Ids
     * @param int    $contactId  ContactId
     * 
     * @return boolean
     */
    public function setMessageDeleted($messageIds, $contactId) {
        if($messageIds) {
            $messageIds = explode(",", $messageIds);
            foreach($messageIds as $messageId) {
                $id =  preg_replace('/[^0-9\-]/', '', $messageId);
                $receiverObj = $this->findOneBy(array("message" => $id, "contact" => $contactId));
                if($receiverObj) {                    
                    $receiverObj->setIsDeleted(1);
                    $this->_em->persist($receiverObj);                    
                }    
            }
            $this->_em->flush();
            
            return true;
        }        
    }
    
    /**
     * Method to make message unread
     * 
     * @param string $messageIds Comma separated Message Ids
     * @param int    $contactId  ContactId
     * 
     * @return array  array(%messageId% => %$unreadMessageCount%)
     */
    public function setMessageUnread($messageIds, $contactId) {        
        if($messageIds) {
            $messageIds = explode(",", $messageIds);
            foreach($messageIds as $messageId) {
                $id =  preg_replace('/[^0-9\-]/', '', $messageId);
                $receiverObj = $this->findOneBy(array("message" => $id, "contact" => $contactId));
                if($receiverObj) {       
                    $unreadMessageCount = $this->_em->getRepository('CommonUtilityBundle:FgMessage')->getMessagesCount($id, $contactId);
                    $return[$id] ['messagesCount']= $unreadMessageCount[0]['messagesCount']-1;
                    $return[$id]['createdBy'] = $unreadMessageCount[0]['createdBy'];
                    $return[$id]['readAt'] = $unreadMessageCount[0]['readAt'];
                    $receiverObj->setUnreadCount($unreadMessageCount[0]['messagesCount']-1);
                    $receiverObj->setReadAt(null);
                    $this->_em->persist($receiverObj);                    
                }    
            }
            $this->_em->flush();
            
            return $return;
        }        
    }
    
    /**
     * Method to make message read
     * 
     * @param string $messageIds Comma separated Message Ids
     * @param int    $contactId  ContactId
     * 
     * @return array  array(%messageId% => %$unreadMessageCount%)
     */
    public function setMessagesRead($messageIds, $contactId) {        
        if($messageIds) {
            $messageIds = explode(",", $messageIds);
            $return = array();
            foreach($messageIds as $messageId) {
                $id =  preg_replace('/[^0-9\-]/', '', $messageId);
                $return[] = $id;
                $this->setMessageRead($id, $contactId);   
            }            
            
            return $return;
        }        
    }
        
    /**
     * Method to make message unread
     * 
     * @param string $messageIds Comma separated Message Ids
     * @param int    $contactId  ContactId
     * @param int    $status     Notification Status (0 or 1)
     * 
     * @return array  array(%messageId%)
     */
    public function setNotification($messageIds, $contactId, $status) {       
        if($messageIds) {            
            $return = array();
            $messageIds = explode(",", $messageIds);
            foreach($messageIds as $messageId) {
                $id =  preg_replace('/[^0-9\-]/', '', $messageId);
                $receiverObj = $this->findOneBy(array("message" => $id, "contact" => $contactId));
                if($receiverObj) { 
                    $return[] = $id;
                    $receiverObj->setIsNotificationEnabled($status);                    
                    $this->_em->persist($receiverObj);                    
                }    
            }
            $this->_em->flush();
            
            return $return;
        }        
    }
        
    /**
     * Method to get comma separated contacts of each email fileds
     * 
     * @param int   $messageId   messageId
     * @param array $emailFields club emailFields Array
     * @param int   $contactId   current contactId
     * 
     * @return array
     */
    public function getContactsOfEmailFields($messageId, $emailFields, $contactId) {
        $qb = $this->createQueryBuilder('R')
                    ->select("(GROUP_CONCAT(DISTINCT C.id)) as contacts, IDENTITY(E.attribute)  as attr,  E.attributeType")
                    ->innerJoin("R.contact", "C")
                    ->innerJoin("R.message", "M")
                    ->innerJoin("CommonUtilityBundle:FgMessageEmailFields", "E", "WITH", "R.id = E.receivers")
                    ->where('M.id = :messageId')
                    ->andWhere("E.attribute IN (".implode(',',$emailFields).") ")
                    ->andWhere("C.id != :contactId ")
                    ->andWhere("R.isNotificationEnabled = 1 ")
                    ->groupBy("E.attribute")
                    ->setParameters(array('messageId' => $messageId, "contactId" => $contactId));
        
       $result = $qb->getQuery()->getArrayResult();
       
       return $result;
    }
    
    /**
     * Method to copy the email field of old message to new one. (In case of personal message where new message is created)
     * 
     * @param int   $oldMessageId Old message Id
     * @param int   $newMessageId New message Id
     * @param array $contactIds   array of Contact Id
     */
    public function copyEmailFields($oldMessageId, $newMessageId, $contactIds) {  
        $insertDatasArray = array();
        foreach($contactIds as $contactId) {
            $oldMessageReceiverObj = $this->findOneBy(array('message' => $oldMessageId, 'contact' => $contactId));
            $oldEmailFieldObjs = $this->_em->getRepository('CommonUtilityBundle:FgMessageEmailFields')->findBy(array('receivers' => $oldMessageReceiverObj->getId() ));
            $newMessageReceiverObj = $this->findOneBy(array('message' => $newMessageId, 'contact' => $contactId));        
            if(count($oldEmailFieldObjs) > 0) {                
                foreach($oldEmailFieldObjs as $oldEmailFieldObj) {                
                    $insertDatasArray[] = array("attributeObj" => $oldEmailFieldObj->getAttribute(), "attributeType" => $oldEmailFieldObj->getAttributeType(), 'receiverObj' => $newMessageReceiverObj);
                }                
            } 
        }  
        $this->insertEmailFields($insertDatasArray);
    }
    
    /**
     * Method to insert to fg_message_email_fields
     * 
     * @param array $insertDatasArray two dimensional array to insert     
     */
    private function insertEmailFields($insertDatasArray) { 
        foreach($insertDatasArray as $insertDataArray) {   
            $emailFieldObj = new \Common\UtilityBundle\Entity\FgMessageEmailFields();
            $emailFieldObj->setAttribute($insertDataArray['attributeObj']);
            $emailFieldObj->setAttributeType($insertDataArray['attributeType']);            
            $emailFieldObj->setReceivers($insertDataArray['receiverObj']);                                    

            $this->_em->persist($emailFieldObj);            
        }        
        $this->_em->flush();
    }
}
