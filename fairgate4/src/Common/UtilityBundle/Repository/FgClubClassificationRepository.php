<?php

Namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;
use Common\UtilityBundle\Repository\Pdo\ClubPdo;


/**
 * FgClubClassificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgClubClassificationRepository extends EntityRepository {

    private $delQryStr = array();
    private $bookmarkArr = array();
    private $updateQryStr = 'SET '; //Setting the query string
    private $updateQryStri18n = '';
    private $updateQry = '';
    private $newClassFunctionQuery = '';
    private $classCategoryId = '';
    private $classId = '';
    private $functionAssign = '';
    private $contactId = '';
    private $insertLogEntry = '';
    private $clubDefaultLang = '';
    private $fromType = '';
    private $container = '';

    
    
    
    /**
     * Function to get classification Ids of a club
     *
     * @param Integer $clubId club id
     * @param Boolean $exec   (true or false value decides whether pass query result or as processed array )
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getClubClassificationIds($clubId, $exec = true) {
        $conn = $this->getEntityManager()->getConnection();
        $selectField = ($exec) ? 'GROUP_CONCAT(c.id) AS ids' : 'c.id';
        
        $qb = $this->createQueryBuilder('c');
        if ($exec) {
            $qb->select("GROUP_CONCAT(c.id) AS ids");
        } else {
            $qb->select("c.id");
        }
        $qb->where("c.federation = $clubId");

        $result = $qb->getQuery()->getArrayResult();

       
        return $result;
    }
    
     /**
     * Function to get classes of a classification
     *
     * @param int $clubId    Club id
     * @param int $catId     category id
     * @param int $contactId contact id
     * @param int $exec      Flag set true to process data
     *
     * @return array query result or as processed array based on the $exec parameter
     */
    public function getClassificationClasses($clubId, $catId, $contactId, $exec = true) {
      $q = $this->getEntityManager()->createQueryBuilder();
            $q->select("c.id,c.title,c.sortOrder, c.isActive, ci18n.titleLang as title_lang, ci18n.lang,cb.id as bookMarkId")
                ->addSelect("(SELECT COUNT(ca.id) FROM CommonUtilityBundle:FgClubClassAssignment ca WHERE ca.class =c.id) AS clubCount")
                ->from('CommonUtilityBundle:FgClubClass', 'c')
                ->leftJoin('CommonUtilityBundle:FgClubClassI18n', 'ci18n', 'WITH', 'ci18n.id = c.id')
                ->leftJoin("CommonUtilityBundle:FgClubBookmarks", "cb", "WITH", "cb.class =c.id  AND cb.contact='$contactId'")
                ->where("c.federation= '$clubId' AND c.classification='$catId'");
            $dataResult = $q->getQuery()->getArrayResult();
  
        if ($exec) {
            $result = array();
            $id = '';
            foreach ($dataResult as $key => $arr) {
                if (count($arr) > 0) {
                    if ($arr['id'] == $id) {
                        $result[$id]['titleLang'][$arr['lang']] = $arr['title_lang'];
                    } else {
                        $id = $arr['id'];
                        $result[$id] = array('id' => $arr['id'], 'title' => $arr['title'], 'sortOrder' => $arr['sort_order'], 'isActive' => $arr['is_active'], 'clubCount' => $arr['clubCount'], 'classCount' => $arr['classCount']);
                        $result[$id]['titleLang'][$arr['lang']] = $arr['title_lang'];
                    }
                }
            }

            return $result;
        } else {

            return $dataResult;
        }
    }
    
    

    
    /**
     * Function to save classification settings
     *
     * @param type $catArr          catArr
     * @param type $fnAssign        fnAssign
     * @param type $clubDefaultLang clubDefaultLang
     * @param type $clubLanguages   clubLanguages
     * @param type $clubId          clubId
     * @param type $contactId       contactId
     * @param type $catType         catType
     * @param type $cacheDomainName cacheDomainName
     * @param type $clubTeamId      clubTeamId
     *
     * @return boolean
     */
    public function saveClassificationSettings($catArr, $fnAssign, $clubDefaultLang, $clubLanguages, $clubId, $contactId, $catType, $cacheDomainName, $clubTeamId , $container) {
        //GENERATE PDO QUERY FOR MULTIPLE UPDATE AND DELETE
        if (count($catArr) > 0) {
            $this->container = $container;
            $this->contactId = $contactId;
            $this->clubDefaultLang = $clubDefaultLang;
            $this->fromType = $catType;

            //FUNCTION ASSIGN AREA
            if ($catType == 'class') {
                $this->functionAssign = $fnAssign;
            }
            //FUNCTION ASSIGN AREA
            $clubObj = new ClubPdo($this->container);
            foreach ($catArr as $categoryId => $catData) {
                $this->classCategoryId = $categoryId;
                $catTable = 'fg_club_classification';
                foreach ($catData as $field => $value) {
                    if ($field == 'sublevel_assign') {
                        $this->functionAssign = $value;
                    }
                    $tablename = $this->genrateQueryString($field, $value, $categoryId, $catTable, $clubLanguages, $clubId, false);
                }
                $this->updateQueryString($tablename, $categoryId);
            }

            //DELETE QUERY PREPARATION AREA
            $delFinalString = $this->delQryPrepare();
            //DELETE QUERY PREPARATION AREA
            //EXECUTE TRANSACTION
            $updateFullQry = $this->insertLogEntry . $this->updateQry . $this->updateQryStri18n;
            $transaction = $clubObj->addtotransaction($updateFullQry, $delFinalString);
            $this->updateMainTable( $this->clubDefaultLang, $clubId);
            //EXECUTE TRANSACTION
            //UPDATE CATEGORY FUNCTION TYPE IF THERE ARE NO FUNCTION
            //UPDATE BOOKMARK
            if (count($this->bookmarkArr) > 0) {
                $this->_em->getRepository('CommonUtilityBundle:FgClubBookmarks')->handleBookmark('class', $this->bookmarkArr, $clubId, $contactId);
            }
        }

        return true;
    }

    /**
     * Generate query string for multiple update and delete
     *
     * @param type   $field         field
     * @param type   $value         value
     * @param type   $categoryId    Category id
     * @param string $tablename     Table Name
     * @param type   $clubLanguages Club languages
     * @param type   $clubId        Club id
     * @param type   $newFlag       New Flag
     *
     * @return string
     */
    public function genrateQueryString($field, $value, $categoryId, $tablename, $clubLanguages, $clubId, $newFlag = false) {
        //GENERATE PDO QUERY FOR MULTIPLE UPDATE AND DELETE
        $this->updateQueryString($tablename, $categoryId);
        if ($field == 'class') {
            $tablename = 'fg_club_class';
        }
        if ($field == 'is_deleted') {
            if ($value == '1') {
                $this->delQryStr[$tablename][] = $categoryId;
            }
        } else if ($field == 'book_marked') {
            $this->bookmarkArr[] = $categoryId;
        } else {
            if ($field == 'i18n') {
                $clubLangArr = $clubLanguages;
                $isActive = 1;
                foreach ($value as $langkey => $title) {
                    $updateArr = $updateArri18n = $updateDupi18n = array();
                    if (isset($title['title'])) {
                        $conn = $this->_em->getConnection();
                        $langTitle = FgUtility::getSecuredDataString($title['title'], $conn);
                         $updateArri18n['title_lang'] = "'$langTitle'";
                         $updateDupi18n[] = 'title_lang = VALUES(title_lang)';
//                        $updateArri18n[] = "title_lang = '$langTitle'";
                        $updateArr[] = "title = '$langTitle'";
                        $logArr['title'] = $langTitle;
                    }
                    if (($langTitle != '') || $this->clubDefaultLang != $langkey) {
                  $this->updateQryStri18n .= " INSERT INTO {$tablename}_i18n (id,lang,".implode(', ', array_keys($updateArri18n)).") VALUES ($categoryId,'$langkey',".implode(', ', $updateArri18n).")  ON DUPLICATE KEY UPDATE ".implode(', ', $updateDupi18n).";";
                     //   $this->updateQryStri18n .= "UPDATE $tablename" . '_i18n' . " SET " . implode(', ', $updateArri18n) . " WHERE id = $categoryId AND lang = '$langkey';";
                        if ($this->clubDefaultLang == $langkey) {
                            $this->updateQryStr .= implode(',', $updateArr);
                            $logTableName = $tablename;
                            if ($tablename != 'fg_club_classification') {
                                $this->insertLogEntries($logTableName, $categoryId, $logArr, false, $langkey, $clubId,false,'','',$this->container);
                            }
                        }
                    }
                }
                $this->updateQueryString($tablename, $categoryId);
            } else if (is_array($value)) {
                foreach ($value as $fieldId => $valueArr) {
                    if ($fieldId == 'new' && ($tablename == 'fg_club_class')) {
                        $this->newClassFunctionQuery .= $this->generateQryForAddingClassFn($tablename, $valueArr, $clubLanguages, $clubId);
                    } else {
                        $rowId = ($field == 'class') ? $fieldId : $categoryId;
                        $resultArr = $this->genrateQueryString($fieldId, $valueArr, $rowId, $tablename, $clubLanguages, $clubId, $newFlag);
                        $this->updateQueryString($tablename, $rowId);
                    }
                }
            } else {
                $this->updateQryStr .= "$field = '$value',";
            }
        }

        return $tablename;
        //GENERATE PDO QUERY FOR MULTIPLE UPDATE AND DELETE
    }

    /**
     * Function to insert log entries
     *
     * @param type $tablename     Table name
     * @param type $insertedId    inserted id
     * @param type $valueAfterArr value after array
     * @param type $insert        insert
     * @param type $langkey       Language key
     * @param type $clubId        Club id
     * @param type $exe           set true to execute query
     * @param type $contactId     Contact id
     * @param type $classId       Class id
     */
    public function insertLogEntries($tablename, $insertedId, $valueAfterArr, $insert = true, $langkey, $clubId, $exe = false, $contactId = '', $classId = '',$container) {
        //Insert Log entry
        $nowdate = strtotime(date('Y-m-d H:i:s'));
        $dateToday = date('Y-m-d H:i:s', $nowdate);
        $kind = 'data'; //Assigned contacts
        $valueBefore = "''";
        $logTablename = $tablename . '_log';
        foreach ($valueAfterArr as $key => $value) {
            $valueArr = array();
            $valueAfter = $value;
            $field = ($key == 'title') ? 'Name (' . $langkey . ')' : 'Description (' . $langkey . ')';
            if (!$insert) {
                $valueBefore = "(SELECT $key FROM $tablename WHERE id=$insertedId)";
            }
            $contactId = $exe ? $contactId : $this->contactId;
            $valueArr[] = "date = '$dateToday'";
            $valueArr[] = "kind = '$kind'";
            $valueArr[] = "field = '$field'";
            $valueArr[] = "value_before = $valueBefore";
            $valueArr[] = "value_after = '$valueAfter'";
            $valueArr[] = "changed_by_contact = '$contactId'";
            $valueArr[] = "club_id = '$clubId'";
            if ($tablename == 'fg_club_class') {
                $valueArr[] = "class_id = '$insertedId'";
            }
           $this->container= $container ;
            $clubObj = new ClubPdo($this->container);
            if ($exe) {
                $logQuery = "INSERT INTO $logTablename SET " . implode(',', $valueArr) . ";";
                $clubObj->addtotransaction($logQuery);
            } else {
                $this->insertLogEntry .= "INSERT INTO $logTablename SET " . implode(',', $valueArr) . ";";
            }
        }
        //Insert Log entry
    }

    /**
     * Function update query string
     *
     * @param type $tablename  Table name
     * @param type $categoryId Category id
     */
    public function updateQueryString($tablename, $categoryId) {
        if ($this->updateQryStr !== 'SET ') {
            $updateStr = rtrim($this->updateQryStr, ',');
            $this->updateQry .= "UPDATE $tablename $updateStr WHERE id = $categoryId;";
            $this->updateQryStr = 'SET '; // Resetting the query string
        }
    }

   

    /**
     * Function to generate query for adding class function
     *
     * @param type $tablename     Table name
     * @param type $valueArr      new data array
     * @param type $clubLanguages Club languages
     * @param type $clubId        club Id
     *
     * @return string
     */
    public function generateQryForAddingClassFn($tablename, $valueArr, $clubLanguages, $clubId) {
        $classFnArr = array();
        $classFnQry = '';
        foreach ($valueArr as $timestamp => $newDataArr) {
            $classFnArr = $this->loopNewDataArr($tablename, $newDataArr, $clubLanguages, $clubId);
        }

        return $classFnQry;
    }

    /**
     * Function used to loop through new data array
     *
     * @param type $tablename     Table name
     * @param type $newDataArr    new data array
     * @param type $clubLanguages Club languages
     * @param type $clubId        club Id
     *
     * @return type
     */
    public function loopNewDataArr($tablename, $newDataArr, $clubLanguages, $clubId) {
        $insertQryStri18n = '';
        $insertQryStr = '';
        $isActive = 1;
        $sortOrder = 1;
        $isLangActive = 1;
        $requiredAssignment = 0;
        $teamCatId = '';
        $langDesc = 'NULL';
        $classBookamarkFlag = false;
        $dummyId = '##dummyId##';
        $classFnFlag = false;
        $insertedId = '';
        $inserti18FnArr = array('dummyId' => $dummyId, 'langTitle' => '', 'langkey' => '', 'isLangActive' => $isLangActive);
        $inserti18ClassArr = array('dummyId' => $dummyId, 'langTitle' => '', 'langkey' => '', 'isLangActive' => $isLangActive);
        foreach ($newDataArr as $key => $valArr) {
            if ($key == 'book_marked' && $valArr == 1) {
                $classBookamarkFlag = true;
            } else if ($key == 'is_active') {
                $isActive = $valArr;
            } else if ($key == 'sort_order') {
                $sortOrder = $valArr;
            } else if ($key == 'is_required_assignment') {
                $requiredAssignment = $valArr;
            } else if ($key == 'i18n') {
                $clubLangArr = $clubLanguages;
                foreach ($valArr as $langkey => $title) {
                    if (isset($title['title'])) {
                        $conn = $this->_em->getConnection();
                        $langTitle = FgUtility::getSecuredDataString($title['title'], $conn);
                    }
                    if ($langTitle != '') {
                        $inserti18ClassArr['langkey'] = "'$langkey'";
                        $inserti18ClassArr['langTitle'] = "'$langTitle'";
                        $insertQryStri18n .= 'INSERT INTO ' . $tablename . '_i18n VALUES (' . (implode(',', $inserti18ClassArr)) . ');';
                        if ($this->clubDefaultLang == $langkey) {
                            $mainTitle = $langTitle;
                            $mainDesc = $langDesc;
                        }
                        if (($key = array_search($langkey, $clubLangArr)) !== false) {
                            unset($clubLangArr[$key]);
                        }
                    }
                }

            }
        }
        if ($mainTitle) {
            $valueInsrtArr = array();
            $valueInsrtArr[] = "classification_id = '$this->classCategoryId'";
            $valueInsrtArr['title'] = "title = '$mainTitle'";
            $valueInsrtArr[] = "is_active = '$isActive'";
            $valueInsrtArr[] = "sort_order = '$sortOrder'";
            $valueInsrtArr[] = "federation_id = '$clubId'";
            $insertedId = $this->insertClassFnData($clubId, $tablename, $insertQryStri18n, $dummyId, $valueInsrtArr);
        }
        if ($classFnFlag) {
            $result[$insertedId] = $newFnArray;
            $this->insertLogEntry = str_replace('##DUMMYROLEID##', $insertedId, $this->insertLogEntry);
        }
        //Setting up bookmark array for multiple insert
        if ($classBookamarkFlag && $insertedId) {
            $this->bookmarkArr[] = $insertedId;
        }

        return $result;
    }

    /**
     * Function to insert Class function data
     *
     * @param type $clubId           Club id
     * @param type $tablename        Table name
     * @param type $insertQryStri18n insert QryStri18n
     * @param type $dummyId          Dummy id
     * @param type $valueArr         value array
     *
     * @return type
     */
    public function insertClassFnData($clubId, $tablename, $insertQryStri18n, $dummyId, $valueArr) {
        //INSERT INTO TABLE (fg_membership_category) AREA STARTS HERE
        if ($clubId) {
            $insertQryStr = "INSERT INTO $tablename SET " . implode(',', $valueArr) . ";";
            $clubObj = new ClubPdo($this->container);
            $insertedId = $clubObj->executeQuery($insertQryStr);
             if ($insertQryStri18n != '') {
                $insertQryWithId = str_replace($dummyId, $insertedId, $insertQryStri18n);
                $clubObj = new ClubPdo($this->container);
                $clubObj->executeQuery($insertQryWithId);
            }
            
            $valueLogArr['title'] = preg_replace("/'/", '', str_replace('title =', '', $valueArr['title']));
            $this->insertLogEntries($tablename, $insertedId, $valueLogArr, true, $this->clubDefaultLang, $clubId,false,'','',$this->container);

            return $insertedId;
        }
        //INSERT INTO TABLE AREA ENDS HERE
    }

    /**
     * Function used to prepare delete query
     *
     * @return prepared delete query string
     */
    public function delQryPrepare() {
        $delArr = $this->delQryStr;
        $delString = $delClassFnStr = '';
        $exFnCount = array();
        $delFnCnt = 0;
        if (count($delArr) > 0) {
            ksort($delArr);
            foreach ($delArr as $deltable => $dataArr) {
                $delParm = implode(',', $dataArr);
                $delString .= "DELETE FROM $deltable WHERE id IN ($delParm);";
            }
        }
        $delFinalString = $delClassFnStr . $delString;
    
        return $delFinalString;
    }
    /**
     * Function to update maintable entry with clubdefault language entry
     *
     * @param int    $clubId  club id 
     * @param string $clubDefaultLang  Club default language
     * 
     * @return boolean
     */
    private function updateMainTable($clubDefaultLang, $clubId)
    {
        $mainFileds = array('title');
        $i18Fields = array('title_lang');
        $fieldsList = array('mainTable' => 'fg_club_class',
            'i18nTable' => 'fg_club_class_i18n',
            'mainField' => $mainFileds,
            'i18nFields' => $i18Fields
        );
        $where = 'A.federation_id = ' . $clubId;
        $updateMainTable = FgUtility::updateDefaultTable($clubDefaultLang, $fieldsList, $where);
        $clubObj = new ClubPdo($this->container);
        $clubObj ->executeQuery($updateMainTable);

        return true;
    }
}
