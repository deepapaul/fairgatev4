<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Entity\FgClubBookmarks;
use Common\UtilityBundle\Entity\FgFileManager;
use Common\UtilityBundle\Entity\FgFileManagerVersion;
use Common\UtilityBundle\Entity\FgFileManagerLog;
use Common\FilemanagerBundle\Util\FileChecking;
use Common\UtilityBundle\Entity\FgEmCalendarDetailsAttachments;

/**
 * FgClubBookmarksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgFileManagerRepository extends EntityRepository {

    /**
     * Function to get Bookmarks for a perticular club.
     *
     * @param Integer $contactId Contact Id
     * @param Integer $clubId    Club Id
     * @param String  $clubType  Club Type
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getFileDetails($clubId, $orderBy = '', $addWhere = '', $start = 0, $limit = 10, $listType = 'image') {

        $conn = $this->getEntityManager()->getConnection();
        $extraWhere = ($listType == 'image') ? " AND FMV.mime_type IN('image/png', 'image/gif', 'image/x-ms-bmp','image/pjpeg','image/jpeg','image/x-icon','image/x-windows-bmp','image/bmp')" : '';
        $fileselection = "SELECT FM.id as fileManagerId, (SELECT IF(SF.is_super_admin=1,1,0) AS ADMINUSER FROM fg_file_manager_version AS FFMV LEFT JOIN sf_guard_user AS SF ON SF.contact_id=FFMV.uploaded_by  WHERE FFMV.file_manager_id=FM.id ORDER BY FFMV.id DESC LIMIT 1) AS isAuthorSupAdmin,FMV.filename as filename,FM.encrypted_filename as encryptedName,FM.virtual_filename as virtualFilename,contactName(FMV.uploaded_by) AS uploadedBy, FMV.uploaded_at AS uploadedOn,FMV.uploaded_by as contactId,FM.source as source,FMV.size as Size, FMV.uploaded_by as uploadedId,FM.is_removed as removedFlag,FM.club_id as clubId
                        FROM fg_file_manager FM
                        INNER JOIN fg_file_manager_version FMV ON FMV.id=FM.latest_version_id
                        WHERE FM.club_id=:clubId {$extraWhere}";
        if ($addWhere != '') {
            $fileselection.=" AND (" . $addWhere . " )";
        }
        if ($orderBy != '') {
            $fileselection.=" ORDER BY " . $orderBy;
        }
        $fileselection.=" LIMIT " . $start . " ," . $limit;

        $dataResult = $conn->fetchAll($fileselection, array(':clubId' => $clubId));

        return $dataResult;
    }

    /**
     * 
     * @param type $clubId
     * @param type $listType image/all
     * @param type $searchCondition
     * @return arrayobject
     */
    public function getTotalCount($clubId, $listType = 'image', $searchCondition = '') {
        $conn = $this->getEntityManager()->getConnection();
        $extraWhere = ($listType == 'image') ? " AND FMV.mime_type IN('image/png', 'image/gif', 'image/x-ms-bmp','image/pjpeg','image/jpeg','image/x-icon','image/x-windows-bmp','image/bmp')" : '';
        if ($searchCondition != '') {
            $filterCondition = " AND (" . $searchCondition . " )";
        }
        $filecount = "SELECT COUNT(FM.id) as Count FROM fg_file_manager FM
                        INNER JOIN fg_file_manager_version FMV ON FMV.id=FM.latest_version_id
                        WHERE FM.club_id=:clubId {$extraWhere}{$filterCondition}";
        $totalCount = $conn->fetchAll($filecount, array(':clubId' => $clubId));

        return $totalCount;
    }

    /**
     * Function to rename a selected file in file manager
     *
     * @param Integer $fileId     file id
     * @param Integer $contactId  logged contact id
     * @param String  $filename   file name to renamed
     *
     * @return boolean
     */
    public function renameFile($fileId, $contactId, $filename) {
        $fileObj = $this->_em->getRepository('CommonUtilityBundle:FgFileManager')->find($fileId);
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $filemanagerVersionObj = $fileObj->getLatestVersion();
        $oldFileName = $filemanagerVersionObj->getFilename();
        $filemanagerVersionObj->setFilename($filename);
        $filemanagerVersionObj->setUpdatedAt(new \DateTime("now"));
        $filemanagerVersionObj->setUpdatedBy($contactObj);
        $this->_em->persist($filemanagerVersionObj);
        $this->_em->flush();

        /* Insert Log */
        $filemanagerLogObj = new FgFileManagerLog();
        $filemanagerLogObj->setFileManager($fileObj);
        $filemanagerLogObj->setKind('Changed');
        $filemanagerLogObj->setField('File renamed');
        $filemanagerLogObj->setChangedBy($contactObj);
        $filemanagerLogObj->setValueBefore($oldFileName);
        $filemanagerLogObj->setValueAfter($filename);
        $filemanagerLogObj->setDate(new \DateTime("now"));
        $this->_em->persist($filemanagerLogObj);
        $this->_em->flush();

        return true;
    }

    /**
     * Method to save filemanager items
     *
     * @param array $filemanagerDetails filemanager details
     *
     * @return
     */
    public function saveFilemanagerFile($filemanagerDetails, $container) {
        $clubobj = $this->_em->getRepository('CommonUtilityBundle:FgClub')->find($filemanagerDetails['clubId']);
        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($filemanagerDetails['contactId']);
        $fileManagerIdsInserted = array();
        for($i=0;$i<count($filemanagerDetails['fileName']);$i++){
            //encrypt filename using SHA
            $fileCheck = new FileChecking($container);
            $fileCheck->filename = $filemanagerDetails['shaFileName'][$i];
            $fileCheck->filepath = 'uploads/' . $filemanagerDetails['clubId'] . '/content/';
            $shaFilename = $filemanagerDetails['shaFileName'][$i];
            $mmType = $fileCheck->get_mime_type();
            $mimeType = explode(';', $mmType);

            //insert into FgFileManager
            $filemanagerObj = new FgFileManager();
            $filemanagerObj->setClub($clubobj);
            $filemanagerObj->setVirtualFilename(md5($filemanagerDetails['randFileName'][$i]));
            $filemanagerObj->setEncryptedFilename($shaFilename);
            $filemanagerObj->setIsRemoved(0);
            $filemanagerObj->setSource($filemanagerDetails['module']);
            $this->_em->persist($filemanagerObj);
            $this->_em->flush();

            //insert into FgFileManagerVersion
            // $filemanagerDetails['fileName'][$i] Need to make incremental
            $checkFilename = $this->checkFilenameExist($filemanagerDetails['clubId'],$filemanagerDetails['fileName'][$i]);
            $filemanagerVersionObj = new FgFileManagerVersion();            
            $filemanagerVersionObj->setFilename($checkFilename);  
            $filemanagerVersionObj->setFileManager($filemanagerObj);
            $filemanagerVersionObj->setSize($filemanagerDetails['fileSize'][$i]);
            $filemanagerVersionObj->setUploadedAt(new \DateTime("now"));
            $filemanagerVersionObj->setUpdatedAt(new \DateTime("now"));
            $filemanagerVersionObj->setUploadedBy($contactObj);
            $filemanagerVersionObj->setUpdatedBy($contactObj);
            $filemanagerVersionObj->setMimeType($mimeType[0]);
            $this->_em->persist($filemanagerVersionObj);
            $this->_em->flush();

            //update filemanager set LatestVersion
            $filemanagerVersionEditObj = $this->_em->getRepository('CommonUtilityBundle:FgFileManagerVersion')->find($filemanagerVersionObj->getId());
            $filemanagerEditObj = $this->find($filemanagerObj->getId());
            $filemanagerEditObj->setLatestVersion($filemanagerVersionEditObj);
            $this->_em->persist($filemanagerEditObj);
            $this->_em->flush();

            //insert into
            $filemanagerLogObj = new FgFileManagerLog();
            $filemanagerLogObj->setFileManager($filemanagerObj);
            $filemanagerLogObj->setKind('Added');
            $filemanagerLogObj->setField('file added');
            $filemanagerLogObj->setChangedBy($contactObj);
            $filemanagerLogObj->setValueAfter($filemanagerDetails['fileName'][$i]);
            $filemanagerLogObj->setDate(new \DateTime("now"));
            $this->_em->persist($filemanagerLogObj);
            $this->_em->flush();

            $fileManagerIdsInserted[] = $filemanagerObj->getId();
        }
        
        return $fileManagerIdsInserted;
    }

    /**
     * Method to save filemanager items
     * 
     * @param array $filemanagerDetails filemanager details
     * 
     * @return 
     */
    public function getFileForDownloadById($fileId) {

        $qb = $this->createQueryBuilder('FM')
                ->select("FM.virtualFilename AS virtualFilename, FMV.filename AS originalFileName, FM.encryptedFilename AS encryptedFilename")
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "FMV", "WITH", "( FM.latestVersion = FMV.id) ")
                ->where('( FM.id = :Id )')
                ->setParameters(array(":Id" => $fileId));
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * Method to save filemanager items
     * 
     * @param array $filemanagerDetails filemanager details
     * 
     * @return 
     */
    public function getFileForDownloadByName($virtualFileName) {

        $qb = $this->createQueryBuilder('FM')
                ->select("FM.virtualFilename AS virtualFilename, FMV.filename AS originalFileName,FM.encryptedFilename as encryptedFilename")
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "FMV", "WITH", "( FM.latestVersion = FMV.id) ")
                ->where('( FM.virtualFilename = :virtualFilename )')
                ->setParameters(array(":virtualFilename" => $virtualFileName));
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * Method to get file details 
     * 
     * @param  $filemanagerId filemanager id
     * 
     * @return string
     */
    public function getFilename($filemanagerId) {

        $fileObj = $this->find($filemanagerId);
        $fileName = $fileObj->getLatestVersion()->getFilename();

        return $fileName;
    }

    /**
     * Method to get file array name 
     * 
     * @param  $selectedId filemanager id
     * 
     * @return array
     */
    public function getFileArrayName($selectedId) {

        $qb = $this->createQueryBuilder('f')
                ->select("fv.filename AS originalFileName,f.encryptedFilename as encryptedFilename")
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "fv", "WITH", "( f.latestVersion = fv.id) ")
                ->where("f.id IN ($selectedId)");
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    /**
     * Function to replace a selected file in file manager
     *
     * @param array  $fileManagerDetails file details
     * @param object $container          container object
     * @param int    $contactId          logged in contact
     * @param int    $clubId             current club id    
     * 
     * @return boolean
     */
    public function setFileManagerReplace($fileManagerDetails, $container, $contactId, $clubId) {

        $contactObj = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->find($contactId);
        $fileManagerObj = $this->find($fileManagerDetails['fileManagerId']);
        $fileVersionObj = $fileManagerObj->getLatestVersion();
        $oldfileName = $fileVersionObj->getFilename();
        $oldFileMimeType = $fileVersionObj->getMimeType();

        $fileCheck = new FileChecking($container);

        /* A new version of file is inserted  */

        $fileCheck->filename = $fileManagerDetails['shafilename'];
        $fileCheck->filepath = 'uploads/' . $clubId . '/content/';
        $mmType = $fileCheck->get_mime_type();
        $mimeType = explode(';', $mmType);
        $fileManagerDetails['fileName'][0] = $this->checkFilenameExist($clubId, $fileManagerDetails['fileName'][0]);
        $filemanagerVersionObj = new FgFileManagerVersion();
        $filemanagerVersionObj->setFilename($fileManagerDetails['fileName'][0]);
        $filemanagerVersionObj->setFileManager($fileManagerObj);
        $filemanagerVersionObj->setSize($fileManagerDetails['fileSize'][0]);
        $filemanagerVersionObj->setUploadedAt(new \DateTime("now"));
        $filemanagerVersionObj->setUpdatedAt(new \DateTime("now"));
        $filemanagerVersionObj->setUploadedBy($contactObj);
        $filemanagerVersionObj->setUpdatedBy($contactObj);
        $filemanagerVersionObj->setMimeType($mimeType[0]);
        $this->_em->persist($filemanagerVersionObj);
        $this->_em->flush();
        $lastInsertedVersionId = $filemanagerVersionObj->getId();
        $lastInsertedVersionObj = $this->_em->getRepository('CommonUtilityBundle:FgFileManagerVersion')->find($lastInsertedVersionId);

        /* Latest version is updated in file manager table */
        $fileManagerObj->setLatestVersion($lastInsertedVersionObj);
        $fileManagerObj->setEncryptedFilename($fileManagerDetails['shafilename']);
        //unlink old version files
        $this->_em->persist($fileManagerObj);
        $this->_em->flush();


        /* Insert Log */
        $filemanagerLogObj = new FgFileManagerLog();
        $filemanagerLogObj->setFileManager($fileManagerObj);
        $filemanagerLogObj->setKind('Replaced');
        $filemanagerLogObj->setField('File replaced');
        $filemanagerLogObj->setChangedBy($contactObj);
        $filemanagerLogObj->setValueBefore($oldfileName);
        $filemanagerLogObj->setValueAfter($fileManagerDetails['fileName'][0]);
        $filemanagerLogObj->setDate(new \DateTime("now"));
        $this->_em->persist($filemanagerLogObj);
        $this->_em->flush();

        return true;
    }

    /**
     * Method to get all file id
     * 
     * @param  $selectedId filemanager id
     * 
     * @return array
     */
    public function getAllFileId($clubId, $searchValue) {

        $qb = $this->createQueryBuilder('fm')
                ->select("fm.id AS filemanagerId")
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "FMV", "WITH", "( fm.latestVersion = FMV.id) ")
                ->where('fm.club=:clubId');
        if ($searchValue != '') {
            $qb->andWhere('FMV.filename like :searchVal');
            $qb->setParameter('searchVal', '%' . $searchValue . '%');
        }
        $qb->setParameter('clubId', $clubId);

        $result = $qb->getQuery()->getArrayResult();
        $IdArray = array_map('current', $result);
        $IdArray = implode(",", $IdArray);

        return $IdArray;
    }

    /**
     * Method to delete selected file
     * 
     * @param  $filemanagerId filemanager id
     * 
     * @return array
     */
    public function fileMarkForDelete($filemanagerId) {
        $fileIds = explode(",", $filemanagerId);
        foreach ($fileIds as $Id) {
            $fileObj = $this->find($Id);
            $fileObj->setIsRemoved(1);
            $this->_em->persist($fileObj);
        }

        $this->_em->flush();
        return true;
    }

    /**
     * Method to restore deleted file
     * 
     * @param  $filemanagerIds filemanager ids
     * 
     * @return array
     */
    public function restoreMarkedFile($filemanagerIds) {
        $fileIds = explode(",", $filemanagerIds);
        foreach ($fileIds as $Id) {
            $fileObj = $this->find($Id);
            $fileObj->setIsRemoved(0);
            $this->_em->persist($fileObj);
        }

        $this->_em->flush();
        return true;
    }

    /**
     * 
     * @param type $clubId
     * @param type $type image or all
     * @param type $searchValue search value
     * @return type
     */
    public function getAllDownloaddata($clubId, $type = 'image', $searchValue) {
        $qb = $this->createQueryBuilder('fm')
                ->select("fm.id AS filemanagerId")
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "FMV", "WITH", "( fm.latestVersion = FMV.id) ")
                ->where('fm.club=:clubId');
        if ($searchValue != '') {
            $qb->andWhere('FMV.filename like :searchVal');
            $qb->setParameter('searchVal', '%' . $searchValue . '%');
        }
        if ($type == 'image') {
            $imageArray = array('image/png', 'image/gif', 'image/x-ms-bmp', 'image/pjpeg', 'image/jpeg', 'image/x-icon', 'image/x-windows-bmp', 'image/bmp');
            $qb->andWhere('FMV.mimeType IN (:imagetypeArray)');
            $qb->setParameter('imagetypeArray', $imageArray);
        }
        $qb->setParameter('clubId', $clubId);

        $result = $qb->getQuery()->getArrayResult();
        $IdArray = array_map('current', $result);
        $IdArray = implode(",", $IdArray);

        return $IdArray;
    }

    /**
     * Method to delete selected file
     * 
     * @param  $filemanagerId filemanager id
     * 
     * @return array
     */
    public function fileDelete($filemanagerId, $clubId) {
        $fileIds = explode(",", $filemanagerId);
        foreach ($fileIds as $Id) {
            $fileObj = $this->find($Id);
            $fileName = $fileObj->getEncryptedFilename();
            $uploadPath = 'uploads/' . $clubId . '/content/';
            unlink($uploadPath . $fileName);
            $this->_em->remove($fileObj);
        }

        $this->_em->flush();
        return true;
    }

    public function checkFilenameExist($clubId, $filename, $fileId = '') {
        $removeChars = array("'", '"', '!', '$', '`', '~', '%', '^', '*', '+', '=', '|', "\\", '{', '}', '[', ']', ':', ';', '<', '>', '?', '/', ' ', '#', '&', ',');
        $filename = str_replace($removeChars, '', $filename);
        $qb = $this->createQueryBuilder('fm')
                ->select('count(fm.id) as totalCount')
                ->innerJoin("CommonUtilityBundle:FgFileManagerVersion", "FMV", "WITH", "( fm.latestVersion = FMV.id) ")
                ->where('fm.club=:clubId')
                ->andWhere('FMV.filename =:fileName');
        if ($fileId != '') {
            $qb->andWhere('fm.id !=:fileId');
            $qb->setParameter('fileId', $fileId);
        }
        $qb->setParameter('fileName', $filename);
        $qb->setParameter('clubId', $clubId);
        $result = $qb->getQuery()->getSingleScalarResult();

        $fileSplitArray = explode('.', $filename);
        $filename = ($result['totalCount'] > 0) ? $fileSplitArray[0] . "(" . $result['totalCount'] . ")." . $fileSplitArray[1] : $filename;

        return $filename;
    }
    /**
    * Method to get encripted file datails from real name.
    * 
    * @param string $filename
    * 
    * @return encripted filename
    */
    public function getFileDetailsFromFilename($filename) {
        
        $conn = $this->getEntityManager()->getConnection();
        $fileselection = "SELECT FM.id AS id, FM.virtual_filename AS virtualFilename, FM.encrypted_filename AS encryptedFilename "
                            ." FROM `fg_cn_newsletter_file_map` AS NFM"
                            ." INNER JOIN fg_file_manager as FM ON FM.id=NFM.file_manager_id"
                            ." WHERE NFM.`file_pattern` = '$filename'";
        $result = $conn->fetchAll($fileselection);
        if(!empty($result)){
            return $result[0];
        }else{
            return false;
        }
        
    }

}
