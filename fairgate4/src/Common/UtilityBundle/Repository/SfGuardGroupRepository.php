<?php

Namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUserrights;
use Common\UtilityBundle\Util\FgSettings;
use Common\UtilityBundle\Util\FgUtility;

/**
 * SfGuardGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SfGuardGroupRepository extends EntityRepository
{

    /**
     * Function to get all user rights to contacts in the club
     *
     * @param int $conn Connection
     * @param int $club Club id
     *
     * @return Array
     */
    public function getAllGroupsContacts($conn, $club)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $sql = "SELECT  sf.contact_id,contactNameNoSort(sf.contact_id,0) as contactNameYOB,contactName(sf.contact_id) as contactname,sf.is_security_admin,sf.id as user_id,sfgu.group_id,sfg.name, sfg.module_type,sfg.type, DATE_FORMAT(sfgu.created_at, '$dateFormat') as createdAt, sf.is_readonly_admin
               FROM sf_guard_user_group sfgu 
               INNER JOIN sf_guard_group sfg ON sfgu.group_id=sfg.id  AND sfg.type IN ('club','federation')
               INNER JOIN  sf_guard_user sf ON sfgu.user_id=sf.id
               WHERE sf.club_id=:clubId AND sfg.type IN ('club','federation') ORDER BY contactNameNoSort(sf.contact_id,0) ASC";

        $result = $conn->fetchAll($sql, array('clubId' => $club));

        return $result;
    }

    /**
     * fed admin eligibity - fedowned contact whose primary email does not coincide with lower level contacts
     * @param object $conn      conn
     * @param int $clubId       club Id
     * @return array
     */
    public function fedAdminEligibility($container, $conn, $clubId)
    {
        $primaryEmail = $container->getParameter('system_field_primaryemail');
        $sql = "SELECT C.id "
            . "FROM master_federation_{$clubId} AS mc "
            . "LEFT JOIN fg_cm_contact C ON mc.fed_contact_id = C.fed_contact_id "
            . "LEFT JOIN master_system S on C.fed_contact_id=S.fed_contact_id "
            . "LEFT JOIN fg_club fc On fc.id = C.club_id AND fc.club_type = 'federation' "
            . "where C.is_permanent_delete=0 and (C.main_club_id = '{$clubId}' ) AND C.is_deleted=0 AND C.club_id = '{$clubId}' AND S.3 IS NOT NULL AND S.`$primaryEmail` !='' "
            . "AND lower(S.`$primaryEmail`) NOT IN ( "
            . "SELECT DISTINCT(lower(ms.`$primaryEmail`)) "
            . "FROM fg_cm_contact fc "
            . "INNER JOIN master_system ms On ms.fed_contact_id = fc.fed_contact_id "
            . "WHERE fc.is_permanent_delete=0 AND fc.club_id IN (select fgc.id from fg_club fgc where fgc.federation_id = '{$clubId}' ) AND ms.`$primaryEmail` IS NOT NULL)";
        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * Function to save all user rights from settinga and overview
     *
     * @param int   $conn            Connection
     * @param Array $contentArray    Content array
     * @param int   $clubId          Club ids
     * @param int   $loggedContactId Loggect contact id
     *
     * @return Array
     */
    public function saveUserRights($conn, $contentArray, $clubId, $loggedContactId, $container)
    {

        $userRightsObj = new FgUserrights($contentArray, $conn, $clubId, $loggedContactId, $container);
        $resultSuccess = $userRightsObj->saveUserRights();
        return $resultSuccess;
    }

    /**
     * Function to get contacts in a user group
     *
     * @param int   $conn    Connection
     * @param Array $club    Club
     * @param int   $contact Contact
     *
     * @return Array
     */
    public function getGroupDetails($conn, $club, $contact)
    {
        $sql = "SELECT sfg.name,sfg.type ,sf.contact_id,sfgu.group_id,sfgu.user_id
              FROM sf_guard_group sfg
              LEFT JOIN sf_guard_user_group sfgu ON sfgu.group_id=sfg.id
              LEFT JOIN sf_guard_user sf ON sf.id=sfgu.user_id
              WHERE sf.contact_id=:contact AND sf.club_id=:club";

        $result = $conn->fetchAll($sql, array('contact' => $contact, 'club' => $club));
        $returnArray = array();
        foreach ($result as $val) {
            $returnArray[$val['group_id']] = $val;
        }

        return $returnArray;
    }

    /**
     * Function to get contacts in a user group
     *
     * @param int   $conn Connection
     * @param Array $club Club
     *
     * @return Array
     */
    public function getGroupDetailsAllUSer($conn, $club)
    {
        $sql = "SELECT sfg.name,sfg.type ,sf.contact_id,sfgu.group_id,sfgu.user_id
              FROM sf_guard_group sfg
              LEFT JOIN sf_guard_user_group sfgu ON sfgu.group_id=sfg.id
              LEFT JOIN sf_guard_user sf ON sf.id=sfgu.user_id
              WHERE sf.club_id=:club ORDER BY sfg.sort_order ASC";

        $result = $conn->fetchAll($sql, array('club' => $club));

        return $result;
    }

    /**
     * Function to get all user rights groups
     *
     * @param int $conn Connection
     *
     * @return Array
     */
    public function getAllGroups($conn, $type = "'club'")
    {
        $sql = "SELECT sfg.name,sfg.type,sfg.id as group_id,sfg.module_type, sfg.is_readonly
              FROM sf_guard_group sfg
              WHERE sfg.type IN($type) ORDER BY sfg.sort_order ASC";

        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * This function is used to delete the federation user rights
     *
     * @param int $clubId    Club id
     * @param int $contactId Contact id
     */
    public function deleteFederationUserrightsOfContact($clubId, $contactId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $deleteQuery = "DELETE FROM sf_guard_user WHERE club_id = :clubId AND contact_id = :contactId;";
        $conn->executeQuery($deleteQuery, array(':clubId' => $clubId, ':contactId' => $contactId));
    }

    /**
     * Function to get group name
     *
     * @param int $groupId Group id
     *
     * @return String Group name
     */
    public function getGroupName($groupId)
    {
        $groupName = $this->createQueryBuilder('g')
            ->select('g.name')
            ->where('g.id=:groupId')
            ->setParameter('groupId', $groupId);

        $groupName = $groupName->getQuery()->getResult();

        $conn = $this->_em->getConnection();
        $gpName = FgUtility::getSecuredDataString($groupName[0]['name'], $conn);

        return $gpName;
    }

    /**
     * Function to find count of each group
     *
     * @param Int $clubId  Club id
     * @param Int $groupId Group id
     *
     * @return Array
     */
    public function clubAdministratorsCount($clubId, $groupId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT count(sgug.user_id) as count" .
            " FROM sf_guard_user_group sgug" .
            " WHERE sgug.user_id in (SELECT id FROM sf_guard_user sgu WHERE sgu.club_id=" . $clubId . ")" .
            " and sgug.group_id = (SELECT id FROM sf_guard_group WHERE id=" . $groupId . ")";

        return $conn->fetchAll($sql);
    }

    /**
     * Function to get team user rights to contacts in the club
     *
     * @param int $conn Connection
     * @param int $club Club id
     * @param int $grpId group Id
     *
     * @return Array
     */
    public function teamAdminList($conn, $club, $contact, $team, $masterTable, $clubobj)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $clubtype = $clubobj->get('type');
        $sql = "SELECT ";
        if ($contact == 0) {
            $sql.="r.id as team, ";
            if ($team != 0) {
                $sql.="( CASE WHEN rc.contact_id = sf.contact_id THEN 1 else 0 end )  as isTeamMember, fg_cm_contact.is_stealth_mode, ";
            }

            $sql.="DATE_FORMAT(sfgut.created_at, '$dateFormat') as createdAt, r.type as roleType, CONCAT('c_',sf.contact_id) as contactId,sf.contact_id,contactNameYOB(sf.contact_id) as contactNameYOB,contactNameNoSort(sf.contact_id, 0) as contactname,
        sf.id as user_id,sfgu.group_id,sfg.name, sfg.module_type,sfg.type";
        } else {
            $sql.="r.id as team";
        }
        $sql.= " FROM sf_guard_user sf
               LEFT JOIN sf_guard_user_group sfgu ON sfgu.user_id=sf.id
               LEFT JOIN sf_guard_group sfg ON sfgu.group_id=sfg.id  AND sfg.type='role'
               LEFT JOIN sf_guard_user_team sfgut ON sfgut.group_id = sfg.id AND sfgut.user_id=sf.id
               LEFT JOIN fg_rm_role r ON r.id = sfgut.role_id ";
        if ($team != 0) {
            $sql.= " LEFT JOIN " . $masterTable . " m ";
            if ($clubtype == "federation")
                $sql.= " ON sf.contact_id=m.fed_contact_id INNER JOIN fg_cm_contact on m.fed_contact_id = fg_cm_contact.fed_contact_id ";
            else if ($clubtype == "sub_federation")
                $sql.= " ON sf.contact_id=m.contact_id INNER JOIN fg_cm_contact on m.contact_id = fg_cm_contact.subfed_contact_id ";
            else
                $sql.= " ON sf.contact_id=m.contact_id INNER JOIN fg_cm_contact on m.contact_id = fg_cm_contact.id ";

            $sql .= "LEFT JOIN fg_rm_category_role_function AS rcrf ON r.id = rcrf.role_id  LEFT JOIN fg_rm_role_contact AS rc ON rcrf.id=rc.fg_rm_crf_id AND  rc.contact_id = sf.contact_id";
        }
        $sql .= " WHERE sf.club_id= :clubId AND sfg.type='role' ";
        if ($team != 0) {
            $sql.= "AND sfgut.role_id = '" . $team . "' ";
        }
        if ($contact != 0) {
            $sql.= "AND sf.contact_id='$contact' AND sfg.module_type='all' ";
        }
        $sql.= "ORDER BY contactNameNoSort(sf.contact_id,0),r.id ASC";

        $result = $conn->fetchAll($sql, array('clubId' => $club));

        if ($contact != 0) {
            $existingArray = array();
            foreach ($result as $key => $val) {
                array_push($existingArray, $val['team']);
            }
            return $existingArray;
        }
        return $result;
    }

    /**
     * get team administrators
     * @param obj $conn
     * @return array
     */
    public function teamAdministrators($conn)
    {
        $sql = "SELECT s.id,s.type,s.module_type,s.name FROM sf_guard_group s WHERE s.type='role'";
        $result = $conn->fetchAll($sql);
        return $result;
    }

    /**
     * Function to get group name
     *
     * @return String Group name
     */
    public function getAllTeamGroups()
    {
        $conn = $this->getEntityManager()->getConnection();
        $groupNames = "SELECT g.name,g.id FROM sf_guard_group g WHERE g.type='role' AND g.module_type!='all'";

        return $conn->fetchAll($groupNames);
    }

    /**
     * Function to get contacts in a team group
     *
     * @param int   $conn    Connection
     * @param Array $club    Club
     * @param int   $contact Contact
     *
     * @return Array
     */
    public function getTeamGroupDetails($conn, $club, $contact)
    {
        $sql = "SELECT sfg.name,sfg.type ,sf.contact_id,sfgt.group_id,sfgt.user_id,sfgt.role_id,sfg.module_type,r.type  as roleType
              FROM sf_guard_group sfg
              LEFT JOIN sf_guard_user_team sfgt ON sfgt.group_id=sfg.id
              LEFT JOIN sf_guard_user sf ON sf.id=sfgt.user_id
              LEFT JOIN fg_rm_role r ON r.id=sfgt.role_id
              WHERE sf.contact_id=:contact AND sf.club_id=:club";

        $result = $conn->fetchAll($sql, array('contact' => $contact, 'club' => $club));

        return $result;
    }

    /**
     * get club admins of a club
     * @param int $clubId
     * @param obj $conn
     * @return array
     */
    public function getClubAdmins($clubId, $conn)
    {
        $sql = "SELECT u.contact_id FROM sf_guard_user u LEFT JOIN sf_guard_user_group ug ON ug.user_id=u.id "
            . "WHERE ug.group_id IN (select id from sf_guard_group where module_type='all' and type='club') "
            . "and u.club_id = '$clubId'";
        $getClubAdmin = $conn->fetchAll($sql);

        $getClubAdmins = array();
        foreach ($getClubAdmin as $key => $val) {
            array_push($getClubAdmins, $val['contact_id']);
        }

        return $getClubAdmins;
    }

    /**
     * get fed admins of in a federation
     * @param int $fedId
     * @param obj $conn
     * @return array
     */
    public function getFedAdmins($fedId, $conn)
    {
        $sql = "SELECT u.id FROM fg_cm_contact u  "
            . "WHERE u.is_fed_admin=1  "
            . "and u.club_id = '$fedId'";
        $getFedAdmin = $conn->fetchAll($sql);

        $getFedAdmins = array();
        foreach ($getFedAdmin as $key => $val) {
            array_push($getFedAdmins, $val['id']);
        }

        return $getFedAdmins;
    }

    /**
     * if is a team member
     * @param int $roleId
     * @param int $contactId
     * @param obj $conn
     * @return array
     */
    public function isTeamMember($roleId, $contactId, $conn)
    {

        $sql = "SELECT ( CASE WHEN rc.contact_id IS NOT NULL THEN 1 else 0 end )  as isTeamMember FROM fg_rm_role r  INNER JOIN fg_rm_category_role_function AS rcrf ON r.id = rcrf.role_id "
            . " LEFT JOIN fg_rm_role_contact AS rc ON rcrf.id=rc.fg_rm_crf_id WHERE rc.contact_id = $contactId  and r.id=$roleId";
        $isTeamMember = $conn->fetchAll($sql);

        return $isTeamMember;
    }

    /**
     * get calendar admins
     * @param   obj       $conn
     * @param   int       $clubId
     * @param   string    $masterTable
     * @return  array
     */
    public function getCalendarAdmin($conn, $clubId, $masterTable)
    {

        $dateFormat = FgSettings::getMysqlDateFormat();

        $sql = "SELECT DATE_FORMAT(sfug.created_at, '$dateFormat') as createdAt, sfu.id as user_id,g.type ,sfu.contact_id,sfug.user_id,g.module_type,
             fcc.is_stealth_mode as stealth,contactNameNoSort(sfu.contact_id, 0) as contactname
              FROM sf_guard_user_group sfug
              LEFT JOIN sf_guard_user sfu ON sfu.id=sfug.user_id
              LEFT JOIN fg_cm_contact fcc ON fcc.id = sfu.contact_id
              LEFT JOIN sf_guard_group g ON g.id=sfug.group_id
              WHERE sfu.club_id=:club AND g.type = 'club' AND g.module_type='calendar' 
              ORDER BY contactNameNoSort(sfu.contact_id,0) ASC";

        $result = $conn->fetchAll($sql, array('club' => $clubId));

        return $result;
    }

    /**
     * get internal admins (club, gallery, article)
     * @param   obj       $conn
     * @param   int       $clubId
     * @param   string    $masterTable
     * @return  array
     */
    public function getInternalAdmin($conn, $clubId, $masterTable, $contactFrom = '')
    {

        $dateFormat = FgSettings::getMysqlDateFormat();
        $sql = "SELECT DATE_FORMAT(sfug.created_at, '$dateFormat') as createdAt, sfu.id as user_id,g.type ,sfu.contact_id,sfug.user_id,g.module_type,
             c.is_stealth_mode as stealth,contactNameNoSort(sfu.contact_id, 0) as contactname
              FROM sf_guard_user_group sfug
              LEFT JOIN sf_guard_user sfu ON sfu.id=sfug.user_id
              LEFT JOIN " . $masterTable . " m ON sfu.contact_id=m.$contactFrom
              LEFT JOIN sf_guard_group g ON g.id=sfug.group_id
              LEFT JOIN fg_cm_contact c ON c.id=m.$contactFrom
              WHERE sfu.club_id=:club AND g.type = 'club' AND g.module_type IN ('calendar','gallery', 'article')  
              ORDER BY contactNameNoSort(sfu.contact_id,0) ASC";

        $result = $conn->fetchAll($sql, array('club' => $clubId));

        return $result;
    }

    /**
     * get list of groups with type club 
     * @param object $conn
     * @return array
     */
    public function internalAdminList($conn)
    {
        //select in the order article. calendar, gallery
        $sql = " SELECT sfg.id,sfg.name,sfg.module_type FROM sf_guard_group sfg where sfg.type='club' and sfg.module_type IN ('article','calendar','gallery') ORDER BY sfg.name ASC ";
        $result = $conn->fetchAll($sql);

        return $result;
    }

    /**
     * get list of user by user  group ,club
     * @param object $conn
     * @param object $club
     * @param object $group
     * @return array
     */
    public function getGroupDetailsAllUSerByGroup( $club, $group)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $sql = "SELECT sfg.name,sf.contact_id,contactNameYOB(sf.contact_id) as contactName,contactNameNoSort(sf.contact_id,0) as contactname,sfg.type,sfg.module_type, sfgu.group_id,sfgu.user_id,DATE_FORMAT(sfgu.created_at, '$dateFormat') as createdAt, fcc.is_stealth_mode as stealth
             FROM sf_guard_group sfg
             LEFT JOIN sf_guard_user_group sfgu ON sfgu.group_id=sfg.id
             LEFT JOIN sf_guard_user sf ON sf.id=sfgu.user_id
             LEFT JOIN fg_cm_contact fcc ON fcc.id = sf.contact_id
             WHERE sf.club_id=:club AND sfgu.group_id=:group ORDER BY contactNameNoSort(sf.contact_id,0) ASC";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('club', $club);
        $stmt->bindValue('group', $group);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    /**
     * Method to get article admins
     * 
     * @param int $clubId clubId
     * 
     * @return array $result result array
     */
    public function getArticleAdmin($clubId)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();
        $sql = "SELECT DATE_FORMAT(sfug.created_at, '$dateFormat') as createdAt, sfu.id as user_id,g.type ,sfu.contact_id,sfug.user_id,g.module_type,
             fcc.is_stealth_mode as stealth,contactNameNoSort(sfu.contact_id, 0) as contactname
              FROM sf_guard_user_group sfug
              LEFT JOIN sf_guard_user sfu ON sfu.id=sfug.user_id
              LEFT JOIN fg_cm_contact fcc ON fcc.id = sfu.contact_id
              LEFT JOIN sf_guard_group g ON g.id=sfug.group_id
              WHERE sfu.club_id=:club AND g.type = 'club' AND g.module_type='article' 
              ORDER BY contactNameNoSort(sfu.contact_id,0) ASC";

        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('club', $clubId);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }
    
    /**
     * Function to check ApiAdmin
     * @param int  $contact contacId
     * 
     * @return array
     */
    public function isApiAdmin($conn, $contact) {
        $sql = "SELECT sfg.name,sfg.type ,sf.contact_id,sfgu.group_id,sfgu.user_id
              FROM sf_guard_group sfg
              LEFT JOIN sf_guard_user_group sfgu ON sfgu.group_id=sfg.id
              LEFT JOIN sf_guard_user sf ON sf.id=sfgu.user_id
              WHERE sf.id=:contact AND  sfg.module_type IN('all','api') and  sfg.type='fairgate'  ";
     

        return $result = $conn->fetchAll($sql, array('contact' => $contact));
    }

}
