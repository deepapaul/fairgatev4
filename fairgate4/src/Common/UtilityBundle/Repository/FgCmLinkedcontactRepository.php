<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Repository\Pdo\ContactPdo;
use Common\UtilityBundle\Util\FgUtility;

/**
 * FgCmLinkedcontactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgCmLinkedcontactRepository extends EntityRepository
{

    /**
     * Function to get household or other connections contacts
     *
     * @param int    $clubId      Club id
     * @param int    $contactId   Contact id
     * @param int    $isHousehold set true for Household
     * @param string $clubType    Club type
     *
     * @return type
     */
    public function getLinkedContacts($clubId, $contactId, $isHousehold, $clubType = false, $lang)
    {
        $conn = $this->getEntityManager()->getConnection();
        $hSelect = $join = '';
        //get contact id from corresponding table(if club type is federation the table field name is fed_contact_id else contact_id)
        $contactFrom = ($clubType == 'federation') ? "fed_contact_id" : "contact_id";
        if ($isHousehold) {
            $household = "AND LC.type='household'";
            $hSelect = "C.is_household_head,C.is_seperate_invoice,";
            if ($clubType == 'federation' || $clubType == 'sub_federation') {
                $join = "LEFT JOIN master_federation_{$clubId} AS MC ON MC.$contactFrom=LC.linked_contact_id";
            } else {
                $join = "LEFT JOIN master_club_{$clubId} AS MC ON MC.contact_id=LC.linked_contact_id";
            }
        } else {
            $household = "AND LC.type != 'household'";
        }

        $sql = "SELECT ContactName(C.id) AS contactName,R.id AS rId,LC.relation AS relation,IF(Ri18n.title_lang='',R.name,Ri18n.title_lang) as name,C.id AS contact_id,LC.id,CASE C.is_company WHEN 1 THEN MS.68 ELSE MS.21 END AS profilbild,$hSelect C.club_id,C.is_company
                FROM `fg_cm_linkedcontact` LC
                LEFT JOIN fg_cm_relation R ON LC.relation_id = R.id
                LEFT JOIN fg_cm_relation_i18n Ri18n ON R.id=Ri18n.id AND Ri18n.lang='$lang'
                LEFT JOIN fg_cm_contact C ON LC.linked_contact_id = C.id
                LEFT JOIN master_system MS ON C.fed_contact_id = MS.fed_contact_id $join
                WHERE LC.contact_id = '$contactId' AND LC.club_id='$clubId' AND C.is_permanent_delete = 0 $household
                ORDER BY C.is_company,contactName ASC";

        return $conn->fetchAll($sql);
    }

    /**
     * Function to get Companies, of which this contact is the main contact
     *
     * @param int $contactId Contact id
     *
     * @return array
     */

    public function getLinkedDefaultContacts($contactId,$clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $activeC = "AND (N.main_club_id=N.club_id OR (N.fed_membership_cat_id IS NOT NULL AND (N.old_fed_membership_id IS NOT NULL OR N.is_fed_membership_confirmed='0')))";
        
        $sql = "SELECT C.fed_contact_id, C.is_company, ContactNameNoSort(C.id, 0) AS contactName, C.id, C.comp_def_contact_fun, MS.9 AS companyName, MS.68 AS profilbild, C.club_id AS clubId,
                (SELECT N.id FROM fg_cm_contact N WHERE N.fed_contact_id = C.fed_contact_id AND N.club_id='.$clubId.' $activeC LIMIT 1) AS mainContactClub
                FROM `fg_cm_contact` C
                INNER JOIN master_system MS ON C.fed_contact_id = MS.fed_contact_id
                WHERE C.comp_def_contact IN (SELECT fed_contact_id FROM fg_cm_contact WHERE id='$contactId') AND 
                    C.has_main_contact=1 AND 
                    C.is_permanent_delete = 0 AND
                    C.club_id = $clubId
                ORDER BY companyName ASC";
        
        return $conn->fetchAll($sql);
    }

    /**
     * Function to get main contact of a Company
     *
     * @param int $contactId Contact id
     *
     * @return array
     */
    public function getMainContact($contactId, $clubId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $activeC = "AND (N.main_club_id=N.club_id OR (N.fed_membership_cat_id IS NOT NULL AND (N.old_fed_membership_id IS NOT NULL OR N.is_fed_membership_confirmed='0')))";
        $sql = "SELECT ContactName(C.id) AS contactname, C.*,MS.21 AS profilbild,C.club_id AS clubId,(SELECT N.id FROM fg_cm_contact N WHERE N.fed_contact_id=$contactId AND N.club_id=$clubId $activeC LIMIT 1) as mainContactClub
                FROM `fg_cm_contact` C
                LEFT JOIN master_system MS ON C.fed_contact_id = MS.fed_contact_id
                WHERE C.id = '$contactId' AND C.is_permanent_delete = 0";
        $result = $conn->fetchAll($sql);

        return $result[0];
    }

    /**
     * Function to get connections between contacts on adding a contact
     *
     * @param int    $clubId          Club id
     * @param int    $contactId       Contact id
     * @param int    $linkedContactId Linked contact id
     * @param int    $relationId      Relation id
     * @param string $relationType    Relation type
     * @param object $clubService     Club service
     * @param object $container       Container object
     *
     * @return array $implications Array of connections
     */
    public function getImplications($clubId, $contactId, $linkedContactId, $relationId, $relationType, $clubService, $container, $lang)
    {
        $conn = $this->getEntityManager()->getConnection();
        $results = array();
        $implications = array();
        $contactIds = array($contactId, $linkedContactId);
        if ($contactId != $linkedContactId) {
            if ($relationType == 'otherpersonal') {
                $results = $conn->fetchAll("SELECT a.id, IF(Ri18n.title_lang='',a.name,Ri18n.title_lang) as name FROM `fg_cm_relation` a LEFT JOIN fg_cm_relation_i18n Ri18n ON a.id=Ri18n.id AND Ri18n.lang='$lang'"
                    . "WHERE a.id IN ($relationId,(SELECT b.first_level_relation_id FROM `fg_cm_relation_first_level` b WHERE b.relation_id=$relationId))");
                $relationNamesArray = array();
                foreach ($results as $result) {
                    $relationNamesArray[$result['id']] = $result['name'];
                }
                $addedRelationName = $relationNamesArray[$relationId];
                $implications[] = '*#' . $linkedContactId . '#*' . ' ' . $container->get('translator')->trans('IS') . ' ' . $addedRelationName . ' ' . $container->get('translator')->trans('OF') . ' ' . '*#' . $contactId . '#*';
                unset($relationNamesArray[$relationId]);
                if (count($relationNamesArray) == 0) {
                    $implications[] = '*#' . $contactId . '#*' . ' ' . $container->get('translator')->trans('IS') . ' ' . $addedRelationName . ' ' . $container->get('translator')->trans('OF') . ' ' . '*#' . $linkedContactId . '#*';
                } else {
                    $oppRelation = array_shift(array_values($relationNamesArray));
                    $implications[] = '*#' . $contactId . '#*' . ' ' . $container->get('translator')->trans('IS') . ' ' . $container->get('translator')->trans($oppRelation) . ' ' . $container->get('translator')->trans('OF') . ' ' . '*#' . $linkedContactId . '#*';
                }
            } else if ($relationType == 'household') {
                $results = $conn->fetchAll("call DisplayImplications('$clubId','$contactId','$linkedContactId','$relationId','$lang')");
                foreach ($results as $result) {
                    $implications[] = '*#' . $result['contact_id'] . '#*' . ' ' . $container->get('translator')->trans('IS') . ' ' . $result['relation'] . ' ' . $container->get('translator')->trans('OF') . ' ' . '*#' . $result['linked_contact_id'] . '#*';
                    if (!in_array($result['contact_id'], $contactIds)) {
                        $contactIds[] = $result['contact_id'];
                    }
                    if (!in_array($result['linked_contact_id'], $contactIds)) {
                        $contactIds[] = $result['linked_contact_id'];
                    }
                }
            }
        }
        if (count($implications)) {
            $contactNames = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getContactName($contactIds, $conn, $clubService, $container);
            $implicationString = implode(',', $implications);
            foreach ($contactNames as $contactId => $contactName) {
                $implicationString = str_replace('*#' . $contactId . '#*', $contactName, $implicationString);
            }
            $implications = explode(',', $implicationString);
        }
        $conn->close();

        return $implications;
    }

    /**
     * Function to add or remove contact connections
     *
     * @param array   $connArray           Array containing connections for adding/removing
     * @param int     $clubId              Club id
     * @param int     $contactId           Contact id
     * @param boolean $isCompany           Whether company contact or not
     * @param string  $currHouseholdCntIds Ids of current household contacts
     * @param int     $currContact         Current contact id
     * @param object  $container           Container object
     * @param string  $clubType            Club Type
     * @param object  $clubService         Club service
     *
     * @return array $resultArray           Result Array containing errors if any
     */
    public function updateLinkedConnections($connArray, $clubId, $contactId, $isCompany, $currHouseholdCntIds, $currContact, $container, $clubType, $clubService, $lang)
    {
        //get contact id from corresponding table(if club type is federation the table field name is fed_contact_id else contact_id)
        $contactFrom = ($clubType == 'federation') ? "fed_contact_id" : "contact_id";
        $errorType = '';
        $currentDate = date('Y-m-d H:i:s');
        $connLogArray = array();
        $householdMainContact = $contactId;
        $setHouseholdMainContact = false;
        $addConnArray = array();
        $remHouseholdArray = array();
        $remHouseholdMainContacts = array();
        $addSeparateInvContacts = array();
        $remSeparateInvContacts = array();
        $defContFunQry = "";
        $addCompanyIds = array();
        $removeCompanyIds = array();
        $addConnectionArray = array();
        $personalRelationIds = array();
        $remConnectionArray = array();
        $allLinked = $addHouseholdCnts = array();
        $updateCntsChangeDate = array($contactId);
        $updateFedCntsChangeDate = array();
        $linkedContacts = array($contactId);
        $otherLinkdCntIds = array();
        $conn = $this->getEntityManager()->getConnection();
        foreach ($connArray as $connectionType => $connections) {
            foreach ($connections as $linkedContId => $connection) {
                $linkedContacts[] = $linkedContId;
                foreach ($connection as $relation => $connDetail) {
                    $relation = urldecode($relation);
                    if ($connectionType == 'household') {
                        if ($connDetail['is_deleted'] == '1') {
                            $remHouseholdArray[] = $linkedContId;
                            $remHouseholdMainContacts[] = $linkedContId;
                            $remSeparateInvContacts[] = $linkedContId;
                            $currHouseholdCnts = explode(',', $currHouseholdCntIds);
                            $remainingHouseholds = array_diff($currHouseholdCnts, $remHouseholdArray);
                            if ($relation == 'self' || count($remainingHouseholds) == 1) {
                                if ($relation == 'self') {
                                    if (count($currHouseholdCnts)) {
                                        $linkedContacts = array_merge($linkedContacts, $currHouseholdCnts);
                                    }
                                    $removeContact = $contactId;
                                } else {
                                    $remainingHouseholds = array_values($remainingHouseholds);
                                    $linkedContacts[] = $remainingHouseholds[0];
                                    $removeContact = $remainingHouseholds[0];
                                }
                                //get relations of household contacts
                                $houseHoldRltns = $conn->fetchAll("SELECT `linked_contact_id` AS lnkCntId, `relation_id` AS lnkRltnId "
                                    . "FROM `fg_cm_linkedcontact` WHERE `contact_id`=$removeContact AND `linked_contact_id` IN ($currHouseholdCntIds) "
                                    . "AND `type`='household' AND `club_id`=$clubId");
                                //log entry on removing self contact from household
                                foreach ($houseHoldRltns as $houseHoldRltn) {
                                    $lnkContact = $houseHoldRltn['lnkCntId'];
                                    $lnkReltn = $houseHoldRltn['lnkRltnId'];
                                    $personalRelationIds[] = $lnkReltn;
                                    $connLogArray[$removeContact . $lnkContact] = "('$removeContact','$lnkContact','$clubId','$currentDate','Household contact','*#rel_$lnkReltn#*','*#cont_$lnkContact#*','-','$currContact','club')";
                                    $updateCntsChangeDate[] = $lnkContact;
                                    $connLogArray[$lnkContact . $removeContact] = "('$lnkContact','$removeContact','$clubId','$currentDate','Household contact','*#opprel_$lnkReltn#*','*#cont_$removeContact#*','-','$currContact','club')";
                                    $updateCntsChangeDate[] = $removeContact;
                                }
                            }
                            if ($relation != 'self') {
                                $personalRelationIds[] = $relation;
                                $connLogArray[$contactId . $linkedContId] = "('$contactId','$linkedContId','$clubId','$currentDate','Household contact','*#rel_$relation#*','*#cont_$linkedContId#*','-','$currContact','club')";
                                $updateCntsChangeDate[] = $linkedContId;
                                $connLogArray[$linkedContId . $contactId] = "('$linkedContId','$contactId','$clubId','$currentDate','Household contact','*#opprel_$relation#*','*#cont_$contactId#*','-','$currContact','club')";
                                $updateCntsChangeDate[] = $contactId;
                            }
                        } else {
                            if ($connDetail['is_new'] == '1') {
                                if (($linkedContId != $contactId) && !in_array($linkedContId, $addHouseholdCnts) && !in_array($linkedContId, $allLinked)) {
                                    //if contact is a household
                                    $contactInHH = $conn->fetchAll("SELECT `type` AS type, `linked_contact_id` AS linked FROM `fg_cm_linkedcontact` WHERE `contact_id`=$contactId AND type='household'");
                                    //if linkedcontact is a household
                                    $linkedContactInHH = $conn->fetchAll("SELECT `type` AS type, `linked_contact_id` AS linked FROM `fg_cm_linkedcontact` WHERE `contact_id`=$linkedContId AND type='household'");
                                    foreach ($linkedContactInHH as $result) {
                                        $allLinked[] = $result['linked'];
                                        //last updated
                                        $updateCntsChangeDate[] = $result['linked'];
                                    }
                                    //last updated
                                    foreach ($contactInHH as $conResult) {
                                        $updateCntsChangeDate[] = $conResult['linked'];
                                    }
                                    //FAIR-1771-case-1:If contact A isn't in a household, but B is in an existing household, the existing main contact of household B gets main contact of the united household.
                                    //FAIR-1771-case-2:If contact A is in a household, but contact B isn't in a household, the existing main contact of household A gets main contact of the united household.
                                    if ((count($linkedContactInHH) > 0 && count($contactInHH) == 0) || (count($linkedContactInHH) == 0 && count($contactInHH) > 0)) {
                                        $setHouseholdMainContact = false;
                                    } else if (count($linkedContactInHH) > 0 && count($contactInHH) > 0) {
                                        //FAIR-1771-case-3:If both contact A and contact B are in an existing household, the existing main contact of household B gets main contact of the united household.
                                        $setHouseholdMainContact = false;
                                        //$householdMainContact = $contactId;
                                        $allLinkedIds = implode(',', $allLinked);
                                        $findHHMainOfLinked = $conn->fetchAll("SELECT `id` AS id FROM `fg_cm_contact` WHERE `id` IN ($allLinkedIds,$linkedContId) AND `is_household_head` = 1");
                                        $remHouseholdMainContacts[] = $findHHMainOfLinked[0]['id'];
                                    } else {
                                        $setHouseholdMainContact = true;
                                    }
                                    $addConnArray[] = "('$clubId','$contactId','$linkedContId','$relation')";
                                    $addHouseholdCnts[] = $linkedContId;
                                    $personalRelationIds[] = $relation;
                                    $updateCntsChangeDate[] = $linkedContId;
                                }
                            }
                            if (isset($connDetail['is_main_contact'])) {
                                //for updating household main contact
                                if ($connDetail['is_main_contact'] == '1') {
                                    $setHouseholdMainContact = true;
                                    $householdMainContact = $linkedContId;
                                } else {
                                    $remHouseholdMainContacts[] = $linkedContId;
                                }
                            }
                            if (isset($connDetail['seperate_invoice'])) {
                                //for updating separate invoice contacts
                                if ($connDetail['seperate_invoice'] == '1') {
                                    $addSeparateInvContacts[] = $linkedContId;
                                } else {
                                    $remSeparateInvContacts[] = $linkedContId;
                                }
                            }
                        }
                    } else if ($connectionType == 'company') {
                        if ($connDetail['is_new'] == '1') {
                            $relation = FgUtility::getSecuredDataString(urldecode($relation), $conn);
                            $companyId = $isCompany ? $contactId : $linkedContId;
                            $mainContactId = $isCompany ? $linkedContId : $contactId;
                            $addCompanyIds[] = $companyId;
                            $defContFunQry .= "WHEN $companyId THEN '$relation' ";
                            $fedCompanyId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($companyId);
                            $mainFedContactId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($mainContactId);
                            $oldMainContact = $conn->fetchAll("SELECT comp_def_contact,comp_def_contact_fun AS relationName,contactName(comp_def_contact) as mainName,contactName({$fedCompanyId['fedContactId']}) as compName FROM `fg_cm_contact` WHERE `id` = {$fedCompanyId['fedContactId']} AND comp_def_contact IS NOT NULL AND comp_def_contact !='' ");
                            if (count($oldMainContact) > 0) {
                                $connLogArray[] = "('{$fedCompanyId['fedContactId']}','{$oldMainContact[0]['comp_def_contact']}',NULL,'$currentDate','Main contact','$relation','{$oldMainContact[0]['mainName']}','-','$currContact','global')";
                                $connLogArray[] = "('{$oldMainContact[0]['comp_def_contact']}','{$fedCompanyId['fedContactId']}',NULL,'$currentDate','Main contact of company','$relation','{$oldMainContact[0]['compName']}','-','$currContact','global')";
                            }

                            $connLogArray[] = "('{$fedCompanyId['fedContactId']}','{$mainFedContactId['fedContactId']}',NULL,'$currentDate','Main contact','$relation','*#curr_mc_$companyId#*','*#cont_$mainContactId#*','$currContact','global')";
                            $connLogArray[] = "('{$mainFedContactId['fedContactId']}','{$fedCompanyId['fedContactId']}',NULL,'$currentDate','Main contact of company','$relation','-','*#cont_$companyId#*','$currContact','global')";
                            $updateFedCntsChangeDate[] = $fedCompanyId['fedContactId'];
                            $updateFedCntsChangeDate[] = $mainFedContactId['fedContactId'];
                        } else if ($connDetail['is_deleted'] == '1') {
                            $companyId = $isCompany ? $contactId : $linkedContId;
                            $mainContactId = $isCompany ? $linkedContId : $contactId;
                            $removeCompanyIds[] = $companyId;
                            $fedCompanyId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($companyId);
                            $mainFedContactId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($mainContactId);
                            $connLogArray[] = "('{$fedCompanyId['fedContactId']}','{$mainFedContactId['fedContactId']}',NULL,'$currentDate','Main contact','$relation','*#cont_$mainContactId#*','-','$currContact','global')";
                            $connLogArray[] = "('{$mainFedContactId['fedContactId']}','{$fedCompanyId['fedContactId']}',NULL,'$currentDate','Main contact of company','$relation','*#cont_$companyId#*','-','$currContact','global')";
                            $updateFedCntsChangeDate[] = $fedCompanyId['fedContactId'];
                            $updateFedCntsChangeDate[] = $mainFedContactId['fedContactId'];
                        }
                    } else if ($connectionType == 'otherpersonal') {
                        if ($connDetail['is_new'] == '1') {
                            $personalRelationIds[] = $relation;
                            $addConnectionArray[] = "('$contactId','$linkedContId','$relation',NULL,'otherpersonal','$clubId')";
                            $addConnectionArray[] = "('$linkedContId','$contactId','*#opp_$relation#*',NULL,'otherpersonal','$clubId')";
                            $connLogArray[] = "('$contactId','$linkedContId','$clubId','$currentDate','Single person','*#rel_$relation#*','-','*#cont_$linkedContId#*','$currContact','club')";
                            $connLogArray[] = "('$linkedContId','$contactId','$clubId','$currentDate','Single person','*#opprel_$relation#*','-','*#cont_$contactId#*','$currContact','club')";
                            $updateCntsChangeDate[] = $linkedContId;
                            $updateCntsChangeDate[] = $contactId;
                        } else if ($connDetail['is_deleted'] == '1') {
                            $remConnectionArray[] = "('$contactId','$linkedContId','otherpersonal','$clubId')";
                            $remConnectionArray[] = "('$linkedContId','$contactId','otherpersonal','$clubId')";
                            $personalRelationIds[] = $relation;
                            $connLogArray[] = "('$contactId','$linkedContId','$clubId','$currentDate','Single person','*#rel_$relation#*','*#cont_$linkedContId#*','-','$currContact','club')";
                            $connLogArray[] = "('$linkedContId','$contactId','$clubId','$currentDate','Single person','*#opprel_$relation#*','*#cont_$contactId#*','-','$currContact','club')";
                            $updateCntsChangeDate[] = $linkedContId;
                            $updateCntsChangeDate[] = $contactId;
                        }
                    } else if (($connectionType == 'othercompanypersonal') || ($connectionType == 'othercompany')) {
                        if ($connectionType == 'othercompanypersonal') {
                            $conType = 'otherpersonal';
                            $otherConType = 'othercompany';
                            $logConnType = 'Single person';
                            $logOtherConnType = 'Company';
                        } else {
                            if ($isCompany) {
                                $conType = 'othercompany';
                                $otherConType = 'othercompany';
                                $logConnType = 'Company';
                                $logOtherConnType = 'Company';
                            } else {
                                $conType = 'othercompany';
                                $otherConType = 'otherpersonal';
                                $logConnType = 'Company';
                                $logOtherConnType = 'Single person';
                            }
                        }
                        if ($connDetail['is_new'] == '1') {
                            $relation = FgUtility::getSecuredDataString(urldecode($relation), $conn);
                            $addConnectionArray[] = "('$contactId','$linkedContId',NULL,'$relation','$conType','$clubId')";
                            $addConnectionArray[] = "('$linkedContId','$contactId',NULL,'$relation','$otherConType','$clubId')";
                            $connLogArray[] = "('$contactId','$linkedContId','$clubId','$currentDate','$logConnType','$relation','-','*#cont_$linkedContId#*','$currContact','club')";
                            $connLogArray[] = "('$linkedContId','$contactId','$clubId','$currentDate','$logOtherConnType','$relation','-','*#cont_$contactId#*','$currContact','club')";
                            $updateCntsChangeDate[] = $linkedContId;
                            $updateCntsChangeDate[] = $contactId;
                        } else if ($connDetail['is_deleted'] == '1') {
                            $remConnectionArray[] = "('$contactId','$linkedContId','$conType','$clubId')";
                            $remConnectionArray[] = "('$linkedContId','$contactId','$otherConType','$clubId')";
                            $linkedContactId = str_replace('lcId', '', $relation);
                            if ($linkedContactId) {
                                $otherLinkdCntIds[] = $linkedContactId;
                            }
                            $connLogArray[] = "('$contactId','$linkedContId','$clubId','$currentDate','$logConnType','*#relName_$linkedContactId#*','*#cont_$linkedContId#*','-','$currContact','club')";
                            $connLogArray[] = "('$linkedContId','$contactId','$clubId','$currentDate','$logOtherConnType','*#relName_$linkedContactId#*','*#cont_$contactId#*','-','$currContact','club')";
                            $updateCntsChangeDate[] = $linkedContId;
                            $updateCntsChangeDate[] = $contactId;
                        }
                    }
                }
            }
        }
        $otherLinkdCntRltns = array();
        if (count($otherLinkdCntIds)) {
            $otherLinkdCntIdStr = implode(',', $otherLinkdCntIds);
            $otherRelations = $conn->fetchAll("SELECT `id` AS lcId, `relation` AS relationName FROM `fg_cm_linkedcontact` WHERE `id` IN ($otherLinkdCntIdStr)");
            foreach ($otherRelations as $otherRelation) {
                $otherLinkdCntRltns[$otherRelation['lcId']] = $otherRelation['relationName'];
            }
        }
        if (count($addConnArray)) {
            $connValues = implode(',', $addConnArray);
            $conn->executeQuery("INSERT INTO `fg_temp_add_connection` (`club_id`, `contact_id`, `linked_contact_id`, `relation_id`) VALUES $connValues;");
            $conn->executeQuery("call SaveLinkedContact('$clubId','$contactId','$currContact','$lang')");
            /* setting postal address starts (referred from FAIRGATE version 3 code, dont know why this is used for) */
            $currHouseholdCnts = ($currHouseholdCntIds != '') ? explode(',', $currHouseholdCntIds) : array();
            if (count($remHouseholdArray)) {
                $currHouseholdCnts = array_diff($currHouseholdCnts, $remHouseholdArray);
            }
            $allHouseholdCnts = $addHouseholdCnts;
            if (count($currHouseholdCnts)) {
                $allHouseholdCnts = array_merge($allHouseholdCnts, $currHouseholdCnts);
            }
            $allHouseholdCntIds = implode(',', $allHouseholdCnts);
            //get contacts having postal address
            $postlContacts = $conn->fetchAll("SELECT GROUP_CONCAT(c.id) AS postalCntIds FROM fg_cm_contact c WHERE  c.id IN ($allHouseholdCntIds) AND c.`is_postal_address`=1");
            $postalContacts = ($postlContacts['0']['postalCntIds'] != '') ? explode(',', $postlContacts['0']['postalCntIds']) : array();
            if (count($postalContacts) == 0) {
                //set postal address for current contact id
                $conn->executeQuery("UPDATE fg_cm_contact SET `is_postal_address`=1 WHERE `id`=$contactId");
            } else if (count($postalContacts) > 1) {
                $postalCntIds = implode(',', $postalContacts);
                //unset postal address
                $conn->executeQuery("UPDATE fg_cm_contact SET `is_postal_address`=0 WHERE `id` IN ($postalCntIds)");
                //set postal address for current contact id
                $conn->executeQuery("UPDATE fg_cm_contact SET `is_postal_address`=1 WHERE `id`=$contactId");
            }
            /* setting postal address ends */
        }
        if ($setHouseholdMainContact) {
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_household_head`='0' WHERE `id` IN ("
                . "SELECT `linked_contact_id` FROM `fg_cm_linkedcontact` WHERE `contact_id`=$householdMainContact AND `type`='household' AND `club_id`=$clubId)");
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_household_head`='1' WHERE `id`=$householdMainContact");
        }
        if (count($remHouseholdArray)) {
            $removeConnContIds = implode(',', $remHouseholdArray);
            $conn->executeQuery("DELETE FROM `fg_cm_linkedcontact` WHERE (`contact_id` IN ($removeConnContIds) OR `linked_contact_id` IN ($removeConnContIds)) AND `type`='household' AND `club_id`=$clubId");
            /* setting postal address starts (referred from FAIRGATE version 3 code, dont know why this is used for) */
            //unset postal address
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_household_head`=0,`is_postal_address`=0 WHERE `id` IN ($removeConnContIds)");
            $currHouseholdCnts = explode(',', $currHouseholdCntIds);
            $diffHouseholdContacts = array_diff($currHouseholdCnts, $remHouseholdArray);
            if ((count($diffHouseholdContacts) == 1) && in_array($contactId, $diffHouseholdContacts)) {
                $conn->executeQuery("UPDATE fg_cm_contact SET `is_household_head`=0,`is_postal_address`=0 WHERE `id`=$contactId");
            }
            /* setting postal address ends */
        }
        if (count($remHouseholdMainContacts)) {
            $remHouseholdMainContIds = implode(',', $remHouseholdMainContacts);
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_household_head`='0' WHERE `id` IN ($remHouseholdMainContIds)");
        }
        if (count($addSeparateInvContacts)) {
            $addSeparateInvContactIds = implode(',', $addSeparateInvContacts);
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_seperate_invoice`='1' WHERE `id` IN ($addSeparateInvContactIds)");
        }
        if (count($remSeparateInvContacts)) {
            $remSeparateInvContactIds = implode(',', $remSeparateInvContacts);
            $conn->executeQuery("UPDATE fg_cm_contact SET `is_seperate_invoice`='0' WHERE `id` IN ($remSeparateInvContactIds)");
        }
        $currMainContacts = array();
        $currMainContactsArr = array();
        if (count($addCompanyIds)) {
            $companyIds = implode(',', $addCompanyIds);
            //getting current main contacts for adding log entry
            $currMainCnts = $conn->fetchAll("SELECT c.`id` AS companyId, IF((c.`comp_def_contact` IS NULL OR c.`comp_def_contact`=''), ('-'), (c.`comp_def_contact`)) AS mainContactId FROM `fg_cm_contact` c INNER JOIN `fg_cm_contact` cc ON c.`fed_contact_id`=cc.`fed_contact_id` WHERE cc.id IN ($companyIds)");
            foreach ($currMainCnts as $currMainCnt) {
                $currMainContacts[$currMainCnt['companyId']] = $currMainCnt['mainContactId'];
                if (($currMainCnt['mainContactId'] != '-') && ($currMainCnt['mainContactId'] != '')) {
                    $currMainContactsArr[] = $currMainCnt['mainContactId'];
                }
            }
            $conn->executeQuery("UPDATE `fg_cm_contact` c "
                . "INNER JOIN `fg_cm_contact` cc ON c.`fed_contact_id`=cc.`fed_contact_id` "
                . "INNER JOIN fg_cm_contact M ON M.id='$mainContactId' "
                . "SET c.`has_main_contact` = '1', c.`comp_def_contact` = M.fed_contact_id,"
                . "c.`comp_def_contact_fun` = CASE cc.`id` $defContFunQry END "
                . "WHERE cc.`id` IN ($companyIds)");

            /* set personal attributes of company contact with that of main contact starts */
            $personalAttrArray = $container->getParameter('system_personal_both');
            $personalAttributes = '`' . implode('`,`', $personalAttrArray) . '`';
            //get personal attributes of main contacts
            $attributeValueArr = array();
            $result = $conn->fetchAll("SELECT $personalAttributes FROM master_system LEFT JOIN fg_cm_contact ON fg_cm_contact.fed_contact_id=master_system.fed_contact_id WHERE fg_cm_contact.id = $mainContactId");
            foreach ($addCompanyIds as $addCompanyId) {
                $insertFieldsSet = $duplicateSet = array();
                if (count($result) > 0) {
                    foreach ($result[0] as $field => $value) {
                        $duplicateSet[":field$field"] = $value;
                        $insertFieldsSet[] = "`$field` = :field$field";
                    }
                }
                if (count($insertFieldsSet) > 0) {
                    $insertQuery = "UPDATE master_system LEFT JOIN fg_cm_contact C ON C.fed_contact_id=master_system.fed_contact_id SET " . implode(',', $insertFieldsSet) . " WHERE C.id = $addCompanyId";
                    $conn->executeQuery($insertQuery, $duplicateSet);
                }
            }
            /* set personal attributes of company contact with that of main contact ends */
        }
        if (count($removeCompanyIds)) {
            $companyIds = implode(',', $removeCompanyIds);

            // Get Relations of Company Main Contacts (For Log Entry)
            $mainContRelations = $conn->fetchAll("SELECT c.`id` AS contId, c.`comp_def_contact_fun` AS relationName FROM `fg_cm_contact` c INNER JOIN `fg_cm_contact` cc ON c.`fed_contact_id`=cc.`fed_contact_id` WHERE cc.`id` IN ($companyIds)");
            $mcRelationArray = array();
            foreach ($mainContRelations as $mainContRelation) {
                $mcRelationArray[$mainContRelation['contId']] = $mainContRelation['relationName'];
            }

            $conn->executeQuery("UPDATE `fg_cm_contact` c INNER JOIN `fg_cm_contact` cc ON c.`fed_contact_id`=cc.`fed_contact_id` SET c.`has_main_contact` = '0',c.`comp_def_contact` = NULL,c.`comp_def_contact_fun` = NULL WHERE cc.`id` IN ($companyIds)");
            $personalAttrArray = $container->getParameter('system_personal_both');
            $resetAttr = array();
            foreach ($personalAttrArray as $personalAttr) {
                $resetAttr[] = "`$personalAttr` = ''";
            }
            $resetAttrStr = implode(',', $resetAttr);
            //reset personal attributes of company contact
            $conn->executeQuery("UPDATE `master_system` SET $resetAttrStr WHERE `fed_contact_id` IN ($companyIds)");
        }
        if (count($personalRelationIds)) {
            $oppRelations = $this->_em->getRepository('CommonUtilityBundle:FgCmRelationFirstLevel')->getOppositeRelation($personalRelationIds, $conn);
        }
        if (count($addConnectionArray)) {
            $addConnectionValues = implode(',', $addConnectionArray);
            foreach ($oppRelations as $relationId => $oppRelation) {
                $addConnectionValues = str_replace("*#opp_$relationId#*", $oppRelation, $addConnectionValues);
            }
            $conn->executeQuery("INSERT INTO `fg_cm_linkedcontact` (`contact_id`,`linked_contact_id`,`relation_id`,`relation`,`type`,`club_id`) VALUES $addConnectionValues");
        }
        if (count($remConnectionArray)) {
            $remOtherPersonalValues = implode(',', $remConnectionArray);
            $conn->executeQuery("DELETE FROM `fg_cm_linkedcontact` WHERE (`contact_id`,`linked_contact_id`,`type`,`club_id`) IN ($remOtherPersonalValues)");
        }
        if (count($updateCntsChangeDate)) {
            //set last_updated of contacts
            $updateChangeDateCntIds = implode(',', $updateCntsChangeDate);
            $conn->executeQuery("UPDATE `fg_cm_contact` SET `last_updated` = '$currentDate' WHERE `id` IN ($updateChangeDateCntIds)");
        }
        if (count($updateFedCntsChangeDate)) {
            //set last_updated of contacts for main contact
            $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->updateLastUpdated($updateFedCntsChangeDate, 'fedContact');
        }
        if (count($connLogArray)) {
            //contact log entry--get names of all relations
            $rltns = $personalRelationIds;
            if (count($oppRelations)) {
                $rltns = array_merge($rltns, $oppRelations);
            }
            $relationNames = array();
            if (count($rltns)) {
                $relationNames = $this->_em->getRepository('CommonUtilityBundle:FgCmRelation')->getRelationNames($rltns, $conn, $lang);
            }
            //get names of linked contacts
            $logContactNames = array();
            $logContacts = $linkedContacts;
            if (count($currMainContactsArr)) {
                $logContacts = array_merge($logContacts, $currMainContactsArr);
            }
            if (count($logContacts)) {
                $contactPdo = new ContactPdo($container);
                $logContactNames = $contactPdo->getContactNames($logContacts);
            }
            $connLogValues = implode(',', $connLogArray);
            //replace *#opprel_$relation#*
            foreach ($oppRelations as $relationId => $oppRelation) {
                $connLogValues = str_replace("*#opprel_$relationId#*", "*#rel_$oppRelation#*", $connLogValues);
            }
            //replace *#rel_$relation#*
            foreach ($relationNames as $relationId => $relationName) {
                $relation = FgUtility::getSecuredDataString($relationName, $conn);
                $connLogValues = str_replace("*#rel_$relationId#*", $relation, $connLogValues);
            }
            //replace *#curr_mc_$companyId#*
            foreach ($currMainContacts as $companyId => $mainContId) {
                $mainContIdReplace = ($mainContId == '-') ? "-" : "*#cont_$mainContId#*";
                $connLogValues = str_replace("*#curr_mc_$companyId#*", $mainContIdReplace, $connLogValues);
            }
            //replace *#cont_$linkedContId#*
            foreach ($logContactNames as $contactId => $contactName) {
                $contactName = FgUtility::getSecuredDataString($contactName, $conn);
                $connLogValues = str_replace("*#cont_$contactId#*", $contactName, $connLogValues);
            }
            //replace *#relName_$linkedContactId#*
            foreach ($otherLinkdCntRltns as $lcId => $relName) {
                $relName = FgUtility::getSecuredDataString($relName, $conn);
                $connLogValues = str_replace("*#relName_$lcId#*", $relName, $connLogValues);
            }
            //replace 'mcRel$contactId'
            foreach ($mcRelationArray as $contId => $relName) {
                $relName = FgUtility::getSecuredDataString($relName, $conn);
                $connLogValues = str_replace("mcRel$contId", $relName, $connLogValues);
            }
            // Connection log entries.
            $conn->executeQuery("INSERT INTO `fg_cm_log_connection` (`contact_id`,`linked_contact_id`,`assigned_club_id`,`date`,`connection_type`,`relation`,`value_before`,`value_after`,`changed_by`,`type`) VALUES $connLogValues");
        }
        $resultArray = array('errorType' => $errorType);

        return $resultArray;
    }

    /**
     * Function to get household or other connections contacts
     *
     * @param int $clubId    Club id
     * @param int $contactId Contact id
     * @param int $isData    The flag to know where from
     *
     * @return array
     */
    public function getAllConnections($clubId, $contactId, $lang, $isData = 0)
    {
        $clubId = is_array($clubId) ? implode(',', $clubId) : $clubId;
        $where = "";
        $select = "";
        $contactwhere = '';
        if (!$isData) {
            $where = " AND clc.type IN('otherpersonal','othercompany')";
            $contactwhere = "clc.contact_id=$contactId";
        } else {
            $contactwhere = "(clc.linked_contact_id IN ($contactId) OR clc.contact_id IN ($contactId))";
            $select = ",clc.id";
        }
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT linked_contact_id,relation_id,relation,type,IF(Ri18n.title_lang='',cr.name,Ri18n.title_lang) as name,clc.club_id $select
                 FROM fg_cm_linkedcontact clc
                 LEFt JOIN fg_cm_relation cr on cr.id=clc.relation_id
                 LEFT JOIN fg_cm_relation_i18n Ri18n ON cr.id=Ri18n.id AND Ri18n.lang='$lang'
                 WHERE $contactwhere AND clc.club_id IN ($clubId) $where";

        return $conn->fetchAll($sql);
    }

    /**
     * function to get the federation connections and to delete the connections while changing the membership category id
     *
     * @param array  $clubId           The club id
     * @param int    $contactId        The contact id
     * @param string $contactType      the contact type
     * @param object $container        the container
     * @param obejct $club             the club object
     * @param int    $currentContactId the logged contact id
     * @param type   $clubType         the club type
     */
    public function deleteFederationConnectionsOfContact($clubId, $contactId, $contactType, $container, $club, $currentContactId, $clubType, $lang)
    {
        $resultarray = array();
        $connections = $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->getAllConnections($clubId, $contactId, $lang, 1);
        $isCompany = 0;
        $householdCntIds = array();

        foreach ($connections as $key => $val) {
            if ($val['relation_id'] != null) {
                if ($val['type'] == 'household') {
                    $householdCntIds[$val['club_id']][] = $val['linked_contact_id'];
                }
                if ($val['linked_contact_id'] != $contactId) {
                    $resultarray[$val['club_id']][$val['type']][$val['linked_contact_id']][$val['relation_id']]['is_deleted'] = 1;
                }
            } else {
                $linkId = 'lcId' . $val['id'];
                if ($val['type'] == 'otherpersonal') {
                    $type = "othercompanypersonal";
                } else {
                    $type = $val['type'];
                }
                if ($val['linked_contact_id'] != $contactId) {
                    $resultarray[$val['club_id']][$type][$val['linked_contact_id']][$linkId]['is_deleted'] = 1;
                }
            }
        }
        if ($contactType == 'Company') {
            $isCompany = 1;
        }
        foreach ($resultarray as $fedClubId => $connArray) {
            $currHouseholdCntIds = isset($householdCntIds[$fedClubId]) ? implode(',', $householdCntIds[$fedClubId]) : '';
            $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->updateLinkedConnections($connArray, $fedClubId, $contactId, $isCompany, $currHouseholdCntIds, $currentContactId, $container, $clubType, $club, $lang);
        }
    }

    /**
     * Function to delete all connections of a contact in all level when switching contact type
     *
     * @param object $club
     * @param int $contactId
     * @param string $contactType
     * @param object $container
     * @param string $lang
     * @param object $now
     */
    public function deleteAllConnectionsOfContact($club, $contactId, $contactType, $container, $lang, $now)
    {
        $resultarray = array();
        $federationId = $club->get('federation_id');
        $subFederationId = $club->get('sub_federation_id');
        $clubType = $club->get('type');
        $clubId = $club->get('id');
        $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->removeCompanyConnections($contactId, $contactType, $club->get('contactId'), $now);
        $connections = $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->getAllConnections(array($clubId, $federationId, $subFederationId), $contactId, $lang, 1);
        $isCompany = 0;
        $householdCntIds = array();
        $contactRelations = array();
        foreach ($connections as $key => $val) {
            if ($val['relation_id'] != null) {
                if ($val['type'] == 'household') {
                    $householdCntIds[$val['club_id']][] = $val['linked_contact_id'];
                    $contactRelations[$val['club_id']][$val['linked_contact_id']] = $val['relation_id'];
                    if (($val['linked_contact_id'] == $contactId) && !isset($resultarray[$val['club_id']]['household'][$contactId]['self'])) {
                        $resultarray[$val['club_id']]['household'][$contactId]['self'] = array('is_deleted' => '1', 'is_main_contact' => '0', 'seperate_invoice' => '0');
                    }
                } else {
                    if ($val['linked_contact_id'] != $contactId) {
                        $resultarray[$val['club_id']][$val['type']][$val['linked_contact_id']][$val['relation_id']]['is_deleted'] = 1;
                    }
                }
            } else {
                $linkId = 'lcId' . $val['id'];
                if ($val['type'] == 'otherpersonal') {
                    $type = "othercompanypersonal";
                } else {
                    $type = $val['type'];
                }
                if ($val['linked_contact_id'] != $contactId) {
                    $resultarray[$val['club_id']][$type][$val['linked_contact_id']][$linkId]['is_deleted'] = 1;
                }
            }
        }
        if ($contactType == 'Company') {
            $isCompany = 1;
        }
        foreach ($resultarray as $fedClubId => $connArray) {
            $currHouseholdCntIds = isset($householdCntIds[$fedClubId]) ? implode(',', $householdCntIds[$fedClubId]) : '';
            $tableName = '';
            if ($fedClubId == $federationId) {
                $clubTypeClub = 'federation';
            } else if ($fedClubId == $clubId) {
                $clubTypeClub = $clubType;
            } elseif ($fedClubId == $subFederationId) {
                $clubTypeClub = 'sub_federation';
            }
            // Check contact is main contact of household.
            $contactPdo = new ContactPdo($container);
            $isMainContact = $contactPdo->checkHouseholdHead($contactId);
            if ($isMainContact) {
                $connArray['household'][$householdCntIds[$val['club_id']]['0']][$contactRelations[$val['club_id']][$val['linked_contact_id']]] = array('is_main_contact' => '1', 'seperate_invoice' => 0);
            }
            $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->updateLinkedConnections($connArray, $fedClubId, $contactId, $isCompany, $currHouseholdCntIds, $club->get('contactId'), $container, $clubTypeClub, $club, $lang);
        }
    }

    /**
     * Function to remove company conection when switching contact type
     * @param int    $contact     Contact id
     * @param string $contactType contact type Single person/Company
     * @param int    $currContact logged in contact id
     * @param object $now         Time
     */
    public function removeCompanyConnections($contact, $contactType, $currContact, $now)
    {
        $conn = $this->getEntityManager()->getConnection();
        $contactDetail = $conn->fetchAll("SELECT fed_contact_id FROM fg_cm_contact where id=$contact");
        $fedcontact = $contactDetail[0]['fed_contact_id'];
        //switching to single person from company inser connection log
        if ($contactType == 'Single person') {
            $conn->executeQuery("INSERT INTO `fg_cm_log_connection` (`contact_id`,`linked_contact_id`,`assigned_club_id`,`date`,`connection_type`,`relation`,`value_before`,`value_after`,`changed_by`,type)  "
                . "(SELECT C.id,C.comp_def_contact,NULL,'$now','Main contact',C.comp_def_contact_fun,(SELECT contactname(S.fed_contact_id) from master_system S where S.fed_contact_id=C.fed_contact_id limit 1),'-',$currContact,'global' FROM fg_cm_contact C WHERE C.id=$fedcontact AND C.comp_def_contact IS NOT NULL AND C.comp_def_contact !='' )");
            $conn->executeQuery("INSERT INTO `fg_cm_log_connection` (`contact_id`,`linked_contact_id`,`assigned_club_id`,`date`,`connection_type`,`relation`,`value_before`,`value_after`,`changed_by`,type)  "
                . "(SELECT C.comp_def_contact,C.id,NULL,'$now','Main contact of company',C.comp_def_contact_fun,(SELECT contactname(S.fed_contact_id) from fg_cm_contact S where S.id=C.comp_def_contact limit 1),'-',$currContact,'global' FROM fg_cm_contact C WHERE C.id=$fedcontact AND C.comp_def_contact IS NOT NULL AND C.comp_def_contact !='')");
            $conn->executeQuery("UPDATE fg_cm_contact SET comp_def_contact=NULL,comp_def_contact_fun=NULL WHERE fed_contact_id=$fedcontact");
        } else { //switching to company from single person insert connection log
            $conn->executeQuery("INSERT INTO `fg_cm_log_connection` (`contact_id`,`linked_contact_id`,`assigned_club_id`,`date`,`connection_type`,`relation`,`value_before`,`value_after`,`changed_by`,type)  "
                . "(SELECT C.id,C.comp_def_contact,NULL,'$now','Main contact',C.comp_def_contact_fun,(SELECT contactname(S.fed_contact_id) from master_system S where S.fed_contact_id=C.fed_contact_id limit 1),'-',$currContact,'global' FROM fg_cm_contact C WHERE C.comp_def_contact=$fedcontact )");
            $conn->executeQuery("INSERT INTO `fg_cm_log_connection` (`contact_id`,`linked_contact_id`,`assigned_club_id`,`date`,`connection_type`,`relation`,`value_before`,`value_after`,`changed_by`,type)  "
                . "(SELECT C.comp_def_contact,C.id,NULL,'$now','Main contact of company',C.comp_def_contact_fun,(SELECT contactname(S.fed_contact_id) from fg_cm_contact S where S.id=C.comp_def_contact limit 1),'-',$currContact,'global' FROM fg_cm_contact C WHERE C.comp_def_contact=$fedcontact )");
            $conn->executeQuery("UPDATE master_system SET `1`=NULL,`2`=NULL,`4`=NULL,`23`=NULL,`70`=NULL,`107`=NULL,`72`=NULL,`76`=NULL WHERE fed_contact_id in (SELECT fed_contact_id from fg_cm_contact WHERE comp_def_contact=$fedcontact)");
            $conn->executeQuery("UPDATE fg_cm_contact SET comp_def_contact=NULL,comp_def_contact_fun=NULL,has_main_contact=0 WHERE comp_def_contact=$fedcontact");
        }
    }

    /**
     * Function to get children's with profile access for parent
     *
     * @param int    $contactId ContactId
     * @param object $container ContainerObject
     *
     * @return array $results Results
     */
    public function getChildrensHavingProfileAccessForParents($parentContactId, $contactId, $container)
    {
        $relationIdsArr = $container->getParameter('relationIds');
        $childRelationId = $relationIdsArr['child'];
        $clubId = $container->get('club')->get('id');
        $clubTable = $container->get('club')->get('clubTable');
        $clubType = $container->get('club')->get('type');
        $sysAttrIdDob = $container->getParameter('system_field_dob');
        $clubSettingsRow = $this->_em->getRepository('CommonUtilityBundle:FgClubSettings')->findOneBy(array('club' => $clubId));
        $profileAccessAgeOfChildren = ($clubSettingsRow) ? $clubSettingsRow->getProfileAccessAge() : 18;
        $conn = $this->getEntityManager()->getConnection();
        $onlyCompanyName = 0;

        $sql = "SELECT lc.linked_contact_id AS id, contactNameNoSort(lc.linked_contact_id, $onlyCompanyName) AS name, contactNameNoSort($contactId, $onlyCompanyName) AS contactName FROM `fg_cm_linkedcontact` lc LEFT JOIN `fg_cm_contact` c ON lc.linked_contact_id = c.id "
            . " LEFT JOIN `master_system` ms ON c.fed_contact_id = ms.fed_contact_id INNER JOIN `sf_guard_user` s ON (c.id = s.contact_id AND s.club_id = :clubId) "
            . " WHERE lc.contact_id = " . $parentContactId . " AND c.intranet_access = '1'"
            . " AND lc.club_id = :clubId AND lc.relation_id = :relationId AND ((DATE_FORMAT(FROM_DAYS(DATEDIFF(CURRENT_DATE, ms." . $sysAttrIdDob . " )),'%y') < " . $profileAccessAgeOfChildren . ")  OR ms." . $sysAttrIdDob . " IS NULL OR ms." . $sysAttrIdDob . " ='0000-00-00 00:00:00') AND c.is_permanent_delete = 0 ORDER BY c.is_company,name ASC";

        $results = $conn->fetchAll($sql, array('contactId' => $parentContactId, 'clubId' => $clubId, 'relationId' => $childRelationId));
        if (!$results) {
            $sql = "SELECT contactNameNoSort($contactId, $onlyCompanyName) AS contactName FROM `fg_cm_contact` WHERE id = :contactId";
            $results = $conn->fetchAll($sql, array('contactId' => $contactId));
        }

        return $results;
    }

    /**
     * Function to delete all connections of a contact in all level when switching contact type
     *
     * @param object $club
     * @param int $fedcontactId
     * @param string $contactType
     * @param object $container
     * @param string $lang
     * @param object $now
     */
    public function deleteAllConnections($club, $fedcontactId, $contactType, $container, $lang, $now)
    {
        $resultarray = array();
        $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->removeCompanyConnections($fedcontactId, $contactType, $club->get('contactId'), $now);
        $clubIds = "SELECT club_id FROM fg_cm_contact WHERE fed_contact_id=$fedcontactId";
        $contactIdsQuery = "SELECT id FROM fg_cm_contact WHERE fed_contact_id=$fedcontactId";
        $connections = $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->getAllConnections($clubIds, $contactIdsQuery, $lang, 1);
        $isCompany = 0;
        $householdCntIds = array();
        $contactRelations = array();
        $contactPdo = new ContactPdo($container);
        foreach ($connections as $key => $val) {
            if (!empty($val['club_id'])) {
                $contact = $contactPdo->getClubContactId($fedcontactId, $val['club_id'], 'all');
                $contactId = $contact['id'];
                $contactIds[$val['club_id']] = $contact['id'];
            }
            if ($val['relation_id'] != null) {
                if ($val['type'] == 'household') {
                    $householdCntIds[$val['club_id']][] = $val['linked_contact_id'];
                    $contactRelations[$val['club_id']][$val['linked_contact_id']] = $val['relation_id'];
                    if (($val['linked_contact_id'] == $contactId) && !isset($resultarray[$val['club_id']]['household'][$contactId]['self'])) {
                        $resultarray[$val['club_id']]['household'][$contactId]['self'] = array('is_deleted' => '1', 'is_main_contact' => '0', 'seperate_invoice' => '0');
                    }
                } else {
                    if ($val['linked_contact_id'] != $contactId) {
                        $resultarray[$val['club_id']][$val['type']][$val['linked_contact_id']][$val['relation_id']]['is_deleted'] = 1;
                    }
                }
            } else {
                $linkId = 'lcId' . $val['id'];
                if ($val['type'] == 'otherpersonal') {
                    $type = "othercompanypersonal";
                } else {
                    $type = $val['type'];
                }
                if ($val['linked_contact_id'] != $contactId) {
                    $resultarray[$val['club_id']][$type][$val['linked_contact_id']][$linkId]['is_deleted'] = 1;
                }
            }
        }
        if ($contactType == 'Company') {
            $isCompany = 1;
        }
        foreach ($resultarray as $fedClubId => $connArray) {

            $currHouseholdCntIds = isset($householdCntIds[$fedClubId]) ? implode(',', $householdCntIds[$fedClubId]) : '';
            $clubTypeClub = 'sub_federation';
            // Check contact is main contact of household.
            $contacts = $contactIds[$fedClubId];
            $isMainContact = $contactPdo->checkHouseholdHead($contactId);
            if ($isMainContact) {
                $connArray['household'][$householdCntIds[$fedClubId]['0']][$contactRelations[$fedClubId][$val['linked_contact_id']]] = array('is_main_contact' => '1', 'seperate_invoice' => 0);
            }
            $this->_em->getRepository('CommonUtilityBundle:FgCmLinkedcontact')->updateLinkedConnections($connArray, $fedClubId, $contacts, $isCompany, $currHouseholdCntIds, $club->get('contactId'), $container, $clubTypeClub, $club, $lang);
        }
    }
}
