<?php

/**
 * FgClubRepository.
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FgClubRepository.
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgClubRepository extends EntityRepository {

    /**
     * function to get clubtitle
     *
     * @param int $clubid      clubId
     * @param int $defaultLang club defalt language
     *
     * @return  array
     */
    public function getClubname($clubid, $defaultLang) {
        $clubObj = $this->createQueryBuilder('C')
                ->select("CASE WHEN ci18n.titleLang IS NULL OR ci18n.titleLang = '' THEN C.title ELSE ci18n.titleLang END as title")
                ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'ci18n.id = C.id AND ci18n.lang = :defaultLang')
                ->where("C.id=:clubId")
                ->setParameters(array('clubId' => $clubid, 'defaultLang' => $defaultLang));

        $result = $clubObj->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get club details.
     *
     * @param Integer $domainCacheKey Cache key used for caching
     * @param Integer $lifetime       Cache expiry time
     * @param string  $clubIdentifier club url identifier
     *
     * @return Integer
     */
    public function getClubDetails($domainCacheKey, $cacheLifeTime, $cachingEnabled, $clubIdentifier = '', $id = 0) {
        $cacheKey = $domainCacheKey . '_clubdetails_' . ($clubIdentifier != '' ? $clubIdentifier : $id);
        $bookedmodules = $this->getBookedModules();
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        $resultQuery = $this->createQueryBuilder('c')
                ->select("c.id, c.title, c.parentClubId, c.isFederation, c.federationId, c.isSubFederation, c.hasSubfederation, c.clubType, c.urlIdentifier, cs.currency, cs.currencyPosition, cs.fiscalYear, cs.logo, cs.federationIcon, cs.signature, c.settingsUpdated, "
                        . "CASE WHEN c.clubMembershipAvailable = 1 THEN 1 ELSE 0 END as clubMembershipAvailable, "
                        . "CASE WHEN c.fedMembershipMandatory = 1 THEN 1 ELSE 0 END as fedMembershipMandatory, "
                        . "CASE WHEN c.assignFedmembershipWithApplication = 1 THEN 1 ELSE 0 END as assignFedmembershipWithApplication,  "
                        . "CASE WHEN c.addExistingFedMemberClub = 2 THEN 2 ELSE CASE WHEN c.addExistingFedMemberClub = 1 THEN 1 ELSE 0 END END as addExistingFedMemberClub, "
                        . "CASE WHEN c.fedAdminAccess = 1 THEN 1 ELSE 0 END as fedAdminAccess, "
                        . "CASE WHEN c.hasPromobox = 1 THEN 1 ELSE 0 END as hasPromobox")
                ->addSelect('(' . $bookedmodules->getDQL() . ') as bookedModules')
                ->leftJoin('CommonUtilityBundle:FgClubSettings', 'cs', 'WITH', 'cs.club = c.id');
        if ($clubIdentifier != '') {
            $resultQuery->where('c.urlIdentifier=:clubIdentifier')
                    ->setParameter('clubIdentifier', $clubIdentifier);
        } elseif ($id > 0) {
            $resultQuery->where('c.id=:id')
                    ->setParameter('id', $id);
        }

        $result = $cacheDriver->getCachedResult($resultQuery, $cacheKey, $cacheLifeTime, $cachingEnabled);

        return (count($result) > 0 ? $result[0] : false);
    }

    /**
     * Function to get the booked modules of a club.
     *
     * @return Integer
     */
    private function getBookedModules() {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select('GROUP_CONCAT(m.moduleKey)')
                ->from('CommonUtilityBundle:FgMbModule', 'm')
                ->leftJoin('CommonUtilityBundle:FgMbClubModules', 'cm', 'WITH', 'cm.module = m.id')
                ->where('cm.club=c.id')
                ->andWhere('cm.isModuleActive = 1');

        return $moduleQuery;
    }

    /**
     * Function to get the default subscription detail of a club.
     *
     * @param int $clubId Club Id.
     *
     * @return int subscribed boolean true/false
     */
    public function getDefaultSubscription($clubId) {
        $resultQuery = $this->createQueryBuilder('c')
                ->select('c.defaultContactSubscription')
                ->where('c.id=:clubId')
                ->setParameter('clubId', $clubId);

        $result = $resultQuery->getQuery()->getResult();

        return $result[0]['defaultContactSubscription'];
    }

    /**
     * Function to save the default subscription detail of a club.
     *
     * @param int   $clubId        Club Id.
     * @param array $defaultSubArr data for default subscription
     *
     * @return int subscribed boolean true/false .
     */
    public function saveDefaultSubscription($clubId, $defaultSubArr) {
        $clubObj = $this->find($clubId);
        $clubObj->setdefaultContactSubscription($defaultSubArr['fg-dev-default-subscription']);
        $this->_em->persist($clubObj);
        $this->_em->flush();
    }

    /**
     * Method to get color codes for sub levels clubs
     *
     * @param array $clubIds  array containing sub level ids
     *
     * @return array
     */
    public function getsubLevelsColorCode($clubIds) {

        $club = $this->createQueryBuilder('c')
                ->select('c.id as clubId, c.calendarColorCode as colorCode')
                ->where('c.id IN (:ids)')
                ->setParameter('ids', $clubIds);

        $dataResult = $club->getQuery()->getResult();
        $finalResult = array();
        foreach ($dataResult as $key => $value) {
            $finalResult[$value['clubId']] = $value;
        }

        return $finalResult;
    }

    /**
     * Method to get club details for external application
     *
     * @param int $clubId      current club id
     * @param int $defaultLang club defalt language
     *
     * @return array $dataResult data result
     */
    public function getAllClubDetailsForExternalApplication($clubId, $defaultLang) {
        $club = $this->createQueryBuilder('c')
                ->select('c.id as clubId')
                ->addSelect("CASE WHEN ci18n.titleLang IS NULL OR ci18n.titleLang = '' THEN c.title ELSE ci18n.titleLang END as title")
                ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'ci18n.id = c.id AND ci18n.lang = :defaultLang')
                ->where('c.federationId =:id')
                ->andWhere('c.isFederation =:isFederation')
                ->andWhere('c.isSubFederation =:isSubFederation')
                ->orderBy('c.title', 'ASC')
                ->setParameters(array('id' => $clubId, 'isFederation' => 0, 'isSubFederation' => 0, 'defaultLang' => $defaultLang));

        $dataResult = $club->getQuery()->getResult();

        return $dataResult;
    }
    
    /**
     * Method to get club details of clubids
     *
     * @param array   $clubIds        Array containing sub level ids
     * @param Integer $clubCacheKey   Cachekey used for caching
     * @param Integer $cacheLifeTime  Cache expiry time
     * @param Integer $cachingEnabled Cache enabled or not
     * 
     * @return array
     */
    public function getClubsValues($clubIds, $language, $clubCacheKey, $cacheLifeTime, $cachingEnabled) 
    {        
        $cacheKey = str_replace('{{cache_area}}', '_clubdetails_', $clubCacheKey);
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        
        $club = $this->createQueryBuilder('c')
                ->select('c.id, c.parentClubId, c.isFederation, c.federationId as federationId, c.isSubFederation, c.hasSubfederation, c.clubType as clubType, c.urlIdentifier, c.settingsUpdated')
                ->addSelect("CASE WHEN cI18n.titleLang IS NULL OR cI18n.titleLang = '' THEN c.title ELSE cI18n.titleLang END AS title")
                ->leftJoin('CommonUtilityBundle:FgClubI18n', 'cI18n', 'WITH', 'cI18n.id = c.id AND cI18n.lang = :language')
                ->where('c.id IN (:ids)')
                ->setParameters(array('ids' => $clubIds, 'language' => $language))
                ->orderBy('c.title', 'ASC');

        return $result = $cacheDriver->getCachedResult($club, $cacheKey, $cacheLifeTime, $cachingEnabled);
    }

    /**
     * This function is used to get the clubs within a federation
     * 
     * @param int $clubId Club Id
     * 
     * @return string Comma seperated club ids within a federation
     */
    public function getClubsWithinAFederation($clubId) {
        $qs = $this->createQueryBuilder('c')
                ->select('GROUP_CONCAT(c.id) as clubIds')
                ->where('c.id = :clubId OR c.federationId = :clubId')
                ->setParameter('clubId', $clubId);

        return $qs->getQuery()->getSingleScalarResult();
    }
    
    /**
     * This function is used to get the clubs title within a federation
     * 
     * @param int $clubId Club Id
     * 
     * @return string Comma seperated club ids within a federation
     */
    public function getClubsTitlesWithinAFederation($clubId , $defaultLang) {
        
        $qs = $this->createQueryBuilder('c')
                ->select('c.id, c.parentClubId, c.isFederation, c.federationId as federationId,cI18n.titleLang,c.title')
                ->leftJoin('CommonUtilityBundle:FgClubI18n', 'cI18n', 'WITH', 'cI18n.id = c.id AND cI18n.lang =:defaultLang ')
                ->where('c.id = :clubId OR c.federationId = :clubId')
                ->setParameter('clubId', $clubId)
                ->setParameter('defaultLang', $defaultLang);

        return $qs->getQuery()->getResult();
    }
    
    
}
