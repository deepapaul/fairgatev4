<?php

/**
 * FgClubRepository.
 */
namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FgClubRepository.
 *
 * This class was generated by the Doctrine ORM
 * repository methods below.
 */
class FgClubRepository extends EntityRepository
{

    /**
     * Function to get club details.
     *
     * @param Integer $domainCacheKey Cache key used for caching
     * @param Integer $lifetime       Cache expiry time
     * @param string  $clubIdentifier club url identifier
     *
     * @return Integer
     */
    public function getClubDetails($domainCacheKey, $cacheLifeTime, $cachingEnabled, $clubIdentifier, $id)
    {
        $cacheKey = $domainCacheKey . '_clubdetails_' . ($clubIdentifier != '' ? $clubIdentifier : $id);
        $cacheDriver = $this->_em->getConfiguration()->getResultCacheImpl();
        $resultQuery = $this->createQueryBuilder('c')
            ->select("cs.fiscalYear, cs.logo, cs.federationIcon, cs.signature, c.settingsUpdated")
            ->leftJoin('CommonUtilityBundle:FgClubSettings', 'cs', 'WITH', 'cs.club = c.id');

        $resultQuery->where('c.id=:id')
            ->setParameter('id', $id);

        $result = $cacheDriver->getCachedResult($resultQuery, $cacheKey, $cacheLifeTime, $cachingEnabled);

        return (count($result) > 0 ? $result[0] : false);
    }

    /**
     * Function to save the default subscription detail of a club.
     *
     * @param int   $clubId        Club Id.
     * @param array $defaultSubArr data for default subscription
     *
     * @return int subscribed boolean true/false .
     */
    public function saveDefaultSubscription($clubId, $defaultSubArr)
    {
        $clubObj = $this->find($clubId);
        $clubObj->setdefaultContactSubscription($defaultSubArr['fg-dev-default-subscription']);
        $this->_em->persist($clubObj);
        $this->_em->flush();
    }

    /**
     * Method to get color codes for sub levels clubs
     *
     * @param array $clubIds  array containing sub level ids
     *
     * @return array
     */
    public function getsubLevelsColorCode($clubIds)
    {

        $club = $this->createQueryBuilder('c')
            ->select('c.id as clubId, c.calendarColorCode as colorCode')
            ->where('c.id IN (:ids)')
            ->setParameter('ids', $clubIds);

        $dataResult = $club->getQuery()->getResult();
        $finalResult = array();
        foreach ($dataResult as $key => $value) {
            $finalResult[$value['clubId']] = $value;
        }

        return $finalResult;
    }

    /**
     * Method to get club details for external application
     *
     * @param int $clubId      current club id
     * @param int $defaultLang club defalt language
     *
     * @return array $dataResult data result
     */
    public function getAllClubDetailsForExternalApplication($clubId, $defaultLang)
    {
        $club = $this->createQueryBuilder('c')
            ->select('c.id as clubId')
            ->addSelect("CASE WHEN ci18n.titleLang IS NULL OR ci18n.titleLang = '' THEN c.title ELSE ci18n.titleLang END as title")
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'ci18n', 'WITH', 'ci18n.id = c.id AND ci18n.lang = :defaultLang')
            ->where('c.federationId =:id')
            ->andWhere('c.isFederation =:isFederation')
            ->andWhere('c.isSubFederation =:isSubFederation')
            ->orderBy('c.title', 'ASC')
            ->setParameters(array('id' => $clubId, 'isFederation' => 0, 'isSubFederation' => 0, 'defaultLang' => $defaultLang));

        $dataResult = $club->getQuery()->getResult();

        return $dataResult;
    }

    /**
     * This function is used to get the clubs within a federation
     * 
     * @param int $clubId Club Id
     * 
     * @return string Comma seperated club ids within a federation
     */
    public function getClubsWithinAFederation($clubId)
    {
        $qs = $this->createQueryBuilder('c')
            ->select('GROUP_CONCAT(c.id) as clubIds')
            ->where('c.id = :clubId OR c.federationId = :clubId')
            ->setParameter('clubId', $clubId);

        return $qs->getQuery()->getSingleScalarResult();
    }

    /**
     * This function is used to get the clubs title within a federation
     * 
     * @param int $clubId Club Id
     * 
     * @return string Comma seperated club ids within a federation
     */
    public function getClubsTitlesWithinAFederation($clubId, $defaultLang)
    {

        $qs = $this->createQueryBuilder('c')
            ->select('c.id, c.parentClubId, c.isFederation, c.federationId as federationId,cI18n.titleLang,c.title')
            ->leftJoin('CommonUtilityBundle:FgClubI18n', 'cI18n', 'WITH', 'cI18n.id = c.id AND cI18n.lang =:defaultLang ')
            ->where('c.id = :clubId OR c.federationId = :clubId')
            ->setParameter('clubId', $clubId)
            ->setParameter('defaultLang', $defaultLang);

        return $qs->getQuery()->getResult();
    }

    /**
     * Method to unset url identifier when making club invalid
     * 
     * @param array $nonConfirmedClubs ids of nonConfirmedClubs after 7 days
     * 
     * @return boolean
     */
    public function unsetUrlIdentifiersOfClubs($nonConfirmedClubs)
    {
        $clubIds = array_column($nonConfirmedClubs, 'id');
        $qb = $this->createQueryBuilder('CLUB');
        $que = $qb->update('CommonUtilityBundle:FgClub', 'CLUB')
            ->set('CLUB.urlIdentifier', ':null')
            ->where('CLUB.id IN (:clubIds)')
            ->setParameter('clubIds', $clubIds)
            ->setParameter('null', null)
            ->getQuery();
        $que->execute();

        return true;
    }
}
