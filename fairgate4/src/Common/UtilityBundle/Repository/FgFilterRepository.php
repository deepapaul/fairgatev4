<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Repository\FgCmBookmarksRepository;
use Common\UtilityBundle\Util\FgUtility;

/**
 * FgClubRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgFilterRepository extends EntityRepository
{

    /**
     * Function to get Filters in the sidebar for a particular Contact.
     *
     * @param int    $contactId Contact Id
     * @param int    $clubid    Club Id
     * @param string $clubType  Club Type
     * @param Integer $staticFilterTrans Translation for static filters(singleperson/company/member/sponsor)
     *
     * @return array $dataResult Array of filters.
     */
    public function getSidebarFilter($contactId, $clubid, $staticFilterTrans)
    {
        $clubid = intval($clubid);
        $conn = $this->getEntityManager()->getConnection();

        $filterNameSql = "(CASE f.id WHEN '1' THEN '{$staticFilterTrans['1']}' WHEN '2' THEN '{$staticFilterTrans['2']}' WHEN '3' THEN '{$staticFilterTrans['3']}' WHEN '4' THEN '{$staticFilterTrans['4']}' ELSE f.name END) AS title";
        $filterSql = "SELECT f.id as id, $filterNameSql,'filter' as itemType,'1' as staticFilter, 
                             f.table_attributes AS filterTableAttributes, bm.id as bookMarkId
                       FROM fg_filter AS f
                       LEFT JOIN fg_cm_bookmarks  AS bm ON (( bm.filter_id =f.id AND  f.club_id=1 ) AND (bm.club_id=:clubid AND bm.contact_id=:contactId))
                       WHERE f.club_id=1 AND f.type = 'general'";

        $dataResult = $conn->fetchAll($filterSql, array(':clubid' => $clubid, ':contactId' => $contactId));
        return $dataResult;
    }

    /**
     * Function to get Saved Filters for a particular Contact.
     *
     * @param int $contactId Contact Id
     * @param int $clubid    Club Id
     *
     * @return array $dataResult Array of saved filters.
     */
    public function getSavedSidebarFilter($contactId, $clubid, $type = 'general')
    {
        $getFilterUsedOrNotDql = $this->getFilterUsedOrNot();
        $queryBuilder = $this->createQueryBuilder('f')
                ->select('f.id as filterId, f.name as filterName,f.filterData as filterData, IDENTITY(f.tableAttributes) as filterTableAttributes,bm.id as bookmarkid, 0 as isBroken , f.sortOrder')
                ->addSelect('(' . $getFilterUsedOrNotDql->getDQL() . ') AS filterUsed ');
        if ($type == 'sponsor') {
            $queryBuilder = $queryBuilder->leftJoin('CommonUtilityBundle:FgSmBookmarks', 'bm', 'WITH', '(bm.contact = :userId AND bm.club =:clubid AND bm.filter=f.id)');
        } else {
            $queryBuilder = $queryBuilder->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', '(bm.contact = :userId AND bm.club =:clubid AND bm.filter=f.id)');
        }
        $queryBuilder = $queryBuilder
                        ->orderBy('f.sortOrder')
                        ->Where('f.club=:clubid')
                        ->andWhere('f.type=:type');
        $queryBuilder->setParameter('userId', $contactId)
                ->setParameter('clubid', $clubid)
                ->setParameter('type', $type);
        
        $dataResult = $queryBuilder->getQuery()->getArrayResult();

        return $dataResult;
    }
    
     /**
     * Function to get Filter is Used Or Not
     *
     * @return Integer
     */
    private function getFilterUsedOrNot()
    {
        $moduleQuery = $this->getEntityManager()->createQueryBuilder();
        $moduleQuery->select('COUNT(IDENTITY(ct.filter))')
            ->from('CommonUtilityBundle:FgCmsContactTable', 'ct')
            ->innerJoin('CommonUtilityBundle:FgCmsPageContentElement', 'fc1', 'WITH', 'ct.id = fc1.table AND fc1.isDeleted = 0')
            ->where('ct.filter = f.id')
            ->groupBy('f.id');
        
        return $moduleQuery;
    }

    /**
     * Function to save Filter for a particular Contact.
     *
     * @param array $filterdata Filter Data
     *
     * @return array $returnArray Array containing data of saved filter.
     */
    public function saveFilter($filterdata)
    {
        $conn = $this->getEntityManager()->getConnection();
        $clubId = intval($filterdata['clubId']);
        $contactId = intval($filterdata['contactId']);
        $name = FgUtility::getSecuredData($filterdata['name'], $conn);
        $jString = FgUtility::getSecuredData($filterdata['jString'], $conn); //substr_replace(substr($filterdata['jString'], 1), "", -1) ;
        $type = isset($filterdata['type']) ? $filterdata['type'] : 'general';

        $sql = "SELECT count(id) as cnt FROM fg_filter WHERE name = :name AND  contact_id = :contactId AND  club_id = :clubId AND type = :type;";
        $fnCnt = $conn->executeQuery($sql, array(':contactId' => $contactId, ':clubId' => $clubId, ':name' => $name, ':type' => $type))->fetch();

        if ($fnCnt['cnt'] <= 0) {
            $qry = "INSERT INTO fg_filter (sort_order, name, table_attributes, table_rows, contact_id, club_id, updated_at, filter_data, is_broken, type)
                  SELECT 1 + coalesce((SELECT max(sort_order) FROM fg_filter WHERE club_id=:clubId), 0), :name, NULL , '10', :contactId, :clubId, now(), '$jString', 0, :type ;";
            $stmt = $conn->executeQuery($qry, array(':contactId' => $contactId, ':clubId' => $clubId, ':name' => $name, ':type' => $type));
            $operation = 'INSERT';
        } else {
            $qry = "UPDATE fg_filter SET name = :name, filter_data='$jString', updated_at=now(),is_broken =0 WHERE name = :name AND  contact_id = :contactId AND  club_id = :clubId AND type = :type;";
            $stmt = $conn->executeQuery($qry, array(':contactId' => $contactId, ':clubId' => $clubId, ':name' => $name, ':type' => $type));
            $operation = 'UDATE';
        }

        $qryLastId = "SELECT id as lastid FROM fg_filter WHERE name = :name AND  contact_id = :contactId AND  club_id = :clubId AND type = :type ORDER BY id DESC;";
        $lastId = $conn->executeQuery($qryLastId, array(':contactId' => $contactId, ':clubId' => $clubId, ':name' => $name, ':type' => $type))->fetch();
        $conn->close();

        $returnArray = array('operation' => $operation, 'last_id' => $lastId);

        return $returnArray;
    }

    /**
     * Function to get details of a given filter.
     *
     * @param int    $id        Filter Id
     * @param int    $contactId Contact Id
     * @param int    $clubId    Club id
     * @param string $type      Filter Type
     *
     * @return array $dataResult Array of filter details.
     */
    public function getSingleSavedSidebarFilter($id, $contactId, $clubId, $type = "filter")
    {
        if ($type == 'role') {
            $roleType = 'role';
            $select = '';
        } elseif ($type == 'sponsor') {
            $roleType = "sponsor";
            $select = ', bm.id as bookmarkid';
        } else {
            $roleType = "general";
            $select = ', bm.id as bookmarkid';
        }

        $queryBuilder = $this->createQueryBuilder('f')
                ->select("f.id as filterId, f.name as filterName, IDENTITY(f.tableAttributes) as filterTableAttributes, f.filterData as filterData $select");

        if ($type == "filter") {
            $queryBuilder = $queryBuilder->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', '(bm.filter=f.id AND bm.contact=:contactId)');
            $queryBuilder->setParameter('contactId', $contactId);
        } else if ($type == "sponsor") {
            $queryBuilder = $queryBuilder->leftJoin('CommonUtilityBundle:FgSmBookmarks', 'bm', 'WITH', '(bm.filter=f.id AND bm.contact=:contactId)');
            $queryBuilder->setParameter('contactId', $contactId);
        }

        $queryBuilder = $queryBuilder->Where('f.id=:id AND (f.club=:clubId OR f.club=1) AND f.type=:type ');
        $queryBuilder->setParameter('id', $id)->setParameter('clubId', $clubId)->setParameter('type', $roleType);        
        $dataResult = $queryBuilder->getQuery()->getArrayResult();

        return $dataResult;
    }

    /**
     * Function to update Filters which is broken or having no functions.
     *
     * @param int $id       Filter Id
     * @param int $isBroken Is Filter broken
     *
     * @return boolean true Successful updation.
     */
    public function updateBorkenFilter($id, $isBroken)
    {
        $conn = $this->getEntityManager()->getConnection();
        $qry = "UPDATE fg_filter SET `is_broken` = :isBroken, updated_at=now() WHERE `id` = :id";
        $stmt = $conn->executeQuery($qry, array(':isBroken' => $isBroken, ':id' => $id));
        $conn->close();

        return true;
    }

    /**
     * Function to get the Filter data of Filter roles for a given role.
     *
     * @param int $roleId Role Id
     *
     * @return array $resultArray Result array of Filter data.
     */
    public function getFilterRoledata($roleId)
    {
        $type = 'role';
        $queryBuilder = $this->createQueryBuilder('f')
                ->select('f.id as filterId, f.filterData as filterData, IDENTITY(f.club) as club')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', '(r.filter=f.id)')
                ->where('r.id=:roleId AND f.type=:type ');

        $queryBuilder->setParameter('roleId', $roleId)
                     ->setParameter('type', $type);

        $dataResult = $queryBuilder->getQuery()->getArrayResult();
        $resultArray = $dataResult[0];

        return $resultArray;
    }

    /**
     * Function to get the Filter data of saved filter.
     *
     * @param int    $filterId   Filter Id
     * @param string $filterType Filter type 'general' or 'sponsor'
     * 
     * @return array $resultArray Array of filters.
     */
    public function getSavedFilterdata($clubId, $filterType = 'general')
    {
        $queryBuilder = $this->createQueryBuilder('f')
                ->select('f.id as filterId, f.name as filterName')
                ->where('f.club=:clubId AND f.type=:type')
                ->orderBy('f.sortOrder')
                ->setParameter('clubId', $clubId)
                ->setParameter('type', $filterType);
        $resultArray = $queryBuilder->getQuery()->getArrayResult();

        return $resultArray;
    }

    /**
     * Function to save Filters in the sidebar for a particular Contact.
     *
     * @param array $filterdata Filter data
     *
     * @return array $returnArray Result array of saved filter data.
     */
    public function saveFilterRole($filterdata)
    {
        $conn = $this->getEntityManager()->getConnection();
        $clubId = $filterdata['clubId'];
        $contactId = $filterdata['contactId'];
        $roleId = ($filterdata['roleId']) ? $filterdata['roleId'] : "";
        $jString = FgUtility::getSecuredData($filterdata['jString'], $conn);
        $count = 0;

        if ($roleId) {
            $sql = "SELECT count(f.id) as cnt FROM fg_filter f LEFT JOIN fg_rm_role r ON f.id = r.filter_id WHERE r.id =:roleId AND  f.club_id = :clubId";
            $fnCnt = $conn->executeQuery($sql, array(':roleId' => $roleId, ':clubId' => $clubId))->fetch();
            $count = $fnCnt['cnt'];
        }

        if ($count > 0) {
            $qry = "UPDATE fg_filter SET  filter_data='$jString', updated_at=now(),is_broken =0 WHERE (id = (SELECT filter_id from fg_rm_role where id = :roleId) ) AND  club_id = :clubId;";
            $stmt = $conn->executeQuery($qry, array(':roleId' => $roleId, ':clubId' => $clubId));
            $operation = 'UDATE';
        } else {
            $qry = "INSERT INTO fg_filter (sort_order, type, table_attributes, table_rows, contact_id, club_id, updated_at, filter_data, is_broken)
                   SELECT 1 + coalesce((SELECT max(sort_order) FROM fg_filter), 0), 'role', NULL , '10', :contactId, :clubId, now(), '$jString', 0 ;";
            $stmt = $conn->executeQuery($qry, array(':contactId' => $contactId, ':clubId' => $clubId));
            $operation = 'INSERT';
        }
        $qryLastId = "SELECT id as lastid FROM fg_filter WHERE type = 'role' AND  contact_id = :contactId AND  club_id = :clubId ORDER BY id DESC;";
        $lastId = $conn->executeQuery($qryLastId, array(':contactId' => $contactId, ':clubId' => $clubId))->fetch();
        $conn->close();
        $returnArray = array('operation' => $operation, 'last_id' => $lastId);

        return $returnArray;
    }

     /**
     * Function to get Filters in the sidebar for a particular Contact.
     *
     * @param int    $contactId Contact Id
     * @param int    $clubid    Club Id
     * @param string $clubType  Club Type
     *
     * @return array $dataResult Array of filters.
     */
    public function getSidebarFilterCount($contactId, $clubid, $clubType)
    {
        $clubid = intval($clubid);
        $conn = $this->getEntityManager()->getConnection();
        if ($clubType == 'federation' || $clubType == 'sub_federation'){
             $field = ($clubType == 'federation')?'mc.fed_contact_id':'mc.contact_id';
              $tablename = 'master_federation_' . $clubid;
            $where = " fg_cm_contact.is_deleted = 0 AND fg_cm_contact.is_permanent_delete=0 AND fg_cm_contact.club_id = '{$clubid}' AND (fg_cm_contact.main_club_id = '{$clubid}' OR fg_cm_contact.fed_membership_cat_id IS NOT NULL AND fg_cm_contact.fed_membership_cat_id != '') ";
        } else {
             $field = 'mc.contact_id';
             $tablename = 'master_club_' . $clubid;
            $where = "( (fg_cm_contact.is_deleted = 0 AND fg_cm_contact.is_permanent_delete=0) OR (fg_cm_contact.is_deleted=1 AND fg_cm_contact.is_permanent_delete=0))";
        }
        $where.=" AND fg_cm_contact.is_draft=0";
        
        $countsql = "(CASE f.id  WHEN '1'  THEN (SELECT  count(fg_cm_contact.id) from  $tablename as mc
                                                 INNER JOIN fg_cm_contact on {$field} = fg_cm_contact.id
                                                 INNER JOIN master_system as ms on ms.fed_contact_id = fg_cm_contact.fed_contact_id
                                                 WHERE (fg_cm_contact.is_company=0) AND $where)
                      WHEN  '2' THEN (SELECT  count(fg_cm_contact.id) from  $tablename as mc
                                                 INNER JOIN fg_cm_contact on {$field} = fg_cm_contact.id
                                                 INNER JOIN master_system as ms on ms.fed_contact_id = fg_cm_contact.fed_contact_id
                                                 WHERE (fg_cm_contact.is_company=1) AND $where)
                      WHEN  '3'  THEN (SELECT  count(fg_cm_contact.id) from  $tablename as mc
                                                 INNER JOIN fg_cm_contact on {$field} = fg_cm_contact.id
                                                 INNER JOIN master_system as ms on ms.fed_contact_id = fg_cm_contact.fed_contact_id
                                                 WHERE (fg_cm_contact.club_membership_cat_id IS NOT NULL) AND $where)
                      WHEN  '4'  THEN (SELECT  count(fg_cm_contact.id) from  $tablename as mc
                                                 INNER JOIN fg_cm_contact on {$field} = fg_cm_contact.id
                                                 INNER JOIN master_system as ms on ms.fed_contact_id = fg_cm_contact.fed_contact_id
                                                 WHERE (fg_cm_contact.fed_membership_cat_id IS NOT NULL || fg_cm_contact.fed_membership_cat_id !='' ) AND $where)
                                                     
                       END) AS sidebarCount";

        $filterSql = "SELECT '' as categoryId,f.id as subCatId, 'filter' as dataType, $countsql,'show' as action
                       FROM fg_filter AS f
                       WHERE f.club_id=1 AND f.type = 'general'";

        $dataResult = $conn->fetchAll($filterSql, array(':clubid' => $clubid, ':contactId' => $contactId));
        return $dataResult;
    }


}