<?php

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgSettings;

/**
 * SfGuardUserTeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SfGuardUserTeamRepository extends EntityRepository
{

    /**
     * Function to get existing user team rights
     *
     * @param type $contactKey Contact id
     * @param type $groupKey   Group Id
     *
     * @return type Array
     */
    public function getExistingUserTeams($contactKey, $groupKey, $role)
    {

        $qb = $this->createQueryBuilder('sft')
            ->select('r.id')
            ->leftJoin('sft.role', 'r')
            ->leftJoin('sft.user', 'u')
            ->where('u.contact=:contactId')
            ->andWhere('r.type=:roleType')
            ->andWhere('sft.group=:groupId')
            ->setParameters(array('contactId' => $contactKey, 'groupId' => $groupKey, 'roleType' => $role));

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get all roles where the current user has rights
     *
     * @param object $container Container object
     * @param int    $userId    UserId
     *
     * @return array $return Array of assigned teams and workgroups
     */
    public function getAllRolesUnderMyOwnership($container = false, $userId)
    {
        $clubDefaultLang = $container ? $container->get('club')->get('default_lang') : 'de';
        $termExecutive = $container ? ucfirst($container->get('fairgate_terminology_service')->getTerminology('Executive Board', $container->getParameter('singular'))) : 'Executive';
        $roleUserRightsArr = $container->getParameter('roleUserRights');
        $groupIds = array_keys($roleUserRightsArr);
        $qb = $this->createQueryBuilder('sft');
        $qb->select("g.id AS groupId, r.id AS roleId, (CASE WHEN r.isExecutiveBoard=1 THEN '" . $termExecutive . "' WHEN (ri18n.titleLang IS NULL OR ri18n.titleLang = '') THEN r.title ELSE ri18n.titleLang END) AS roleTitle, r.type AS roleType")
            ->leftJoin("CommonUtilityBundle:FgRmRole", "r", "WITH", "sft.role = r.id")
            ->leftJoin("CommonUtilityBundle:FgRmRoleI18n", "ri18n", "WITH", "ri18n.id=r.id AND ri18n.lang='" . $clubDefaultLang . "'")
            ->leftJoin("CommonUtilityBundle:sfGuardGroup", "g", "WITH", "sft.group = g.id")
            ->add('where', $qb->expr()->in('g.id', ':groupIds'))
            ->andWhere('sft.user=:userId')
            ->andWhere('r.isActive=:isActive')
            ->setParameters(array('userId' => $userId, 'groupIds' => $groupIds, 'isActive' => 1));
        $result = $qb->getQuery()->getResult();

        $roles = $myTeams = $myWorkgroups = $roleRights = array();
        //Group the rights and roles , role wise/group wise
        foreach ($result as $val) {
            $roleRights[$val['roleId']]['rights'][] = $roleUserRightsArr[$val['groupId']];
            $roleRights[$val['roleId']]['type'] = $val['roleType'];
            if (!isset($roles[$roleUserRightsArr[$val['groupId']]])) {
                $roles[$roleUserRightsArr[$val['groupId']]]['teams'] = array();
                $roles[$roleUserRightsArr[$val['groupId']]]['workgroups'] = array();
            }
            if ($val['roleType'] == 'T') {
                $roles[$roleUserRightsArr[$val['groupId']]]['teams'][] = $val['roleId'];
                $myTeams[$val['roleId']] = strip_tags($val['roleTitle']);
            } elseif ($val['roleType'] == 'W') {
                $roles[$roleUserRightsArr[$val['groupId']]]['workgroups'][] = $val['roleId'];
                $myWorkgroups[$val['roleId']] = strip_tags($val['roleTitle']);
            }
        }

        $return = array('rolesWithRights' => $roles, 'rolesWithAccess' => array('teams' => $myTeams, 'workgroups' => $myWorkgroups), 'rightsPerClubRole' => $roleRights);

        return $return;
    }

    /**
     * Method to get team/workgroup article admins
     * 
     * @param int $clubId clubId
     * 
     * @return array $result result array
     */
    public function getArticleRoleAdmin($clubId)
    {
        $dateFormat = FgSettings::getMysqlDateFormat();

        $sql = "SELECT DATE_FORMAT(sfug.created_at, '$dateFormat') as createdAt, sfu.id as user_id,g.type, sfug.user_id,g.module_type,
              fcc.is_stealth_mode as stealth,contactNameNoSort(sfu.contact_id, 0) as contactname, sfug.role_id as team, role.type as roleType,
              sfu.contact_id, CONCAT('c_',sfu.contact_id ) as contactId 
              FROM sf_guard_user_team sfug
              LEFT JOIN fg_rm_role role ON role.id = sfug.role_id
              LEFT JOIN sf_guard_user sfu ON sfu.id=sfug.user_id
              LEFT JOIN fg_cm_contact fcc ON fcc.id = sfu.contact_id
              LEFT JOIN sf_guard_group g ON g.id=sfug.group_id
              WHERE sfu.club_id=:club AND g.type = 'role' AND g.module_type='article' 
              ORDER BY contactNameNoSort(sfu.contact_id,0) ASC";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('club', $clubId);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }
}
