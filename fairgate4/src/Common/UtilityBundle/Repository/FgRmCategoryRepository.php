<?php

/**
 * FgRmCategoryRepository
 *
 * This class is basically used for managing role related functionalities
 */

namespace Common\UtilityBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Common\UtilityBundle\Util\FgUtility;
use Common\UtilityBundle\Util\FgSettings;

/**
 * FgRmCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FgRmCategoryRepository extends EntityRepository {

    private $delQryStr = array();
    private $bookmarkArr = array();
    private $updateQryStr = 'SET '; //Setting the query string
    private $updateQryStri18n = '';
    private $deleteFollowers = '';
    private $updateQry = '';
    private $newRoleFunctionQuery = '';
    private $roleCategoryId = '';
    private $roleId = '';
    private $functionId = '';
    private $functionAssign = '';
    private $contactId = '';
    private $insertLogEntry = '';
    private $clubDefaultLang = '';
    private $fromType = '';
    private $container = '';
    private $translationArr = array();
    public $deletedIds = array();

    /**
     * Function to get either all club role category details,
     * or a particular category details using category id
     *
     * @param Integer $clubId  club id
     * @param Integer $catType fedration role category or club role cateogry
     * @param Integer $catId   categoryId
     * @param Boolean $exec    true or false value decides whether pass query result or as processed array
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getRoleCatDetails($clubId, $catType, $catId = '0', $exec = true) {
        // Configuring UDF.
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubCategoryCount', 'Common\UtilityBundle\Extensions\CategoryCount');
        // Configuring UDF.
        $assignedType = 'manual';
        if ($catType == 'filter_role') {
            $assignedType = 'filter-driven';
        }
        $isFedCategory = ($catType == 'fed_cat') ? 1 : 0;
        $roleCategory = $this->createQueryBuilder('c')
                ->select("c.id,c.title,c.sortOrder, c.isActive,getClubCategoryCount(c.id,$clubId ) as contactCount,
                        c.isFedCategory,c.roleAssign, c.functionAssign, c.isAllowedFedmemberSubfed,
                        c.isRequiredFedmemberSubfed,c.isAllowedFedmemberClub,c.isRequiredFedmemberClub,
                        ci18.titleLang, ci18.lang")
                ->addSelect("(SELECT COUNT(r.id) FROM CommonUtilityBundle:FgRmRole r WHERE r.club = $clubId
                        AND r.category = c.id )role_count")
                ->leftJoin('CommonUtilityBundle:FgRmCategoryI18n', 'ci18', 'WITH', 'ci18.id = c.id')
                ->where('c.club=:clubId')
                ->andWhere('c.isTeam=0')
                ->andWhere('c.isWorkgroup=0');
        if ($catType != '') {
            $roleCategory->andWhere('c.isFedCategory=:fedCategory');
        }
        if ($catId > 0) {
            $roleCategory->andWhere('c.id=:CategoryId');
        }
        $roleCategory->andWhere('c.contactAssign=:contactAssign');
        $roleCategory->orderBy('c.sortOrder');
        $roleCategory->setParameter('clubId', $clubId);
        if ($catType != '') {
            $roleCategory->setParameter('fedCategory', $isFedCategory);
        }
        if ($catId > 0) {
            $roleCategory->setParameter('CategoryId', $catId);
        }
        $roleCategory->setParameter('contactAssign', $assignedType);
        $dataResult = $roleCategory->getQuery()->getArrayResult();
        if ($exec) {
            $result = array();
            $l = 0;
            $id = '';
            foreach ($dataResult as $key => $arr) {
                if (count($arr) > 0) {
                    if ($arr['id'] == $id) {
                        $result[$id]['titleLang'][$arr['lang']] = $arr['titleLang'];
                    } else {
                        $id = $arr['id'];
                        $result[$id] = array('id' => $arr['id'], 'title' => $arr['title'], 'sortOrder' => $arr['sortOrder'], 'isActive' => $arr['isActive'], 'isFedCategory' => $arr['isFedCategory'], 'roleAssign' => $arr['roleAssign'], 'functionAssign' => $arr['functionAssign'], 'isAllowedFedmemberSubfed' => $arr['isAllowedFedmemberSubfed'], 'isRequiredFedmemberSubfed' => $arr['isRequiredFedmemberSubfed'], 'isAllowedFedmemberClub' => $arr['isAllowedFedmemberClub'], 'isRequiredFedmemberClub' => $arr['isRequiredFedmemberClub'], 'role_count' => $arr['role_count'], 'contactCount' => $arr['contactCount']);
                        $result[$id]['titleLang'][$arr['lang']] = $arr['titleLang'];
                    }
                }
            }

            return $result;
        } else {

            return $dataResult;
        }
    }

    /**
     * Function to get category, role and function details of a category
     *
     * @param Integer $clubId    The club id
     * @param Integer $catId     The category id
     * @param Integer $contactId The contact id
     * @param Integer $clubType  The club type like federation, sub-federation etc
     *
     * @return query result
     */
    public function getCategorySettingsDetails($clubId, $catId, $contactId, $clubType) {
        $functonCount = $this->_em->getRepository('CommonUtilityBundle:FgRmFunction')->getSubQueryForFunctionCount($catId, '', $clubType, 0, $clubId);
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $roleCategory = $this->createQueryBuilder('c')
                ->select("r.id as rl_id, r.title as rl_title, r.visibleForAll as rl_visibleForAll, r.isActive as rl_isActive, r.isExecutiveBoard as rl_isExecutiveBoard,
                      r.sortOrder as rl_sortOrder, ri18.titleLang as rl_titleLang , ri18.lang as rl_lang, f.id as fn_id, f.title as fn_title,
                      f.isActive as fn_isActive, f.sortOrder as fn_sortOrder, fi18.titleLang as fn_titleLang, fi18.lang as fn_lang,
                      IDENTITY(rf.role) as roleid, IDENTITY(rf.function) as functionid, bm.id AS rl_bookMarkId, f.isFederation AS isFedFunction,
                      getClubRoleCount(r.id, $clubId) as roleCount")
                ->addSelect('(' . $functonCount->getDQL() . ') as fnCount')
                ->addSelect("(SELECT count(dm.id) FROM CommonUtilityBundle:FgDmDocuments dm LEFT JOIN CommonUtilityBundle:FgDmAssigment ass WITH ass.document=dm.id
                              WHERE  dm.documentType = 'WORKGROUP' AND (ass.role=r.id OR (dm.depositedWith='ALL' AND dm.club=$clubId))) docCount")
                ->addSelect('(SELECT count(mf.id) FROM CommonUtilityBundle:FgCmChangeToconfirmFunctions mf INNER JOIN CommonUtilityBundle:FgCmChangeToconfirm cf WITH cf.id = mf.toconfirm
                                WHERE mf.function = f.id AND cf.confirmStatus <> :discarded) as functionRestriction')
                ->addSelect('(SELECT count(ff.id) FROM CommonUtilityBundle:FgForumFollowers ff WHERE ff.group = r.id and c.club = ff.club) as forumCount')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'r.category = c.id')
                ->leftJoin('CommonUtilityBundle:FgRmRoleI18n', 'ri18', 'WITH', 'ri18.id = r.id')
                ->leftJoin('CommonUtilityBundle:FgRmFunction', 'f', 'WITH', 'f.category = c.id')
                ->leftJoin('CommonUtilityBundle:FgRmFunctionI18n', 'fi18', 'WITH', 'fi18.id = f.id')
                ->leftJoin('CommonUtilityBundle:FgRmRoleFunction', 'rf', 'WITH', 'rf.role = r.id AND rf.function = f.id')
                ->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', 'bm.role = r.id AND bm.club=:clubId AND bm.contact =:contactId')
                ->where('c.club=:clubId')->andWhere('c.id=:categoryId')
                ->andWhere('c.contactAssign=:contactAssign')->orderBy('r.sortOrder, f.sortOrder')
                ->setParameters(array('clubId' => $clubId, 'categoryId' => $catId, 'contactId' => $contactId, 'contactAssign' => 'manual', 'discarded' => 'DISCARDED'));

        return $dataResult = $roleCategory->getQuery()->getArrayResult();
    }

    /**
     * Function to executes saverolecatsettings
     *
     * Function used to to save category settings data (role, team, workgroup, executiveboard, filter role)
     * @param Array   $catArr          data used for saving
     * @param String  $fnAssign        function assign type
     * @param String  $clubDefaultLang default language of club
     * @param String  $clubLanguages   languages of current club
     * @param Integer $clubId          current clubid
     * @param Integer $contactId       logged in contact id
     * @param String  $catType         category type
     * @param Integer $clubTeamId      current club team id
     * @param Object  $container       contains the filter role object
     *
     * @return boolean true/false
     */
    public function saverolecatsettingsAction($catArr, $fnAssign, $clubDefaultLang, $clubLanguages, $clubId, $contactId, $catType, $clubTeamId, $container = '', $translationsArr = array()) {
        //GENERATE PDO QUERY FOR MULTIPLE UPDATE AND DELETE.
        if (count($catArr) > 0) {
            $this->contactId = $contactId;
            $this->clubDefaultLang = $clubDefaultLang;
            $this->fromType = $catType;
            $this->container = $container;
            $this->translationArr = $translationsArr;
            $defaultTableQuery = array();
            $this->frontend1Booked = in_array('frontend1', $this->container->get('club')->get('bookedModulesDet')) ? true : false;
            //FUNCTION ASSIGN AREA.
            if ($catType == 'workgroup' || $catType == 'executiveboard') {
                $this->functionAssign = 'individual';
            } else if ($catType == 'role') {
                $this->functionAssign = $fnAssign;
            } else if ($catType == 'team') {
                $this->functionAssign = 'same';
            } else if ($catType == 'filterrole') {
                $this->functionAssign = 'none';
            }
            //FUNCTION ASSIGN AREA.
            foreach ($catArr as $categoryId => $catData) {
                if ($catType == 'team') {
                    $this->roleCategoryId = $clubTeamId;
                    $catTable = 'fg_team_category';
                } else {
                    $this->roleCategoryId = $categoryId;
                    $catTable = 'fg_rm_category';
                }
                $conn = $this->getEntityManager()->getConnection();
                $sql = "SELECT count(id) as catCnt FROM fg_rm_category WHERE id = $this->roleCategoryId AND club_id = $clubId;";
                $fnCnt = $conn->executeQuery($sql)->fetchColumn();
                if (!$fnCnt) {
                    continue;
                }
                foreach ($catData as $field => $value) {
                    if ($field == 'function_assign') {
                        $this->functionAssign = $value;
                    }
                    $tablename = $this->genrateQueryString($field, $value, $categoryId, $catTable, $clubLanguages, $clubId, false);
                }
                $this->updateQueryString($tablename, $categoryId);
            }
            $defaultTableQuery['fg_rm_role'] = $this->updateDefaultTable('fg_rm_role');
            $defaultTableQuery['fg_rm_function'] = $this->updateDefaultTable('fg_rm_function');
            $defaultTableQuery[$catTable] = $this->updateDefaultTable($catTable);
            //FUNCTION ASSIGN AREA.
            //DELETE QUERY PREPARATION AREA.
            $delFinalString = $this->delQryPrepare($clubId, $contactId);
            //DELETE QUERY PREPARATION AREA.
            //EXECUTE TRANSACTION.
            $updateFullQry = $this->newRoleFunctionQuery . $this->insertLogEntry . $this->updateQry . $this->updateQryStri18n . $this->deleteFollowers;
            $transaction = $this->addtotransaction($updateFullQry, $delFinalString);
            //EXECUTE TRANSACTION.
            //UPDATE CATEGORY FUNCTION TYPE IF THERE ARE NO FUNCTION.
            $conn = $this->getEntityManager()->getConnection();
            if ($transaction && $this->fromType == 'role') {
                $sql = "SELECT count(id) as cnt FROM fg_rm_function WHERE category_id = $this->roleCategoryId;";
                $fnCnt = $conn->executeQuery($sql)->fetch();
                if ($fnCnt['cnt'] <= 0) {
                    $qry = "UPDATE fg_rm_category SET function_assign = 'none' WHERE id = $this->roleCategoryId;";
                    $stmt = $conn->executeQuery($qry);
                }
            }
            if (count($defaultTableQuery) > 0) {
                $conn->executeQuery(implode(';', $defaultTableQuery));
            }
            $conn->close();
            //UPDATE CATEGORY FUNCTION TYPE IF THERE ARE NO FUNCTION.
            //UPDATE BOOKMARK.
            if (count($this->bookmarkArr) > 0) {
                $this->_em->getRepository('CommonUtilityBundle:FgCmBookmarks')->createDeletebookmark('role', $this->bookmarkArr, $clubId, $contactId);
            }
            //UPDATE BOOKMARK.
        }


        return array('deleledIds' => $this->deletedIds);
    }

    /**
     * Function used to generate native query from json data
     *
     * @param String  $field         which field to be updated
     * @param String  $value         new value of the the specified field
     * @param Integer $categoryId    category Id
     * @param String  $tablename     name of the table to be updated
     * @param String  $clubLanguages club languages
     * @param Integer $clubId        current club id
     * @param String  $newFlag       wheather it is adding a new category/role/function
     *
     * @return $tablename final table name
     */
    public function genrateQueryString($field, $value, $categoryId, $tablename, $clubLanguages, $clubId, $newFlag = false) {
        $categoryId = intval($categoryId);
        //GENERATE PDO QUERY FOR MULTIPLE UPDATE AND DELETE
        if ($field == 'role' || $field == 'team') {
            $this->updateQueryString($tablename, $categoryId);
            $tablename = 'fg_rm_role';
        } else if ($field == 'function') {
            $this->updateQueryString($tablename, $categoryId);
            $tablename = 'fg_rm_function';
        }
        if ($field == 'is_deleted') {
            if ($value == 1) {
                $this->delQryStr[$tablename][] = $categoryId;
//                if ($tablename == 'fg_rm_role') {
//                    $delRoleFnIds = $this->_em->getRepository('CommonUtilityBundle:FgRmRoleFunction')->getFunctionIds($categoryId);
//                    if (count($delRoleFnIds) > 0) {
//                        $this->delQryStr['AAA'][$categoryId] = $delRoleFnIds;
//                    }
//                }
            }
        } else if ($field == 'book_marked') {
            $this->bookmarkArr[] = $categoryId;
        } else {
            if ($field == 'i18n') {
                $clubLangArr = $clubLanguages;
                $isActive = 1;
                foreach ($value as $langkey => $title) {
                    $conn = $this->getEntityManager()->getConnection();
                    $updateArr = $updateArri18n = $updateDupi18n = array();
                    if (isset($title['title'])) {
                        $langTitle = FgUtility::getSecuredData($title['title'], $conn, false, false);
                        $updateArri18n['title_lang'] = "'$langTitle'";
                        $updateDupi18n[] = 'title_lang = VALUES(title_lang)';
                        $updateArr[] = "title = '$langTitle'";
                        $logArr['title'] = $langTitle;
                    }
                    if ($this->fromType == 'team' && $tablename == 'fg_rm_role' && isset($title['description'])) {
                        $desc = FgUtility::getSecuredData($title['description'], $conn, false, false);
                        $updateArri18n['description_lang'] = "'$desc'";
                        $updateDupi18n[] = 'description_lang = VALUES(description_lang)';
                        $updateArr[] = "description = '$desc'";
                        $logArr['description'] = $desc;
                    }
                    if ($langTitle != '' || $this->clubDefaultLang != $langkey || ($this->fromType == 'team')) {
                        $this->updateQryStri18n .= "INSERT INTO {$tablename}_i18n (id,lang," . implode(', ', array_keys($updateArri18n)) . ") VALUES ($categoryId,'$langkey'," . implode(', ', $updateArri18n) . ")  ON DUPLICATE KEY UPDATE " . implode(', ', $updateDupi18n) . ";";
                        if ($this->clubDefaultLang == $langkey) {
                            $this->updateQryStr .= implode(',', $updateArr);
                            $logTableName = $tablename;
                            if (($tablename != 'fg_team_category') && ($tablename != 'fg_rm_category')) {
                                $this->insertLogEntries($logTableName, $categoryId, $logArr, false, $langkey, $clubId);
                            }
                        }
                    }
                }
                $this->updateQueryString($tablename, $categoryId);
            } else if (is_array($value)) {
                foreach ($value as $fieldId => $valueArr) {
                    if ($fieldId == 'new' && ($tablename == 'fg_rm_role' || $tablename == 'fg_rm_function')) {
                        // Added extra condition for fixing issue with case: function assign- common, delete role and add new function.
                        if ((!in_array($this->roleId, $this->delQryStr['fg_rm_role']))) {
                            $this->newRoleFunctionQuery .= $this->generateQryForAddingRoleFn($tablename, $valueArr, $clubLanguages, $clubId);
                        }
                    } else if ($fieldId == 'filter_data' && $this->fromType == 'filterrole') {
                        //for editing the filter in filter roles.
                        $filterData['jString'] = $valueArr;
                        $filterData['clubId'] = $clubId;
                        $filterData['contactId'] = $this->contactId;
                        $filterData['name'] = null;
                        $filterData['roleId'] = $field;
                        $this->_em->getRepository('CommonUtilityBundle:FgFilter')->saveFilterRole($filterData);
                        $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->updateFilterRoles($filterData['roleId'], $this->container, $this->contactId);
                    } else if ($fieldId == 'execeptions' && $this->fromType == 'filterrole') {
                        $returnArray = $this->_em->getRepository('CommonUtilityBundle:FgRmRoleManualContacts')->saveFilterRoleExceptions($field, $valueArr, $clubId);
                        $newExcludedCnts = $returnArray['newExcludedCnts'];
                        $delExcludedCnts = $returnArray['delExcludedCnts'];
                        $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->updateFilterRoles($field, $this->container, $this->contactId, $newExcludedCnts, $delExcludedCnts);
                    } else {
                        if (($field == 'role' || $field == 'team') && $fieldId != 'new') {
                            $this->roleId = $fieldId;
                        }
                        if ($field == 'function' && $fieldId != 'new') {
                            $this->functionId = $fieldId;
                        }
                        $rowId = ($field == 'role' || $field == 'team' || $field == 'function') ? $fieldId : $categoryId;

                        $this->genrateQueryString($fieldId, $valueArr, $rowId, $tablename, $clubLanguages, $clubId, $newFlag);
                        $this->updateQueryString($tablename, $rowId);
                    }
                }
            } else {
                if ($this->fromType == 'team') {
                    $field = ($tablename == 'fg_rm_function' && $field == 'is_active') ? 'is_visible' : $field;
                }
                if ($field == "is_allowed_fedmember_subfed" && $value == 0)
                    $this->updateQryStr .= " is_required_fedmember_subfed = '0',";
                if ($field == "is_allowed_fedmember_club" && $value == 0)
                    $this->updateQryStr .= " is_required_fedmember_club = '0',";
                $this->updateQryStr .= "$field = '$value',";
                if (($field == 'team_category_id') && ($this->roleId != '')) {
                    $valueLogArr = array('team_category_id' => $value);
                    $this->insertLogEntries('fg_rm_role', $this->roleId, $valueLogArr, false, $this->clubDefaultLang, $clubId);
                    // Update sort order.
                    $maxSrtOrder = $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->getMaxSortOrderOfTeams($clubId, $value);
                    $maxSortOrder = $maxSrtOrder + 1;
                    $this->updateQryStr .= "sort_order = '$maxSortOrder',";
                }
                if (($this->fromType == 'team' || $this->fromType == 'workgroup') && ($field == 'is_active' || $field == 'visible_for_all' ) && ($this->roleId != '')) {
                    $valueLogArr = ($field == 'visible_for_all') ? array('visible_for_all' => $value) : array('is_active' => $value);
                    if ($field == 'visible_for_all' && $value == 0)
                        $this->removeRoleForeignFollowersOnSwitch($this->roleId, $clubId);
                    $this->insertLogEntries('fg_rm_role', $this->roleId, $valueLogArr, false, $this->clubDefaultLang, $clubId);
                }
            }
        }

        return $tablename;
    }

    /**
     * Function used generate new role and new function
     *
     * @param String  $tablename     name of the table to be updated
     * @param Array   $valueArr      new data array
     * @param String  $clubLanguages club languages
     * @param Integer $clubId        club id
     *
     * @return $roleFnQry role function query string
     */
    public function generateQryForAddingRoleFn($tablename, $valueArr, $clubLanguages, $clubId) {
        $roleFnArr = array();
        $roleFnQry = '';
        foreach ($valueArr as $timestamp => $newDataArr) {
            $roleFnArr = $this->loopNewDataArr($tablename, $newDataArr, $clubLanguages, $clubId);
            if (count($roleFnArr) > 0) {
                foreach ($roleFnArr as $roleId => $fnArr) {
                    if (count($fnArr) > 0) {
                        foreach ($fnArr as $key => $functionId) {
                            if ($functionId && $roleId) {
                                $roleFnQry .= "INSERT INTO fg_rm_role_function VALUES (NULL, $functionId, $roleId);";
                            }
                        }
                    }
                }
            }
        }

        return $roleFnQry;
    }

    /**
     * Function used to loop through new data array
     *
     * @param String  $tablename     new value of the the specified field
     * @param Array   $newDataArr    which field to be updated
     * @param String  $clubLanguages which field to be updated
     * @param Integer $clubId        club Id
     *
     * @return $result newentry result set
     */
    public function loopNewDataArr($tablename, $newDataArr, $clubLanguages, $clubId) {
        $insertQryStri18n = '';
        $insertQryStr = '';
        $isActive = $visibleForAll = 1;
        $sortOrder = 1;
        $isLangActive = 1;
        $requiredAssignment = 0;
        $teamCatId = '';
        $langDesc = 'NULL';
        $roleBookamarkFlag = false;
        $dummyId = '##dummyId##';
        $roleFnFlag = false;
        $insertedId = '';
        $conn = $this->getEntityManager()->getConnection();
        $inserti18FnArr = array('dummyId' => $dummyId, 'langTitle' => '', 'langkey' => '', 'isLangActive' => $isLangActive);
        $inserti18RoleArr = array('dummyId' => $dummyId, 'langTitle' => '', 'desc' => $langDesc, 'langkey' => '', 'isLangActive' => $isLangActive);
        $newExcludedCnts = array();
        $delExcludedCnts = array();
        foreach ($newDataArr as $key => $valArr) {
            if ($key == 'book_marked' && $valArr == 1) {
                $roleBookamarkFlag = true;
            } else if ($key == 'is_active') {
                $isActive = $valArr;
            } else if ($key == 'visible_for_all') {
                $visibleForAll = $valArr;
            } else if ($key == 'sort_order') {
                $sortOrder = $valArr;
            } else if ($key == 'is_required_assignment') {
                $requiredAssignment = $valArr;
            } else if ($key == 'team_category_id') {
                $teamCatId = $valArr;
            } else if ($key == 'i18n') {
                $clubLangArr = $clubLanguages;
                foreach ($valArr as $langkey => $title) {
                    if (isset($title['title'])) {
                        $langTitle = FgUtility::getSecuredData($title['title'], $conn, false, false);
                    }
                    if ($this->fromType == 'team' && $tablename == 'fg_rm_role' && isset($title['description'])) {
                        $langDesc = FgUtility::getSecuredData($title['description'], $conn, false, false);
                    }
                    if ($langTitle != '' || $this->clubDefaultLang != $langkey) {
                        if ($tablename == 'fg_rm_function') {
                            $inserti18FnArr['langkey'] = "'$langkey'";
                            $inserti18FnArr['langTitle'] = "'$langTitle'";
                            $insertQryStri18n .= 'INSERT INTO ' . $tablename . '_i18n VALUES (' . (implode(',', $inserti18FnArr)) . ');';
                        } else {
                            $inserti18RoleArr['langkey'] = "'$langkey'";
                            $inserti18RoleArr['langTitle'] = "'$langTitle'";
                            if ($this->fromType == 'team' && $langDesc != '') {
                                $inserti18RoleArr['desc'] = "'$langDesc'";
                            }
                            $insertQryStri18n .= 'INSERT INTO ' . $tablename . '_i18n VALUES (' . (implode(',', $inserti18RoleArr)) . ');';
                        }
                        if ($this->clubDefaultLang == $langkey) {
                            $mainTitle = $langTitle;
                            $mainDesc = $langDesc;
                        }
                        if (($key = array_search($langkey, $clubLangArr)) !== false) {
                            unset($clubLangArr[$key]);
                        }
                    }
                }
            } else if ($key == 'function') {
                $roleFnFlag = true;
                foreach ($valArr as $dummykey => $dummyArr) {
                    if ($dummykey == 'new') {
                        $fntablename = 'fg_rm_function';
                        $isActiveFn = 1;
                        $sortOrderFn = 1;
                        $requiredAssignmentFn = 0;
                        foreach ($dummyArr as $timestamp => $newFnDataArr) {
                            $insertFnQryStri18n = '';
                            foreach ($newFnDataArr as $fnkey => $fnvalArr) {
                                if ($fnkey == 'is_active') {
                                    $isActiveFn = $fnvalArr;
                                } else if ($fnkey == 'sort_order') {
                                    $sortOrderFn = $fnvalArr;
                                } else if ($fnkey == 'is_required_assignment') {
                                    $requiredAssignmentFn = $valArr;
                                } else if ($fnkey == 'i18n') {
                                    $fnlangTitle = '';
                                    $clubLangFnArr = $clubLanguages;
                                    $mainFnTitle = '';
                                    foreach ($fnvalArr as $fnlangkey => $fntitle) {
                                        $fnlangTitle = FgUtility::getSecuredData($fntitle['title'], $conn, false, false);
                                        if ($fnlangTitle != '' || $this->clubDefaultLang != $fnlangkey) {
                                            $fndummyId = '##dummyId##';
                                            $insertFnQryStri18n .= "INSERT INTO $fntablename" . "_i18n" . " VALUES($fndummyId, '$fnlangTitle', '$fnlangkey', $isLangActive);";
                                            if ($this->clubDefaultLang == $fnlangkey) {
                                                $mainFnTitle = $fnlangTitle;
                                            }
                                            if (($key = array_search($fnlangkey, $clubLangFnArr)) !== false) {
                                                unset($clubLangFnArr[$key]);
                                            }
                                        }
                                    }
                                }
                            }
                            $valueFnArr = array();
                            $valueFnArr[] = "category_id = '$this->roleCategoryId'";
                            $valueFnArr['title'] = "title = '$mainFnTitle'";
                            $valueFnArr[] = "is_visible = '$isActiveFn'";
                            $valueFnArr[] = "sort_order = '$sortOrderFn'";
                            $valueFnArr[] = "is_required_assignment = '$requiredAssignment'";
                            $newFnArray[] = $this->insertRoleFnData($clubId, $fntablename, $insertFnQryStri18n, $fndummyId, $valueFnArr);
                        }
                    }
                }
            } else if ($key == 'filter_data' && $this->fromType == 'filterrole') {
                //for save a filter for filter roles.
                $filterData['jString'] = $valArr;
                $filterData['clubId'] = $clubId;
                $filterData['contactId'] = $this->contactId;
                $filterData['name'] = null;
                $filterRoleArr[] = $this->_em->getRepository('CommonUtilityBundle:FgFilter')->saveFilterRole($filterData);
                $filterId = $filterRoleArr[0]['last_id']['lastid'];
            }
        }
        if ($mainTitle) {
            $valueInsrtArr = array();
            $valueInsrtArr[] = "category_id = '$this->roleCategoryId'";
            $valueInsrtArr['title'] = "title = '$mainTitle'";
            if ($this->fromType == 'team' && $tablename == 'fg_rm_function') {
                $valueInsrtArr[] = "is_visible = '$isActive'";
            }
            if (($this->fromType == 'team' || $this->fromType == 'workgroup') && $tablename != 'fg_rm_function' && $this->frontend1Booked) {
                $valueInsrtArr['is_active'] = "is_active = '$isActive'";
            }
            if (($this->fromType == 'team' || $this->fromType == 'workgroup') && $tablename != 'fg_rm_function') {
                $valueInsrtArr['visible_for_all'] = "visible_for_all = '$visibleForAll'";
            }
            $valueInsrtArr[] = "sort_order = '$sortOrder'";
            if ($teamCatId != '') {
                $valueInsrtArr['team_category_id'] = "team_category_id = '$teamCatId'";
            }
            if ($tablename == 'fg_rm_function') {
                $valueInsrtArr[] = "is_required_assignment = '$requiredAssignment'";
            }
            if ($tablename == 'fg_rm_role' && ($mainDesc != 'NULL' && $mainDesc != '')) {
                $valueInsrtArr['description'] = "description = '$mainDesc'";
            }
            if ($this->fromType == 'filterrole' && $filterId) {
                //for filter roles
                $valueInsrtArr[] = "filter_id = '$filterId'";
                $valueInsrtArr[] = "filter_updated = now()";
            }
            $insertedId = $this->insertRoleFnData($clubId, $tablename, $insertQryStri18n, $dummyId, $valueInsrtArr);
            if ($tablename == 'fg_rm_function') {
                $this->insertLogEntry = str_replace("'##DUMMYROLEID##'", 'NULL', $this->insertLogEntry);
            }
            if ($this->fromType == 'filterrole') {
                $execeptionsArray[] = $newDataArr['execeptions'];
                $returnArray = $this->_em->getRepository('CommonUtilityBundle:FgRmRoleManualContacts')->saveFilterRoleExceptions($insertedId, $execeptionsArray[0], $clubId, $mainTitle);
                $newExcludedCnts = $returnArray['newExcludedCnts'];
                $delExcludedCnts = $returnArray['delExcludedCnts'];
            }
        }
        if ($roleFnFlag) {
            $result[$insertedId] = $newFnArray;
            $this->insertLogEntry = str_replace('##DUMMYROLEID##', $insertedId, $this->insertLogEntry);
        } else if ($tablename == 'fg_rm_function') {
            $result[$this->roleId] = array(0 => $insertedId);
            $this->insertLogEntry = str_replace('##DUMMYROLEID##', $this->roleId, $this->insertLogEntry);
        }
        if ($this->fromType == 'filterrole') {
            $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->updateFilterRoles($insertedId, $this->container, $this->contactId, $newExcludedCnts, $delExcludedCnts);
        }
        //Setting up bookmark array for multiple insert.
        if ($roleBookamarkFlag && $insertedId) {
            $this->bookmarkArr[] = $insertedId;
        }

        return $result;
    }

    /**
     * Function used to update the query with table names
     *
     * @param Integer $clubId           club id
     * @param String  $tablename        name of the table to be updated
     * @param String  $insertQryStri18n table entry
     * @param Integer $dummyId          dummy id before inserting data to the log
     * @param Array   $valueArr         log entry value array
     *
     * @return $insertedId last inserted ID
     */
    public function insertRoleFnData($clubId, $tablename, $insertQryStri18n, $dummyId, $valueArr) {
        //INSERT INTO TABLE (fg_membership_category) AREA STARTS HERE.
        $isFederation = 0;
        if ($this->fromType == 'executiveboard') {
            $isFederation = 1;
        }
        if ($clubId) {
            if ($tablename == 'fg_rm_role') {
                $valueArr[] = "club_id = '$clubId'";
                $valueArr[] = ($this->fromType == 'role' || $this->fromType == 'filterrole' ) ? "type = 'G'" : (($this->fromType == 'team') ? "type = 'T'" : "type = 'W'");
            }
            if ($tablename == 'fg_rm_function') {
                $valueArr[] = "is_federation = '$isFederation'";
            }
            $insertQryStr = "INSERT INTO $tablename SET " . implode(',', $valueArr) . ";";
            $conn = $this->getEntityManager()->getConnection();
            $conn->executeQuery($insertQryStr);
            $insertedId = $conn->lastInsertId();
            if ($insertQryStri18n != '') {
                $insertQryWithId = str_replace($dummyId, $insertedId, $insertQryStri18n);
                $conn->executeQuery($insertQryWithId);
            }
            $conn->close();
            $valueLogArr['title'] = substr(str_replace("title = ", "", $valueArr['title']), 1, -1); //rtrim(str_replace("title = '", "", $valueArr['title']), "'");
            if (array_key_exists("description", $valueArr)) {
                $valueLogArr['description'] = substr(str_replace("description = ", "", $valueArr['description']), 1, -1);
            }
            if (array_key_exists("team_category_id", $valueArr)) {
                $valueLogArr['team_category_id'] = substr(str_replace("team_category_id = ", "", $valueArr['team_category_id']), 1, -1);
            }
            if (array_key_exists("is_active", $valueArr)) {
                $valueLogArr['is_active'] = substr(str_replace("is_active = ", "", $valueArr['is_active']), 1, -1);
            }
            if (array_key_exists("visible_for_all", $valueArr)) {
                $valueLogArr['visible_for_all'] = substr(str_replace("visible_for_all = ", "", $valueArr['visible_for_all']), 1, -1);
            }
            $this->insertLogEntries($tablename, $insertedId, $valueLogArr, true, $this->clubDefaultLang, $clubId);
            if ($tablename == 'fg_rm_function' && $this->functionAssign == 'same') {
                $roleIds = $this->_em->getRepository('CommonUtilityBundle:FgRmRole')->getRoleIds($this->roleCategoryId);
                if (count($roleIds) > 0) {
                    foreach ($roleIds as $key => $roleId) {
                        if ($roleId && $insertedId) {
                            $this->newRoleFunctionQuery .= "INSERT INTO fg_rm_role_function VALUES (NULL, $insertedId, $roleId);";
                        }
                    }
                }
            }
            if ($tablename == 'fg_rm_role' && $this->functionAssign == 'same') {
                $roleFnIds = $this->_em->getRepository('CommonUtilityBundle:FgRmFunction')->getFunctionIds($this->roleCategoryId);
                if (count($roleFnIds) > 0) {
                    foreach ($roleFnIds as $key => $fnId) {
                        if ($fnId && $insertedId) {
                            $this->newRoleFunctionQuery .= "INSERT INTO fg_rm_role_function VALUES (NULL, $fnId, $insertedId);";
                        }
                    }
                }
            }
            $this->newRoleFunctionQuery;

            return $insertedId;
        }
    }

    /**
     * Function used to generate string for log entries
     *
     * @param String  $tablename     name of the table to be updated
     * @param Array   $insertedId    inserted id
     * @param Array   $valueAfterArr value after array
     * @param Boolean $insert        whether it is insert or update
     * @param String  $langkey       language name
     * @param Integer $clubId        current club id
     * @param Boolean $exe           wheather we have to execute the final query string or not
     * @param Integer $contactId     contact id
     * @param Integer $roleId        role id
     */
    public function insertLogEntries($tablename, $insertedId, $valueAfterArr, $insert = true, $langkey, $clubId, $exe = false, $contactId = '', $roleId = '') {
        $nowdate = strtotime(date('Y-m-d H:i:s'));
        $dateToday = date('Y-m-d H:i:s', $nowdate);
        $kind = 'data';
        $valueBefore = "''";
        $logTablename = $tablename . '_log';

        foreach ($valueAfterArr as $key => $value) {
            $valueArr = array();
            $valueAfter = "'$value'";
            $field = $key;
            if (($key == 'title') || ($key == 'description')) {
                if ($langkey != '') {
                    $field = ($key == 'title') ? 'Name (' . $langkey . ')' : $this->translationArr['Description'] . ' (' . $langkey . ')';
                } else {
                    $field = ($key == 'title') ? 'Name' : $this->translationArr['Description'];
                }
            } else if ($key == 'team_category_id') {
                $field = $this->translationArr['Category'];
                $valueAfter = "(SELECT `title` FROM `fg_team_category` WHERE `id`=$value)";
            } else if ($key == 'is_active' || $key == 'visible_for_all') {
                $field = ($key == 'visible_for_all' ) ? $this->translationArr['visibleForAll'] : $this->translationArr['isActiveField'];
                $translatedvalAfter = ($value == 1 ) ? $this->translationArr['isActiveYes'] : $this->translationArr['isActiveNo'];
                $valueAfter = "'$translatedvalAfter'";
            }
            if (!$insert) {
                if ($key == 'team_category_id') {
                    $valueBefore = "(SELECT `title` FROM `fg_team_category` WHERE `id`=(SELECT $key FROM $tablename WHERE id=$insertedId))";
                } else if ($key == 'is_active' || $key == 'visible_for_all') { //if the current value is active, value before will be inactive
                    $field = ($key == 'visible_for_all') ? $this->translationArr['visibleForAll'] : $this->translationArr['isActiveField'];
                    $translatedvalAfter = ($value == 1 ) ? $this->translationArr['isActiveNo'] : $this->translationArr['isActiveYes'];
                    $valueBefore = "'$translatedvalAfter'";
                } else {
                    $valueBefore = "(SELECT $key FROM $tablename WHERE id=$insertedId)";
                }
            }
            $contactId = $exe ? $contactId : $this->contactId;
            $valueArr[] = "date = '$dateToday'";
            $valueArr[] = "kind = '$kind'";
            $valueArr[] = "field = '$field'";
            $valueArr[] = "value_before = $valueBefore";
            $valueArr[] = "value_after = $valueAfter";
            $valueArr[] = "changed_by = '$contactId'";
            $valueArr[] = "club_id = '$clubId'";
            if ($tablename == 'fg_rm_role') {
                $valueArr[] = "role_id = '$insertedId'";
            } else if ($tablename == 'fg_rm_function') {
                $roleId = ($exe) ? $roleId : (($insert) ? '##DUMMYROLEID##' : ($this->functionAssign != 'same' ? $this->roleId : ''));
                if ($roleId) {
                    $valueArr[] = "role_id = '$roleId'";
                    $valueArr[] = "function_id = '$insertedId'";
                } else {
                    $valueArr[] = "function_id = '$insertedId'";
                }
            } else if ($tablename == 'fg_cm_membership') {
                //membership id is passed
                $valueArr[] = "membership_id = '$insertedId'";
            }
            if ($exe) {
                $logQuery = "INSERT INTO $logTablename SET " . implode(',', $valueArr) . ";";
                $this->addtotransaction($logQuery);
            } else {
                $this->insertLogEntry .= "INSERT INTO $logTablename SET " . implode(',', $valueArr) . ";";
            }
        }
    }

    /**
     * Function used to update the query with table names
     *
     * @param string  $tablename  name of the table to be updated
     * @param Integer $categoryId category id
     */
    public function updateQueryString($tablename, $categoryId) {
        if ($this->updateQryStr !== 'SET ') {
            $updateStr = rtrim($this->updateQryStr, ',');
            $catCond = ($tablename == 'fg_rm_category' || $tablename == 'fg_team_category') ? "" : " AND category_id = $this->roleCategoryId";
            $this->updateQry .= "UPDATE $tablename $updateStr WHERE id = $categoryId $catCond;";
            $this->updateQryStr = 'SET '; // Resetting the query string
        }
    }

    /**
     * Function used to prepare delete query from array
     *
     * @return prepared delete query from the delQryStr
     */
    public function delQryPrepare($clubId, $contactId) {
        $delArr = $this->delQryStr;
        $delString = $delRoleFnStr = '';
        $fnCount = array();
        $delFnCnt = 0;
        $where = $roleWhere = $fnwhere = '';
        if (count($delArr) > 0) {
            /* Get existing assignments of selected roles and functions - starts */
            $conn = $this->getEntityManager()->getConnection();
            $assignedRoleIds = array();
            $assignedFunctionIds = array();

            if (isset($delArr['fg_rm_role']) && count($delArr['fg_rm_role']) > 0 && $this->fromType != 'filterrole') {
                $delRoleIds = FgUtility::getSecuredData(implode(',', $delArr['fg_rm_role']), $conn);
                $roleAssignmentsQry = "SELECT GROUP_CONCAT(DISTINCT b.role_id) AS roleIds FROM `fg_rm_role_contact` a "
                        . "LEFT JOIN `fg_rm_category_role_function` b ON (a.fg_rm_crf_id = b.id) "
                        . "WHERE b.role_id IN ($delRoleIds)";

                $roleAssignments = $conn->fetchAll($roleAssignmentsQry);
                if ($roleAssignments[0]['roleIds'] != '') {
                    $assignedRoleIds = explode(',', $roleAssignments[0]['roleIds']);
                }
            }

            if (count($delArr['fg_rm_function']) > 0) {
                $delFunctionIds = FgUtility::getSecuredData(implode(',', $delArr['fg_rm_function']), $conn);

                $funAssignmentsQry = "SELECT GROUP_CONCAT(DISTINCT b.function_id) AS functionIds FROM `fg_rm_role_contact` a "
                        . "LEFT JOIN `fg_rm_category_role_function` b ON (a.fg_rm_crf_id = b.id) "
                        . "WHERE b.function_id IN ($delFunctionIds)";

                $functionAssignments = $conn->fetchAll($funAssignmentsQry);
                if ($functionAssignments[0]['functionIds'] != '') {
                    $assignedFunctionIds = explode(',', $functionAssignments[0]['functionIds']);
                }
            }
            /* Get existing assignments of selected roles and functions - ends */

            /* Handling server side validation for keeping atleast one function */
            if ($this->fromType != 'filterrole') {
                $conn = $this->getEntityManager()->getConnection();
                if ($this->fromType == 'executiveboard') {
                    $where = "f.is_federation = 1 AND role_id = $this->roleId;";
                    $exsql = "SELECT count(f.id) as cnt FROM fg_rm_function f LEFT JOIN fg_rm_role_function rf ON f.id = rf.function_id WHERE $where";
                } else {
                    $where = "f.category_id = $this->roleCategoryId AND is_active = 1;";
                    $exsql = "SELECT count(f.id) as cnt FROM fg_rm_function f WHERE $where";
                }
                $fnCount = $conn->executeQuery($exsql)->fetch();
                $conn->close();
                $delFnCnt = count($delArr['fg_rm_function']);
            }
            //Bug 10560:Team settings:It is possible to delete all team func (Commented: || $this->fromType != 'executiveboard').
            if ((isset($fnCount['cnt']) && $fnCount['cnt'] > $delFnCnt && $this->fromType != 'role') || ($this->fromType == 'role' && $fnCount['cnt'] >= $delFnCnt) || ($this->fromType == 'filterrole')) {
                //Commented for fixing issues TFS bug: 10561.
                ksort($delArr);
                $conn = $this->getEntityManager()->getConnection();
                foreach ($delArr as $deltable => $dataArr) {

                    // Existing assignment checking.
                    if ($deltable == 'fg_rm_role') {
                        $dataArr = array_diff($dataArr, $assignedRoleIds);
                    } else if ($deltable == 'fg_rm_function') {
                        $dataArr = array_diff($dataArr, $assignedFunctionIds);
                    }

                    if (count($dataArr) > 0) {
                        $delParm = FgUtility::getSecuredData(implode(',', $dataArr), $conn);
                        $clubId = intval($clubId);

                        if (($this->functionAssign == 'individual') && ($deltable == 'fg_rm_role')) {
                            $delString .= "DELETE a FROM `fg_rm_function` a
                                INNER JOIN fg_rm_category b ON a.category_id = b.id
                                WHERE a.id IN (SELECT `function_id` FROM `fg_rm_role_function` WHERE `role_id` IN ($delParm))
                                AND a.category_id = $this->roleCategoryId AND b.club_id = $clubId;";
                        }

                        if ($deltable == 'fg_rm_role') {
                            $query = "SELECT RC.contact_id FROM fg_rm_role R
                                        INNER JOIN fg_rm_category_role_function CRF ON CRF.role_id = R.id
                                        INNER JOIN fg_rm_role_contact RC ON RC.fg_rm_crf_id = CRF.id
                                        WHERE R.id IN ($delParm)
                                        UNION
                                        SELECT contact_id FROM fg_rm_role_manual_contacts 
                                        WHERE type = 'included' AND role_id IN ($delParm)";
                            $conn = $this->getEntityManager()->getConnection();
                            $stmt = $conn->executeQuery($query);
                            $toBeUpdatedContacts = $stmt->fetchAll(\PDO::FETCH_GROUP);
                            $updatedContacts = implode(',', array_keys($toBeUpdatedContacts));
                            if ($updatedContacts != '') {
                                $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->updateLastUpdated($updatedContacts, 'id');
                            }
                        }

                        $delString .= "DELETE a FROM $deltable a
                            INNER JOIN fg_rm_category b ON a.category_id = b.id
                            WHERE a.id IN ($delParm) AND a.category_id = $this->roleCategoryId
                            AND b.club_id = $clubId;";

                        $key = ($deltable == 'fg_rm_role') ? 'role' : 'function';
                        if (!is_array($this->deletedIds[$key]))
                            $this->deletedIds[$key] = array();
                        $this->deletedIds[$key] = array_merge($this->deletedIds[$key], explode(',', $delParm));
                    }
                }
            }

            //log entry userrights on delete workgroup/team
            $logArray = array();
            $nowdate = strtotime(date('Y-m-d H:i:s'));
            $dateToday = date('Y-m-d H:i:s', $nowdate);
            foreach ($dataArr as $key => $roleId) {
                $conn = $this->getEntityManager()->getConnection();
                $sql = "SELECT g.name,r.title,r.type,u.contact_id FROM sf_guard_user_team t LEFT JOIN sf_guard_group g ON g.id=t.group_id LEFT JOIN fg_rm_role r ON r.id=t.role_id LEFT JOIN sf_guard_user u ON t.user_id = u.id WHERE t.role_id = '" . $roleId . "'";
                $existingUserrights = $conn->fetchAll($sql);
                if (count($existingUserrights)) {
                    foreach ($existingUserrights as $key => $value) {
                        $groupName = $value['type'] . '-' . $value['name'] . " (" . $value['title'] . ")";
                        $logArray[] = "('" . $value['contact_id'] . "','" . $clubId . "','$dateToday', 'user rights','', '$groupName', '', '$contactId')";
                    }
                    $this->insertLogEntry .= "INSERT INTO fg_cm_change_log(contact_id, club_id, date, kind, field, value_before, value_after, changed_by) VALUES" . implode(',', $logArray) . ";";
                }
            }
        }
        $delFinalString = $delRoleFnStr . $delString;
        return $delFinalString;
    }

    /**
     * remove only foreign followers from role forum when foreign visibility is diabled
     * superadmin/fedadmin/group admin/forum admin/team members not removed - only foreign contacts
     * @param int $roleId
     * @param int $clubId
     */
    private function removeRoleForeignFollowersOnSwitch($roleId, $clubId) {

        $this->deleteFollowers .="DELETE f FROM fg_forum_followers f "
                . "WHERE f.club_id='$clubId' AND f.group_id='$roleId'"
                . "AND f.contact_id NOT IN ( "
                . "SELECT c.id as contact_id "
                . "FROM fg_rm_role r  "
                . "INNER JOIN fg_rm_category_role_function crf on crf.role_id = r.id  "
                . "INNER JOIN fg_rm_role_contact rc on crf.id = rc.fg_rm_crf_id "
                . "INNER JOIN fg_cm_contact c on c.id = rc.contact_id "
                . "WHERE r.id = '$roleId')"
                . "AND f.contact_id NOT IN ( "
                . "SELECT u.contact_id "
                . "FROM sf_guard_user_group ug "
                . "INNER join sf_guard_group g on g.id = ug.group_id  "
                . "INNER join sf_guard_user u on u.id = ug.user_id  "
                . "WHERE u.club_id = '$clubId' and "
                . "(g.module_type = 'all' || (g.module_type = 'forum' and g.type='role' ) ) )";
    }

    /**
     * Function for executing query string through transaction
     *
     * @param string $updateFullQry query for updation
     * @param string $delString     query for deleting data
     *
     * @return boolean true/false
     */
    public function addtotransaction($updateFullQry, $delString = '') {
        $rollback = false;
        if ($updateFullQry !== '' || $delString !== '') {
            $conn = $this->getEntityManager()->getConnection();
            try {
                $conn->beginTransaction();
                if ($updateFullQry !== '') {
                    $conn->executeQuery($updateFullQry);
                }
                $conn->commit();
            } catch (Exception $ex) {
                $conn->rollback();
                $rollback = true;
                echo "Failed: " . $ex->getMessage();
                throw $ex;
            }
            if ($delString != '' && !$rollback) {
                $stmt = $conn->executeQuery($delString);
            }
            $conn->close();

            return true;
        }
    }

    /**
     * Function to get All role in the sidebar for a perticular Club.
     *
     * @param Integer $clubId          Club Id
     * @param String  $clubType        Type of club
     * @param Integer $contactId       contact Id
     * @param Integer $isFedRole       Federation role or not
     * @param Integer $federationId    Federation Id
     * @param Integer $subFederationId Sub-Federation Id
     * @param String  $roleType        role type
     * @param String  $defaultLang     club default language
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getAllRole($clubId, $clubType, $contactId, $isFedRole, $federationId, $subFederationId, $roleType) {
        $roleClubId = $clubId;
        $selectFiled = '';
        $where = "rc.contactAssign = 'manual'";
        if ($roleType == 'fedrole' && $clubType != 'federation') {
            $catCount = "getClubCategoryCount(rc.id,$clubId) as categoryCount,";
            $roleClubId = $federationId;
        } else {
            $catCount = '';
        }
        if ($roleType == 'fedrole' && $clubType != 'federation') {
            $roleClubId = $federationId;
        } else if ($roleType == 'subfedrole' && $clubType != 'sub_federation') {
            $roleClubId = $subFederationId;
        } else if ($roleType == 'filterrole') {
            $where = "rc.contactAssign = 'filter-driven'";
        }
        // Configuring UDF
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $doctrineConfig->addCustomStringFunction('getClubCategoryCount', 'Common\UtilityBundle\Extensions\CategoryCount');

        $roleCategory = $this->createQueryBuilder('rc')
                ->select("rc.id  as roleCatId,
                        IDENTITY(rc.club) as clubId,
                        r.id  as roleId,
                        $catCount
                        getClubRoleCount(r.id, $clubId) as rolecount
                        ");

        $roleCategory->addSelect('(SELECT count(cf.id) FROM CommonUtilityBundle:FgRmFunction cf WHERE cf.category= rc.id AND cf.isActive = 1) fnCount')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'rc.id = r.category AND r.type =:roleType')
                ->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', 'bm.role = r.id AND bm.club=:clubId AND bm.contact =:contactId');


        $roleCategory->where("rc.club=:roleClubId");
        if ($isFedRole) {
            $roleCategory->andWhere('rc.isFedCategory = 1');
        } else {
            $roleCategory->andWhere('rc.isFedCategory = 0');
        }

        $roleCategory->andWhere('rc.isTeam = 0')
                ->andWhere('rc.isWorkgroup = 0')
                ->andwhere($where)
                ->orderBy('rc.sortOrder, r.sortOrder')
                ->setParameters(array('clubId' => $clubId, 'contactId' => $contactId, 'roleClubId' => $roleClubId, 'roleType' => 'G'));

        $dataResult = $roleCategory->getQuery()->getArrayResult();

        return $dataResult;
    }

    /**
     * Function to get category ids of a particular club.
     *
     * @param Integer $clubId      Club Id
     * @param String  $catType     Whether federation category or club category
     * @param boolean $checkActive Check whether to return active category or not
     * @param String  $type        Check whether to return active category or not
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getCategoryIds($clubId, $catType, $checkActive = false, $type = "manual") {
        $isFedCategory = ($catType == 'fed_cat') ? 1 : 0;
        $contactAssign = 'manual';
        if ($type == 'filterrole') {
            $contactAssign = 'filter-driven';
        }
        $roleCategory = $this->createQueryBuilder('c')
                ->select('c.id AS roleCatId')
                ->where('c.club=:clubId')
                ->andWhere('c.isTeam=0')
                ->andWhere('c.isWorkgroup=0')
                ->andWhere('c.contactAssign=:contactAssign');
        if ($catType != '') {
            $roleCategory->andWhere('c.isFedCategory=:fedCategory');
        }
        if ($checkActive) {
            $roleCategory = $roleCategory->andWhere("c.isActive = 1");
        }
        $roleCategory->groupBy('c.id')->orderBy('c.sortOrder');
        $roleCategory->setParameter('clubId', $clubId);
        $roleCategory->setParameter('contactAssign', $contactAssign);
        if ($catType != '') {
            $roleCategory->setParameter('fedCategory', $isFedCategory);
        }
        $dataResult = $roleCategory->getQuery()->getArrayResult();

        return $dataResult;
    }

    /**
     * Function to get All role in the sidebar for a perticular Club.
     *
     * @param Integer $clubId       Club Id
     * @param Integer $fedFlag      Is federation function or not
     * @param Integer $federationId Language
     * @param String  $clubtype     club type
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getWorkgroupCategories($clubId, $fedFlag, $federationId, $clubtype) {
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $doctrineConfig->addCustomStringFunction('getClubExecutiveFunctionCount', 'Common\UtilityBundle\Extensions\ExecutiveFunctionCount');
        $isWorkgroup = 1;
        $select = '';
        $clubidIn = array();
        if ($fedFlag == true) {
            $select = ",f.id as functionId,getClubExecutiveFunctionCount('','', f.id, $clubId,  r.isExecutiveBoard, '$clubtype') as fnCount";
            $clubidIn = "'$federationId','$clubId'";
        } else {
            $clubidIn = "'$clubId'";
        }
        $workgroup = $this->createQueryBuilder('c')
                ->select(" r.id AS roleId, getClubRoleCount(r.id, $clubId) as rolecount,c.id as roleCatId $select");
        $workgroup->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'c.id = r.category');

        if ($fedFlag == true) {
            $workgroup->innerJoin('CommonUtilityBundle:FgRmRoleFunction', 'rf', 'WITH', 'r.id = rf.role')
                    ->innerJoin('CommonUtilityBundle:FgRmFunction', 'f', 'WITH', 'f.id = rf.function AND f.isActive=1 AND f.isFederation=1');
        }
        $workgroup->Where("c.club IN ($clubidIn)")->andWhere('c.isWorkgroup=:isWorkgroup');
        if ($fedFlag == true) {
            $workgroup->andWhere('r.isExecutiveBoard=1');
        }
        $workgroup->andWhere("c.contactAssign = 'manual'");
        $workgroup->orderBy('r.sortOrder');
        if ($fedFlag == true) {
            $workgroup->addOrderBy('f.sortOrder');
        }
        $workgroup->setParameters(array('isWorkgroup' => $isWorkgroup));
        $result = $workgroup->getQuery()->getResult();

        return $result;
    }

    /**
     * Function to get All role in the sidebar for a perticular Club.
     *
     * @param Integer $clubId Club Id
     *
     * @return Array   $result result or as processed array based on the $exec parameter
     */
    public function getCatAndRoleId($clubId) {
        $isWorkgroup = 1;
        $workgroup = $this->createQueryBuilder('c')
                ->select("c.id as catId,r.id as roleId")
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'c.id = r.category')
                ->Where('c.club=:clubId')
                ->andWhere('c.isWorkgroup=:isWorkgroup')
                ->andWhere('r.isExecutiveBoard=1')
                ->andwhere("c.contactAssign = 'manual'")
                ->setParameters(array('clubId' => $clubId, 'isWorkgroup' => $isWorkgroup));

        $result = $workgroup->getQuery()->getResult();

        return $result[0];
    }

    /**
     * function to get the team and its details from its category
     *
     * @param Integer $clubId    the club id
     * @param Integer $catId     the team category id
     * @param Integer $contactId the contact id
     * @param Integer $teamCatId team category Id
     *
     * @return Array  $dataResult Data result as an array
     */
    public function getTeamDetailsofCategory($clubId, $catId, $contactId, $teamCatId, $clubType) {
        $date = date('Y-m-d H:i:s');
        $functonCount = $this->_em->getRepository('CommonUtilityBundle:FgRmFunction')->getSubQueryForFunctionCount('', '', $clubType, 0, $clubId);
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $doctrineConfig->addCustomStringFunction('getClubTeamFunctionCount', 'Common\UtilityBundle\Extensions\TeamFunctionCount');

        $roleCategory = $this->createQueryBuilder('rct')
                ->select("r.id as rl_id, r.title as rl_title,r.visibleForAll as rl_visibleForAll ,r.isActive as rl_isActive, getClubTeamFunctionCount($catId, r.id,'',$clubId) as roleCount, getClubTeamFunctionCount($catId, r.id , f.id, $clubId) as fnCount, getClubTeamFunctionCount($catId,'' , f.id, $clubId) as fnSumCount, r.sortOrder as rl_sortOrder,  r.description as rl_description,bm.id as rl_bookMarkId, ri18.titleLang as rl_titleLang, ri18.lang as rl_lang, ri18.descriptionLang as rl_descriptionLang, f.id as f_id, f.title as f_title, f.isVisible as f_visible, fi18.titleLang as f_titleLang, f.sortOrder as f_sortOrder, fi18.lang as f_lang")
                ->addSelect('(' . $functonCount->getDQL() . ') as total')
                ->addSelect("(SELECT count(dm.id) FROM CommonUtilityBundle:FgDmDocuments dm LEFT JOIN CommonUtilityBundle:FgDmAssigment ass WITH ass.document=dm.id
                              WHERE  dm.documentType = 'TEAM' AND (ass.role=r.id OR (dm.depositedWith='ALL' AND dm.club=$clubId))) docCount")
                ->addSelect("(SELECT count(bd.id) FROM CommonUtilityBundle:FgSmBookingDeposited bd
                              LEFT JOIN CommonUtilityBundle:FgSmBookings b WITH bd.booking = b.id
                              LEFT JOIN CommonUtilityBundle:FgSmServices s WITH b.service = s.id
                              WHERE  s.serviceType = 'team' AND bd.role=r.id AND s.club=$clubId AND (b.endDate IS NULL OR b.endDate > '$date' ))sponsorCount")
                ->addSelect('(SELECT count(mf.id) FROM CommonUtilityBundle:FgCmChangeToconfirmFunctions mf INNER JOIN CommonUtilityBundle:FgCmChangeToconfirm c WITH c.id = mf.toconfirm
							  WHERE mf.function = f.id AND c.confirmStatus <> :discarded) as functionRestriction')
                ->addSelect('(SELECT count(ff.id) FROM CommonUtilityBundle:FgForumFollowers ff WHERE ff.group = r.id and rct.club = ff.club) as forumCount')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'r.category = rct.id AND r.teamCategory=:categoryId')
                ->leftJoin('CommonUtilityBundle:FgRmRoleI18n', 'ri18', 'WITH', 'ri18.id = r.id')
                ->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', 'bm.role = r.id AND bm.club=:clubId AND bm.contact =:contactId')
                ->leftJoin('CommonUtilityBundle:FgRmFunction', 'f', 'WITH', 'f.category = rct.id')
                ->leftJoin('CommonUtilityBundle:FgRmFunctionI18n', 'fi18', 'WITH', 'fi18.id = f.id')
                ->leftJoin('CommonUtilityBundle:FgRmCategoryRoleFunction', 'rcr', 'WITH', 'rcr.function = f.id AND rcr.category=f.category AND rcr.role=r.id AND rcr.club=' . $clubId)
                ->where('rct.club=:clubId')
                ->andWhere('rct.id=:id')
                ->andWhere("rct.contactAssign = 'manual'")
                ->orderBy('r.sortOrder')
                ->setParameters(array('clubId' => $clubId, 'categoryId' => $catId, 'contactId' => $contactId, 'id' => $teamCatId, 'discarded' => 'DISCARDED'));

        $dataResult = $roleCategory->getQuery()->getArrayResult();

        return $dataResult;
    }

    /**
     * Function to get ids of workgroup category and executive board role for a given club
     *
     * @param Integer $clubId        Club id
     * @param Integer $clubCacheKey  Cachekey used for caching
     * @param Integer $cacheLifeTime Cache expiry time
     *
     * @return Array $resultArray Result array
     */
    public function getExecutiveBoardRoleCatIds($clubId, $clubCacheKey, $cacheLifeTime) {
        $cacheKey = str_replace('{{cache_area}}', 'executiveboardId', $clubCacheKey);
        $resultArray = $this->createQueryBuilder('c')
                ->select('c.id as catId, r.id AS roleId')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'r.category = c.id')
                ->where('c.club=:clubId')
                ->andWhere('r.isExecutiveBoard=1')
                ->andWhere("c.contactAssign = 'manual'")
                ->setParameters(array('clubId' => $clubId))
                ->getQuery()
                ->useResultCache(true, $cacheLifeTime, $cacheKey)
                ->getArrayResult();
        $resultDataArray = count($resultArray) ? $resultArray[0] : array();

        return $resultDataArray;
    }

    /**
     * Function to get ids of team for a given club
     *
     * @param int $clubId Club id
     * @param Integer $clubCacheKey  Cachekey used for caching
     * @param Integer $cacheLifeTime Cache expiry time
     *
     * @return array $resultArray Result array
     */
    public function getTeamCatIds($clubId, $clubCacheKey, $cacheLifeTime) {
        $cacheKey = str_replace('{{cache_area}}', 'teamId', $clubCacheKey);
        $resultArray = $this->createQueryBuilder('c')
                ->select('c.id as catId')
                ->where('c.club=:clubId')
                ->andWhere('c.isTeam=1')
                ->andWhere("c.contactAssign = 'manual'")
                ->setParameters(array('clubId' => $clubId))
                ->getQuery()
                ->useResultCache(true, $cacheLifeTime, $cacheKey)
                ->getArrayResult();
        $resultDataArray = count($resultArray) ? $resultArray[0] : array();

        return $resultDataArray;
    }

    /**
     * Function to get all RmCategories of a club
     *
     * @param Array  $clubArray   Club id
     * @param Object $conn        Connection params
     * @param String $defaultLang Club default language
     *
     * @return String $defaultLang club default language
     */
    public function getAllRoleCategories($clubArray, $conn, $defaultLang) {
        $clubId = $clubArray['clubId'];
        $federationId = $clubArray['federationId'];
        $subFederationId = $clubArray['subFederationId'];
        $isFedCategory = "";
        switch ($clubArray['clubType']) {
            case 'standard_club':
            case 'federation':
                $clubIds = "$clubId";
                $isFedCategory = "";
                break;
            case 'federation_club':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND rc.is_fed_category=1)|| ($clubId = rc.club_id)) ";
                break;
            case 'sub_federation':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND rc.is_fed_category=1)|| ($clubId = rc.club_id)) ";
                break;
            case 'sub_federation_club':
                $clubIds = "$clubId,$federationId,$subFederationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND rc.is_fed_category=1)|| ($clubId = rc.club_id)) ";
                break;
        }
        $resultArray = $conn->fetchAll("SELECT rc.id as rmCatId,IF(rci18n.title_lang IS NULL OR rci18n.title_lang='', rc.title, rci18n.title_lang) as rmCatTitle, rc.club_id as clubId,rc.function_assign,rc.is_fed_category
                                        FROM fg_rm_category rc
                                        LEFT JOIN fg_rm_category_i18n AS rci18n ON rci18n.id = rc.id AND rci18n.lang = '$defaultLang'
                                        WHERE rc.club_id IN($clubIds) AND rc.is_active=1 AND rc.is_team=0 AND rc.is_workgroup=0 $isFedCategory AND rc.contact_assign = 'manual'
                                        ORDER BY rc.sort_order");

        return $resultArray;
    }

    /**
     * Function to get all RmCategories of a club
     *
     * @param array  $clubArray club data
     * @param object $conn      connection parameter
     * @param int    $contactId contact id
     * @param int    $isData    were this request is from
     *
     * @return array $resultArray
     */
    public function getAllAssignedCategories($clubArray, $conn, $contactId, $isData = 0, $getFedAsgmnt = false, $communityProfileFlag = 0) {
        $fedSubFedContactId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($contactId);

        $fedContactId = $fedSubFedContactId['fedContactId'];
        if (empty($fedContactId))
            $fedContactId = 0;


        $subFedContactId = $fedSubFedContactId['subFedContactId'];
        if (empty($subFedContactId))
            $subFedContactId = 0;
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $clubId = $clubArray['clubId'];
        $federationId = $clubArray['federationId'];
        $subFederationId = $clubArray['subFederationId'];
        if ($isData) {
            $defaultLang = $clubArray['defSysLang'];
        } else {
            $defaultLang = $clubArray['defaultClubLang'];
        }
        $teamWorkgroupOnly = ($communityProfileFlag == 0) ? '' : ' AND (rc.is_team=1 OR rc.is_workgroup=1) AND r.is_active = 1';
        switch ($clubArray['clubType']) {
            case 'standard_club':
                $clubIds = "$clubId";
                $isFedCategory = "crc.contact_id=$contactId";
                $clubType = "'standard_club' AS clubType";
                break;
            case 'federation':
                $clubIds = "$clubId";
                if ($isData) {
                    $isFedCategory = "crc.contact_id=$contactId AND rc.club_id =$clubId AND  rc.is_fed_category=1 AND r.type = 'G' AND rc.is_team = 0 AND rc.is_workgroup = 0 AND r.is_executive_board = 0";
                } else {
                    $isFedCategory = "crc.contact_id=$contactId AND rc.club_id =$clubId AND ((r.is_executive_board=1 AND f.is_federation <> 1) OR (r.is_executive_board=0))";
                }
                $clubType = "'federation' AS clubType";
                break;
            case 'federation_club':
                $clubIds = "$clubId,$federationId";
                $fedAsgmntCond = $getFedAsgmnt ? " OR crf.club_id IN ($clubIds)" : "";
                $isFedCategory = "crc.contact_id in ($contactId,$fedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1) $fedAsgmntCond || (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                $clubType = "(CASE rc.club_id WHEN $federationId THEN 'federation' ELSE 'federation_club' END) AS clubType";
                break;
            case 'sub_federation':
                $clubIds = "$clubId,$federationId";
                $fedAsgmntCond = $getFedAsgmnt ? " OR crf.club_id IN ($clubIds)" : "";
                $isFedCategory = "crc.contact_id in ($contactId,$fedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1) $fedAsgmntCond || (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                $clubType = "(CASE rc.club_id WHEN $federationId THEN 'federation' ELSE 'sub_federation' END) AS clubType";
                break;
            case 'sub_federation_club':
                $clubIds = "$clubId,$federationId,$subFederationId";
                $fedAsgmntCond = $getFedAsgmnt ? " OR crf.club_id IN ($clubIds)" : "";
                $isFedCategory = "crc.contact_id in ($contactId,$fedContactId,$subFedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1) $fedAsgmntCond || (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                $clubType = "(CASE rc.club_id WHEN '$federationId' THEN 'federation' WHEN '$subFederationId' THEN 'sub_federation' WHEN '$clubId' THEN 'sub_federation_club' END) AS clubType";
                break;
        }
        $resultArray = $conn->fetchAll("
                                    SELECT
                                    rc.id as rmCatId,
                                    rc.club_id as catClubId,
                                    IF(ri18n.title_lang IS NULL OR ri18n.title_lang='', r.title, ri18n.title_lang) AS roleTitle,
                                    IF(fi18n.title_lang IS NULL OR fi18n.title_lang='', f.title, fi18n.title_lang) AS functionTitle,
                                    f.id as functionId,rc.contact_assign,
                                    rc.is_workgroup, $clubType,
                                    rc.is_team,
                                    rc.is_allowed_fedmember_subfed,
                                    rc.is_allowed_fedmember_club,
                                    rc.is_required_fedmember_subfed,
                                    rc.is_required_fedmember_club,
                                    rc.is_fed_category,
                                    rc.sort_order as catSortOrder,
                                    r.sort_order as roleSortOrder,
                                    f.sort_order as funSortOrder,
                                    tc.title as teamCate,
                                    tc.id as teamCatId,
                                    IF(rci18n.title_lang IS NULL OR rci18n.title_lang='', rc.title, rci18n.title_lang) AS catTitle,
                                    crf.club_id as clubId,
                                    getClubRoleCount(r.id, $clubId) as role_count,
                                    r.id as roleId,
                                    r.is_executive_board,
                                    r.is_active as isRoleActive,
                                    IF (r.team_category_id IS NULL, IF(rci18n.title_lang IS NULL OR rci18n.title_lang='', rc.title, rci18n.title_lang), IF(tci18n.title_lang IS NULL OR tci18n.title_lang='', tc.title, tci18n.title_lang)) as rmCatTitle
                                    FROM fg_rm_role_contact crc
                                    LEFT JOIN fg_rm_category_role_function crf ON crf.id=crc.fg_rm_crf_id
                                    LEFT JOIN fg_rm_category rc ON rc.id=crf.category_id AND rc.is_active=1
                                    LEFT JOIN fg_rm_category_i18n AS rci18n ON rci18n.id = rc.id AND rci18n.lang = '$defaultLang'
                                    LEFT JOIN fg_rm_role r ON r.id=crf.role_id
                                    LEFT JOIN fg_rm_role_i18n AS ri18n ON ri18n.id = r.id AND ri18n.lang = '$defaultLang'
                                    LEFT JOIN fg_team_category tc ON tc.id=r.team_category_id
                                    LEFT JOIN fg_team_category_i18n AS tci18n ON tci18n.id = tc.id AND tci18n.lang = '$defaultLang'
                                    LEFT JOIN fg_rm_function f ON f.id=crf.function_id AND f.is_active=1
                                    LEFT JOIN fg_rm_function_i18n AS fi18n ON fi18n.id = f.id AND fi18n.lang = '$defaultLang'
                                    WHERE $isFedCategory $teamWorkgroupOnly
                                    ORDER BY rc.sort_order,tc.sort_order,r.sort_order,f.sort_order"
        );
//1360AND rc.contact_assign = 'manual'
        return $resultArray;
    }

    /**
     * Function to get all RmCategories,Role and functions of a club
     *
     * @param object $conn        Connection
     * @param array  $clubArray   club data as array
     * @param int    $defaultLang club default language
     *
     * @return array $resultArray
     */
    public function getAllCategoryRoleFunctionAssignment($conn, $clubArray, $defaultLang) {
        $clubId = $clubArray['clubId'];
        $federationId = $clubArray['federationId'];
        $subFederationId = $clubArray['subFederationId'];
        switch ($clubArray['clubType']) {
            case 'standard_club':
                $clubIds = "$clubId";
                $isFedCategory = "";
                break;
            case 'federation':
                $clubIds = "$clubId";
                $isFedCategory = "";
                break;
            case 'federation_club':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND (rc.is_fed_category=1) AND (rc.is_allowed_fedmember_club=1))|| ($clubId = rc.club_id) || ($clubId <> rc.club_id AND (rc.is_fed_category=0) AND (rc.is_workgroup=1) AND (r.is_executive_board=1) AND (f.is_federation=1)) ) ";
                break;
            case 'sub_federation':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND (rc.is_fed_category=1) AND (rc.is_allowed_fedmember_subfed=1))|| ($clubId = rc.club_id) || ($clubId <> rc.club_id AND (rc.is_fed_category=0) AND (rc.is_workgroup=1)AND (r.is_executive_board=1) AND (f.is_federation=1))) ";
                break;
            case 'sub_federation_club':
                $clubIds = "$clubId,$federationId,$subFederationId";
                $isFedCategory = "AND (($clubId <> rc.club_id AND (rc.is_fed_category=1) AND (rc.is_allowed_fedmember_club=1))|| ($clubId = rc.club_id) || ($clubId <> rc.club_id AND (rc.is_fed_category=0) AND (rc.is_workgroup=1)AND (r.is_executive_board=1) AND (f.is_federation=1))) ";
                break;
        }
        $where = "WHERE (((rc.club_id IN ($clubIds) AND rc.is_active=1 AND rc.is_team=0) OR (rc.club_id IN ($clubId) AND rc.is_active=1 AND rc.is_team=1)) AND ((rc.function_assign!= 'none' AND rf.id IS NOT NULL) OR (rc.function_assign= 'none')) AND (rc.contact_assign= 'manual')) ";
        $langTitleSql = "IF(rci18n.title_lang IS NULL OR rci18n.title_lang='', rc.title, rci18n.title_lang) as catTitle, "
                . "IF(ri18n.title_lang IS NULL OR ri18n.title_lang='', r.title, ri18n.title_lang) AS roleTitle,"
                . "IF(fi18n.title_lang IS NULL OR fi18n.title_lang='', f.title, fi18n.title_lang) AS functionTitle,"
                . "IF(tci18n.title_lang IS NULL OR tci18n.title_lang='', tc.title, tci18n.title_lang) as teamCategoryTitle, ";
        $resultArray = $conn->fetchAll("SELECT rc.id as catId,
                                               r.id as roleId,
                                               concat('E',f.id) as functionId,
                                               tc.id as teamCatId,
                                               $langTitleSql
                                               f.is_federation as functionIsFederation,
                                               rc.is_team,rc.is_workgroup,
                                               rc.is_fed_category,
                                               rc.club_id,
                                               r.is_executive_board,
                                               rc.is_allowed_fedmember_subfed,
                                               rc.is_allowed_fedmember_club,
                                               rc.is_required_fedmember_subfed,
                                               rc.is_required_fedmember_club
                                      FROM fg_rm_category rc
                                      LEFT JOIN fg_rm_category_i18n AS rci18n ON rci18n.id = rc.id AND rci18n.lang = '$defaultLang'
                                      INNER JOIN fg_rm_role r ON r.category_id=rc.id
                                      LEFT JOIN fg_rm_role_i18n AS ri18n ON ri18n.id = r.id AND ri18n.lang = '$defaultLang'
                                      LEFT JOIN fg_team_category tc ON tc.id=r.team_category_id
                                      LEFT JOIN fg_team_category_i18n AS tci18n ON tci18n.id = tc.id AND tci18n.lang = '$defaultLang'
                                      LEFt JOIN fg_rm_role_function rf ON rf.role_id=r.id
                                      LEFT JOIN fg_rm_function f ON f.id=rf.function_id
                                      LEFT JOIN fg_rm_function_i18n AS fi18n ON fi18n.id = f.id AND fi18n.lang = '$defaultLang'
                                      $where $isFedCategory AND rc.contact_assign = 'manual'
                                      ORDER BY tc.sort_order ASC, rc.sort_order ASC, r.sort_order ASC, f.is_federation DESC ,f.sort_order ASC");

        return $resultArray;
    }

    /**
     * function to get the filter role details
     *
     * @param Integer $clubId    the club id
     * @param Integer $catId     the category id
     * @param Integer $contactId the contact id
     *
     * @return Array  $filterRoleSettings
     */
    public function getFilterRoleDetails($clubId, $catId, $contactId) {
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $conn = $this->getEntityManager()->getConnection();

        $datetimeFormat = FgSettings::getMysqlDateTimeFormat();

        $filterRoleSettings = $conn->fetchAll("SELECT r.id AS fr_id, r.title AS fr_title, r.is_active AS fr_isActive, r.sort_order AS fr_sortOrder, r.filter_id AS fr_filterId, "
                . " getClubRoleCount(r.id, $clubId) AS fr_count,"
                . "DATE_FORMAT(r.filter_updated, '$datetimeFormat') AS fr_filterUpdated,"
                . "ri18.title_lang AS fr_titleLang, ri18.lang AS fr_lang,"
                . "rf.filter_data AS fr_filterData, rf.is_broken AS fr_isBroken,"
                . " bm.id AS fr_bookMarkId ,"
//                . "(SELECT COUNT(DISTINCT(contact_id)) FROM fg_rm_role_manual_contacts WHERE role_id = r.id GROUP BY role_id)fr_exceptionsCount, "
                . "(SELECT GROUP_CONCAT(DISTINCT mc.contact_id) FROM fg_rm_role_manual_contacts mc LEFT JOIN fg_cm_contact cnt on cnt.id = mc.contact_id WHERE mc.role_id = r.id AND cnt.is_deleted = 0 AND cnt.is_permanent_delete = 0 AND mc.type = 'included') AS includedContacts, "
                . "(SELECT GROUP_CONCAT(DISTINCT mc.contact_id) FROM fg_rm_role_manual_contacts mc LEFT JOIN fg_cm_contact cnt on cnt.id = mc.contact_id WHERE mc.role_id = r.id AND cnt.is_deleted = 0 AND cnt.is_permanent_delete = 0 AND mc.type = 'excluded') AS excludedContacts "
                . "FROM fg_rm_category c "
                . "LEFT JOIN fg_rm_role r ON (r.category_id = c.id) "
                . "LEFT JOIN fg_rm_role_i18n ri18 ON (ri18.id = r.id) "
                . "LEFT JOIN fg_filter rf ON(rf.id = r.filter_id)"
                . "LEFT JOIN fg_cm_bookmarks bm ON(bm.role_id = r.id AND bm.club_id = $clubId AND bm.contact_id = $contactId)"
                . "WHERE c.club_id = $clubId AND c.id = $catId AND c.contact_assign = 'filter-driven' "
                . "ORDER BY r.sort_order ASC");

        return $filterRoleSettings;
    }

    /**
     * function to get all filter roles for sidebar listing
     *
     * @param Integer $clubId      the club id
     * @param Integer $contactId   the contact id
     * @param String  $defaultLang the default language
     *
     * @return Array  $dataResult  data result array
     */
    public function getFilterRolesForSidebar($clubId, $contactId, $defaultLang) {
        $roleClubId = $clubId;
        $translation = false;
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $where = "rc.contactAssign = 'filter-driven'";
        $roleCategory = $this->createQueryBuilder('rc')
                ->select("rc.id  as roleCatId,
                          IDENTITY(rc.club) as clubId,
                         r.id  as roleId,
                         getClubRoleCount(r.id, $clubId) as rolecount
                        ")
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'rc.id = r.category AND r.type =:roleType');
        $roleCategory->where("rc.club=:roleClubId")
                ->andWhere('rc.isActive = 1');
        $roleCategory->andWhere('rc.isTeam = 0')
                ->andWhere('rc.isWorkgroup = 0')
                ->andwhere($where)
                ->orderBy('rc.sortOrder, r.sortOrder')
                ->setParameters(array('roleClubId' => $roleClubId, 'roleType' => 'G'));

        $dataResult = $roleCategory->getQuery()->getArrayResult();

        return $dataResult;
    }

    /**
     * Function to Validate Category, Role and Function for Import Assignment.
     *
     * @param array  $catArr             Assignments array
     * @param object $clubService        Club service
     *
     * @return array $resultArray Array containing errors if any and needed data of selected categories.
     */
    public function validateImportAssignments($catArr, $clubService) {
        $conn = $this->getEntityManager()->getConnection();
        $catIdsArr = array_keys($catArr);
        $fedWrkgrpCatRoleIds = array();
        $teamDefaultRosterIds = array();

        // If federation-club, get workgroup id and role id of federation.
        if ($clubService->federationId > 0) {
            $fedWrkgrpCatRoleIds = $this->_em->getRepository('CommonUtilityBundle:FgRmCategory')->getExecutiveBoardRoleCatIds($clubService->federationId);
            $fedWrkgrpCatId = $fedWrkgrpCatRoleIds['catId'];
            $fedWrkgrpRoleId = $fedWrkgrpCatRoleIds['roleId'];
            if (in_array($fedWrkgrpCatId, $catIdsArr)) {
                $catIdsArr[] = $clubService->get('club_workgroup_id');
            }
        }

        // Remove Team Category Ids from Category array if Team Category selected.
        $hasTeamCat = false;
        foreach ($catIdsArr as $catIdVal) {
            if (strpos($catIdVal, 'team') !== false) {
                $hasTeamCat = true;
                unset($catIdsArr[array_search($catIdVal, $catIdsArr)]);
            }
        }

        // Add 'Club Team Category Id' to Category Array if Team Category is selected.
        if ($hasTeamCat) {
            $catIdsArr[] = $clubService->get('club_team_id');
//            // Get Team Rosters for adding assignments.
//            $teamRosters = $conn->fetchAll("SELECT a.`id` AS rosterId, a.`team_id` AS teamId FROM `fg_team_roster_category` a WHERE a.club_id=$clubService->clubId AND a.category_type='TEAM' AND a.`is_default`=1");
//            foreach ($teamRosters as $teamRoster) {
//                $teamDefaultRosterIds[$teamRoster['teamId']] = $teamRoster['rosterId'];
//            }
        }

        // Get details of roles and functions of selected categories.
        $catIds = FgUtility::getSecuredData(implode(',', $catIdsArr), $conn);
        $roleFunctionDetails = $conn->fetchAll("SELECT c.`id` AS category_id, c.`club_id` AS catClubId, c.`role_assign` AS roleAssign, c.`is_fed_category` AS isFedCategory, "
                . "GROUP_CONCAT(r.`id`) AS roleIds, GROUP_CONCAT(f.`id`) AS functionIds "
                . "FROM `fg_rm_category` c "
                . "LEFT JOIN `fg_rm_role` r ON (r.category_id = c.id) "
                . "LEFT JOIN `fg_rm_function` f ON (f.category_id = c.id) "
                . "WHERE c.id IN ($catIds) AND c.contact_assign = 'manual' "
                . "GROUP BY c.id");

        /* Generate arrays for getting the details of roles and functions of selected categories - starts */
        $catRoleFunctionDetails = array();
        $clubExecBoardFunctionIds = array();
        foreach ($roleFunctionDetails as $roleFunctionDetail) {
            $catId = $roleFunctionDetail['category_id'];
            if ($catId == $fedWrkgrpCatId) {
                $catId = $clubService->get('club_workgroup_id');
                $catRoleFunctionDetails[$catId]['club_id'] = $clubService->clubId;
                $catRoleFunctionDetails[$catId]['is_fed_category'] = 0;
            } else {
                $catRoleFunctionDetails[$catId]['club_id'] = $roleFunctionDetail['catClubId'];
                $catRoleFunctionDetails[$catId]['is_fed_category'] = $roleFunctionDetail['isFedCategory'];
            }
            $catRoleFunctionDetails[$catId]['role_assign'] = $roleFunctionDetail['roleAssign'];
            $roleIds = explode(',', $roleFunctionDetail['roleIds']);
            $functionIds = ($roleFunctionDetail['functionIds'] != '') ? explode(',', $roleFunctionDetail['functionIds']) : array();
            if (($catId == $clubService->get('club_workgroup_id')) && ($clubService->federationId > 0)) { //add club-executive-board functions also
                $roleIds[] = $clubService->get('club_executiveboard_id');
                $clubExecBoardFunctions = $this->_em->getRepository('CommonUtilityBundle:FgRmFunction')->getClubExecBoardFunctionIds($clubService->federationId, $conn, true);
                $clubExecBoardFunctionIds = array_keys($clubExecBoardFunctions);
                if ((count($functionIds) > 0) && (count($clubExecBoardFunctionIds) > 0)) {
                    $functionIds = array_merge($functionIds, $clubExecBoardFunctionIds);
                } else {
                    $functionIds = (count($functionIds) > 0) ? $functionIds : $clubExecBoardFunctionIds;
                }
            }
            $roles = isset($catRoleFunctionDetails[$catId]['roles']) ? array_merge($catRoleFunctionDetails[$catId]['roles'], array_unique($roleIds)) : array_unique($roleIds);
            $catRoleFunctionDetails[$catId]['roles'] = $roles;
            $functions = isset($catRoleFunctionDetails[$catId]['functions']) ? array_merge($catRoleFunctionDetails[$catId]['functions'], array_unique($functionIds)) : array_unique($functionIds);
            $catRoleFunctionDetails[$catId]['functions'] = $functions;
        }
        /* Generate arrays for getting the details of roles and functions of selected categories - ends */

        $hasError = false;
        $errorType = '';
        $errorArray = array();
        $asgmntDataArray = array();

        foreach ($catArr as $catId => $catArrDetail) {

            if (strpos($catId, 'team') !== false) {
                $catId = $clubService->get('club_team_id');
            } else if ($catId == $fedWrkgrpCatId) {
                $catId = $clubService->get('club_workgroup_id');
            }

            // Check whether the category is of current club.
            $invalidCategory = false;
            if ($catRoleFunctionDetails[$catId]['is_fed_category'] == '1') {
                if (!in_array($catRoleFunctionDetails[$catId]['club_id'], array($clubService->clubId, $clubService->federationId, $clubService->subFederationId))) {
                    $invalidCategory = true;
                }
            } else {
                if ($catRoleFunctionDetails[$catId]['club_id'] != $clubService->clubId) {
                    $invalidCategory = true;
                }
            }
            if ($invalidCategory) {
                $hasError = true;
                $errorType = 'NOT_VALID_CATEGORY';
                $errorArray[] = $catId;
                continue;
            } else {
                $roleAssign = $catRoleFunctionDetails[$catId]['role_assign'];

                if (isset($catArrDetail['role'])) {
                    $roleIdsToAssign = array_keys($catArrDetail['role']);

                    // If single-assignment category, check whether multiple assignments are there.
                    if (($roleAssign == 'single') && (count($roleIdsToAssign) > 1)) {
                        $hasError = true;
                        $errorType = 'NO_MULTI_ASSIGNMENT_POSSIBLE';
                        $errorArray[] = $catId;
                        continue;
                    } else {

                        foreach ($catArrDetail['role'] as $roleId => $roleArrDetail) {

                            if ($roleId == $fedWrkgrpRoleId) {
                                $roleId = $clubService->get('club_executiveboard_id');
                            }

                            // Check whether roles and functions of category are correct.
                            if (!in_array($roleId, $catRoleFunctionDetails[$catId]['roles'])) {
                                $hasError = true;
                                $errorType = 'NOT_VALID_ROLE';
                                $errorArray[] = $catId;
                                continue;
                            } else {
                                // If category have functions.
                                if (isset($roleArrDetail['function'])) {
                                    foreach ($roleArrDetail['function'] as $functionId => $functionArrDetail) {
                                        // Check whether function is valid.
                                        if (!in_array($functionId, $catRoleFunctionDetails[$catId]['functions'])) {
                                            $hasError = true;
                                            $errorType = 'NOT_VALID_FUNCTION';
                                            $errorArray[] = $catId;
                                            continue;
                                        } else {
                                            $asgmntDataArray[$catId]['role'][$roleId]['function'][$functionId]['is_fed_cat'] = $catRoleFunctionDetails[$catId]['is_fed_category'];
                                        }
                                    }
                                } else {
                                    // If category have no functions.
                                    $functionId = NULL;
                                    $asgmntDataArray[$catId]['role'][$roleId]['is_fed_cat'] = $catRoleFunctionDetails[$catId]['is_fed_category'];
                                }
                            }
                        }
                    }
                }
            }
        }
        $conn->close();
        $resultArray = array('errorType' => $errorType, 'errorArray' => $errorArray, 'fedWrkgrpCatRoleIds' => $fedWrkgrpCatRoleIds, 'teamDefaultRosterIds' => $teamDefaultRosterIds, 'asgmntDataArray' => $asgmntDataArray);

        return $resultArray;
    }

    /**
     * Function to get Assignments Count of a Contact.
     *
     * @param array   $clubArray Array containing details of Club
     * @param object  $conn      Connection Object
     * @param int     $contactId Contact Id
     * @param boolean $isData    From where this request is from
     *
     * @return array $resultArray Result Array of Assignments Count.
     */
    public function getAssignmentsCount($clubArray, $conn, $contactId, $isData = 0) {
        $fedSubFedContactId = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->getFederationContactId($contactId);
        $fedContactId = isset($fedSubFedContactId['fedContactId']) ? $fedSubFedContactId['fedContactId'] : 0;
        $subFedContactId = isset($fedSubFedContactId['subFedContactId']) ? $fedSubFedContactId['subFedContactId'] : 0;
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $clubId = $clubArray['clubId'];
        $federationId = $clubArray['federationId'];
        $subFederationId = $clubArray['subFederationId'];
        switch ($clubArray['clubType']) {
            case 'standard_club':
                $isFedCategory = "crc.contact_id=$contactId";
                break;
            case 'federation':
                $clubIds = "$clubId";
                if ($isData) {
                    $isFedCategory = "crc.contact_id=$contactId AND rc.club_id =$clubId AND  rc.is_fed_category=1 AND r.type = 'G' AND rc.is_team = 0 AND rc.is_workgroup = 0 AND r.is_executive_board = 0";
                } else {
                    $isFedCategory = "crc.contact_id=$contactId AND rc.club_id =$clubId AND ((r.is_executive_board=1 AND f.is_federation <> 1) OR (r.is_executive_board=0))";
                }
                break;
            case 'federation_club':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "crc.contact_id in ($contactId, $fedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1)|| (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                break;
            case 'sub_federation':
                $clubIds = "$clubId,$federationId";
                $isFedCategory = "crc.contact_id in ($contactId, $fedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1)|| (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                break;
            case 'sub_federation_club':
                $clubIds = "$clubId,$federationId,$subFederationId";
                $isFedCategory = "crc.contact_id in ($contactId, $fedContactId, $subFedContactId) AND (($clubId <> crf.club_id AND (rc.is_fed_category=1 OR f.is_federation=1) AND r.is_executive_board <> 1)|| (CASE WHEN rc.is_fed_category=1 THEN (crf.club_id in ($clubIds)) ELSE crf.club_id=$clubId END)) ";
                break;
        }

        $resultArray = $conn->fetchAssoc("SELECT COUNT(rc.id) as asgmntCount
                        FROM fg_rm_role_contact crc
                        LEFT JOIN fg_rm_category_role_function crf ON crf.id=crc.fg_rm_crf_id
                        LEFT JOIN fg_rm_category rc ON rc.id=crf.category_id AND rc.is_active=1
                        LEFT JOIN fg_rm_role r ON r.id=crf.role_id
                        LEFT JOIN fg_rm_function f ON f.id=crf.function_id AND f.is_active=1
                        WHERE $isFedCategory ");
//AND rc.contact_assign = 'manual'
        return $resultArray;
    }

    /**
     * Function to create a subquery for function count.
     * Can only be used inside a main query like mysql function
     *
     * @param int  $catId    Category Id
     * @param int  $roleId   Role Id
     * @param int  $clubType Type of the logged current club
     *
     * @return array $functonCount Returns the subquery
     */
    public function getSubQueryForFnCount($catId, $roleId, $clubType, $clubId) {
        $functonCount = $this->getEntityManager()->createQueryBuilder();
        $functonCount->select('COUNT(DISTINCT rc.contact) as cntCnt')
                ->from('CommonUtilityBundle:FgRmRoleContact', 'rc')
                ->leftJoin('CommonUtilityBundle:FgRmCategoryRoleFunction', 'crf', 'WITH', 'crf.id = rc.fgRmCrf')
                ->leftJoin('CommonUtilityBundle:FgCmContact', 'cc', 'WITH', 'rc.contact = cc.id')
                ->where("crf.function = f.id");
        if ($catId) {
            $functonCount->andWhere("crf.category =:categoryId");
        }
        if ($roleId) {
            $functonCount->andWhere("crf.role = r.id");
        }
        $conn = $this->getEntityManager()->getConnection();
        $subLevelClubIds = $conn->fetchAll("SELECT c.id FROM (SELECT  sublevelClubs(id) AS id, @level AS level FROM (SELECT  @start_with := $clubId,@id := @start_with,@level := 0) vars, fg_club WHERE @id IS NOT NULL)ho JOIN fg_club c ON c.id = ho.id");
        $clubIds = FgUtility::getArrayFlatten($subLevelClubIds);
        $functonCount->andWhere($functonCount->expr()->orX(
                        $functonCount->expr()->in('cc.club', $clubIds), $functonCount->expr()->eq('cc.club', ':clubId')));

        return $functonCount;
    }

    /**
     * Function to get the fedmember active contacts ids of a club/federation
     *
     * @param type $clubType        clubtype
     * @param type $clubId          clubId
     * @param int  $federationId    federationId
     * @return int count
     */
    public function getSubQueryForFedMemberCount($clubType, $clubId, $federationId) {
        $federationId = ($clubType == 'federation') ? $clubId : $federationId;
        $fedCount = $this->getEntityManager()->createQueryBuilder();
        $fedCount->select('COUNT(DISTINCT c.id)')
                ->from('CommonUtilityBundle:FgCmContact', 'c')
                ->innerJoin('CommonUtilityBundle:FgCmMembership', 'm', 'WITH', 'm.id=c.fedMembershipCat AND m.club=' . $federationId)
                ->innerJoin('CommonUtilityBundle:MasterSystem', 'ms', 'WITH', 'c.fedContact=ms.fedContact')
                ->where('c.isDeleted=0')
                ->andWhere('c.isDraft=0')
                ->andWhere('c.isPermanentDelete=0');
        if ($clubType === 'federation') {
            $clubIds = $this->_em->getRepository('CommonUtilityBundle:FgRmFunction')->getSubLevelClubIds($executiveboard = 0, $clubId);
            $fedCount->andWhere($fedCount->expr()->orX($fedCount->expr()->in('c.club', $clubIds), $fedCount->expr()->eq('c.club', ':clubId')));
        } else {
            $fedCount->andWhere('c.club=:clubId');
        }
        return $fedCount;
    }

    /**
     * get the federation categories
     * @param string $clubType
     * @param int $federationId
     * @param int $subFederationId
     * @param string $roleTypes
     * @return array
     */
    public function getFedCat($clubType, $federationId, $subFederationId, $roleTypes) {
        $data = array();
        foreach ($roleTypes as $key => $roleType) {
            $where = "rc.contactAssign = 'manual'";

            if ($roleType == 'fedrole' && $clubType != 'federation') {
                $roleClubId = $federationId;
            } else if ($roleType == 'subfedrole' && $clubType != 'sub_federation') {
                $roleClubId = $subFederationId;
            }
            $roleCategory = $this->createQueryBuilder('rc')
                    ->select("rc.id  as roleCatId, rc.isRequiredFedmemberSubfed,rc.isRequiredFedmemberClub");

            $roleCategory->innerJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'r.category=rc.id');

            $roleCategory->where("rc.club=:roleClubId")
                    ->andWhere('rc.isActive = 1')
                    ->andWhere('rc.isFedCategory = 1')
                    ->andWhere('rc.isTeam = 0')
                    ->andWhere('rc.isWorkgroup = 0')
                    ->andwhere($where)
                    ->setParameters(array('roleClubId' => $roleClubId));

            $dataResult = $roleCategory->getQuery()->getArrayResult();
            array_push($data, $dataResult);
        }
        return $data;
    }

    /**
     * get count of missing req fed role assgment of particular user
     * @param type $contact contact id
     * @return  int count of missing assgmnt
     */
    public function missingReqFedAssign($contact, $clubId, $federationId, $subFederationId, $clubType, $clubDefaultLang, $conn, $type = 'contactgeneral') {
        //check if fed member
        $federationMember = $this->_em->getRepository('CommonUtilityBundle:FgCmContact')->checkFederationMember($contact);

        if ($federationMember['isFedCategory'] != '') {
            $i = 0;
            $roleType = array();
            $cat = array();
            if ($clubType == 'sub_federation' || $clubType == 'federation_club' || $clubType == 'sub_federation_club') {
                array_push($roleType, 'fedrole');
            }
            if ($clubType == 'sub_federation_club') {
                array_push($roleType, 'subfedrole');
            }
            $reqFedCats = $this->_em->getRepository('CommonUtilityBundle:FgRmCategory')->getFedCat($clubType, $federationId, $subFederationId, $roleType);
            foreach ($reqFedCats as $key => $reqFedCat) {
                foreach ($reqFedCat as $key => $reqFedCatt) {
                    if ($reqFedCatt['isRequiredFedmemberClub'] == 1 && ($clubType == 'federation_club' || $clubType == 'sub_federation_club')) {
                        if (!in_array($reqFedCatt['roleCatId'], $cat)) {
                            $cat[$i] = $reqFedCatt['roleCatId'];
                            $i++;
                        }
                    } else if ($reqFedCatt['isRequiredFedmemberSubfed'] == 1 && ($clubType == 'sub_federation')) {
                        if (!in_array($reqFedCatt['roleCatId'], $cat)) {
                            $cat[$i] = $reqFedCatt['roleCatId'];
                            $i++;
                        }
                    }
                }
            }

            $clubIdArray = array('clubId' => $clubId, 'federationId' => $federationId, 'subFederationId' => $subFederationId, 'clubType' => $clubType, 'defaultClubLang' => $clubDefaultLang);
            $getAllAssignedCategories = $this->_em->getRepository('CommonUtilityBundle:FgRmCategory')->getAllAssignedCategories($clubIdArray, $conn, $contact);
            $reqAssignedFedCat = array();
            foreach ($getAllAssignedCategories as $key => $value) {
                if (($clubType == 'sub_federation') && $value['is_required_fedmember_subfed'] == 1) {
                    array_push($reqAssignedFedCat, $value['rmCatId']);
                }
                if (($clubType == 'sub_federation_club' || $clubType == 'federation_club') && $value['is_required_fedmember_club'] == 1) {
                    array_push($reqAssignedFedCat, $value['rmCatId']);
                }
            }
        } else {
            $cat = array();
            $reqAssignedFedCat = array();
        }

        $diff = array_diff($cat, $reqAssignedFedCat);

        if ($type == 'contactgeneral') {
            return count($diff);
        } else {
            foreach ($diff as $val) {
                $diffArray[] = $val;
            }
            return $diffArray;
        }
    }

    /**
     * Function to get All role in the sidebar for a perticular Club.
     *
     * @param Integer $clubId          Club Id
     * @param String  $clubType        Type of club
     * @param Integer $contactId       contact Id
     * @param Integer $isFedRole       Federation role or not
     * @param Integer $federationId    Federation Id
     * @param Integer $subFederationId Sub-Federation Id
     * @param String  $roleType        role type
     * @param String  $defaultLang     club default language
     *
     * @return query result or as processed array based on the $exec parameter
     */
    public function getMissingassignmentsDetails($clubId, $clubType, $contactId, $isFedRole, $federationId, $subFederationId, $defaultLang) {
        $roleClubId = $clubId;
        $selectFiled = '';
        $where = "rc.contactAssign = 'manual'";
        $roleType = 'fedrole,subfedrole';
        $roleClubId = "$federationId,$subFederationId";
        $catCount = "getClubCategoryCount(rc.id,$clubId) as categoryCount,";
        $fedCount = $this->getSubQueryForFedMemberCount($clubType, $clubId, $federationId)->getDQL();
        // Configuring UDF
        $doctrineConfig = $this->getEntityManager()->getConfiguration();
        $doctrineConfig->addCustomStringFunction('getClubRoleCount', 'Common\UtilityBundle\Extensions\RoleCount');
        $doctrineConfig->addCustomStringFunction('getClubCategoryCount', 'Common\UtilityBundle\Extensions\CategoryCount');

        $roleCategory = $this->createQueryBuilder('rc')
                ->select("rc.id  as roleCatId,
                        rc.title as categoryTitle,
                        IDENTITY(rc.club) as clubId,
                        rc.isFedCategory as isFedCategory,
                        r.id  as roleId,
                        getClubRoleCount(r.id, $clubId) as rolecount,
                        $catCount
                        r.type as roleType,
                        rc.sortOrder as catSortOrder,rc.isRequiredFedmemberSubfed,rc.isRequiredFedmemberClub,
                        bm.id as bookmarkid");

        $roleCategory->addSelect('(' . $fedCount . ') as fedCount');
        $roleCategory->addSelect('(SELECT count(cf.id) FROM CommonUtilityBundle:FgRmFunction cf WHERE cf.category= rc.id AND cf.isActive = 1) fnCount')
                ->leftJoin('CommonUtilityBundle:FgRmRole', 'r', 'WITH', 'rc.id = r.category AND r.type =:roleType')
                ->leftJoin('CommonUtilityBundle:FgCmBookmarks', 'bm', 'WITH', 'bm.role = r.id AND bm.club=:clubId AND bm.contact =:contactId');

        $roleCategory->where("rc.club IN ($roleClubId)")
                ->andWhere('rc.isActive = 1');
        if ($isFedRole) {
            $roleCategory->andWhere('rc.isFedCategory = 1');
        } else {
            $roleCategory->andWhere('rc.isFedCategory = 0');
        }
        $roleCategory->andWhere('rc.isTeam = 0')
                ->andWhere('rc.isWorkgroup = 0')
                ->andwhere($where)
                ->orderBy('rc.sortOrder, r.sortOrder')
                ->setParameters(array('clubId' => $clubId, 'contactId' => $contactId, 'roleType' => 'G'));

        $dataResult = $roleCategory->getQuery()->getArrayResult();
        $resultArray = array();
        $resultCatArray = array();
        foreach ($dataResult as $val) {
            if (!in_array($val['roleCatId'], $resultCatArray) && (($clubType == 'sub_federation' && $val['isRequiredFedmemberSubfed'] == 1) || ($clubType == 'sub_federation_club' && $val['isRequiredFedmemberClub'] == 1) || ($clubType == 'federation_club' && $val['isRequiredFedmemberClub'] == 1))) {
                $resultCatArray[] = $val['roleCatId'];
                if (($val['fedCount'] - $val['categoryCount']) > 0) {
                    $resultArray[$val['roleCatId']] = $val;
                    $resultArray[$val['roleCatId']]['missingCount'] = $val['fedCount'] - $val['categoryCount'];
                }
            }
        }

        return $resultArray;
    }

    /**
     * Method to get color codes for team and workgroup for a particular club
     *
     * @param array $catIds  array containing team and workgroup id
     *
     * @return array
     */
    public function getCategoryColorCodes($catIds) {
        $category = $this->createQueryBuilder('c')
                ->select('c.id as catId, c.calendarColorCode as colorCode')
                ->where('c.id IN (:ids)')
                ->setParameter('ids', $catIds);

        $dataResult = $category->getQuery()->getResult();
        $finalResult = array();
        foreach ($dataResult as $key => $value) {
            $finalResult[$value['catId']] = $value;
        }

        return $finalResult;
    }

    /**
     * Function to check whether the categories contains federation and/or subfederation categories
     *
     * @param String $catIds
     *
     * @return array
     */
    public function checkFederationCategory($catIds) {
        $category = $this->createQueryBuilder("frc")
                ->select("c.id as clubId, frc.id as catId, c.clubType, frc.isWorkgroup")
                ->leftJoin("frc.club", "c")
                ->where("frc.id IN (:catIds)")
                ->andWhere("c.clubType IN ('federation','sub_federation')")
                ->setParameter("catIds", explode(",", $catIds));

        $dataResult = $category->getQuery()->getResult();

        $resultArray = array();
        // if the category is workgroup category, it will noit come under federation or sub federation categories
        foreach ($dataResult as $val) {
            if ($val['clubType'] == 'federation' && $val['isWorkgroup'] != 1) {
                $resultArray['federation'][$val['catId']] = $val;
            } else if ($val['clubType'] == 'sub_federation' && $val['isWorkgroup'] != 1) {
                $resultArray['sub_federation'][$val['catId']] = $val;
            }
        }

        return $resultArray;
    }

    /**
     * Function to update main table title
     * @param string $tablename
     */
    private function updateDefaultTable($tablename) {
        $where = "A.category_id = $this->roleCategoryId";
        $fieldArray = array('mainTable' => $tablename, 'i18nTable' => $tablename . '_i18n', 'mainField' => array('title'), 'i18nFields' => array('title_lang'));
        if ($tablename == 'fg_team_category' || $tablename == 'fg_rm_category') {
            $where = "A.id = $this->roleCategoryId";
        } elseif ($tablename == 'fg_rm_role') {
            $fieldArray['mainField'][] = 'description';
            $fieldArray['i18nFields'][] = 'description_lang';
        }
        $query = FgUtility::updateDefaultTable($this->clubDefaultLang, $fieldArray, $where);

        return $query;
    }

}
