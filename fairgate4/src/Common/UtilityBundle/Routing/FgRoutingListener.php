<?php

/**
 * FgRoutingListener.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     PIT Solutions <pitsolutions.ch>
 *
 * @version    Fairgate V4
 */
namespace Common\UtilityBundle\Routing;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Common\UtilityBundle\Util\FgSettings;
use Common\UtilityBundle\Util\FgUtility;
use Website\CMSBundle\Util\FgCmsTheme;
use Common\UtilityBundle\Repository\Pdo\CmsPdo;

/**
 * Catch club identifier from the request and set club details in the request context.
 *
 * @author PITSolutions <pitsolutions.ch>
 */
class FgRoutingListener
{

    /**
     * Service Container.
     *
     * @var Obeject
     */
    protected $container;

    /**
     * Parameter Array.
     *
     * @var Array
     */
    public $parameters = array();

    /**
     * Club Id.
     *
     * @var Integer
     */
    public $clubId = 0;

    /**
     * Club Identifier.
     *
     * @var String
     */
    public $clubUrlIdentifier = '';

    /**
     * Federation Id.
     *
     * @var Integer
     */
    public $federationId = 0;

    /**
     * Sub Federation Id.
     *
     * @var Integer
     */
    public $subFederationId = 0;

    /**
     * Module name(eg : 'contact' for Contact Module, 'club' for Club module.
     *
     * @var String
     */
    private $module = '';

    /**
     * To get session.
     *
     * @var Object
     */
    private $session;

    /**
     * To identify whether this obeject is called from cron.
     *
     * @var Boolean
     */
    private $isCron = false;

    /**
     * To identify whether this obeject is called from cron.
     *
     * @var Boolean
     */
    private $responseEvent = false;

    /**
     * Access map object.
     *
     * @var Object
     */
    protected $accessMap;

    /**
     * To identify whether the page is website or not.
     *
     * @var Boolean
     */
    protected $websiteFrontend = false;

    /**
     * Variable to identify url is a club domain or not
     *
     * @var boolean
     */
    private $clubDomainFlag = false;

    /**
     * Variable to identify main domain or not
     *
     * @var boolean
     */
    public $isMainDomain = false;

    /**
     * Constructor
     *
     * @param object  $container ContainerInterface object
     * @param object  $accessMap Access map object.
     * @param int     $clubId    clubId
     * @param boolean $isCron    isCron
     */
    public function __construct(ContainerInterface $container, $accessMap, $clubId = 0, $isCron = false)
    {
        $this->container = $container;
        $this->session = $this->container->get('session');
        $this->clubId = $clubId;
        $this->isCron = $isCron;
        $this->initClubParamaters();
        $this->accessMap = $accessMap;
        if ($this->isCron) {
            $this->setClubDetails(null);
        }
    }

    public function onKernelRequest(GetResponseEvent $event)
    {
        $this->responseEvent = $event;
        $request = $event->getRequest();
        $baseUrl = $request->getUri();
        $requestUri = $request->getRequestUri();
        $env = $this->container->getParameter("kernel.environment");

        $clubDetails = $this->setDomainDetails($request, $env);       
        $splitRequestUri = explode('/', $requestUri);              
        if (strpos($requestUri, '/api/') > -1 || strpos($requestUri, '/register') === 0) {
            return true;
        }
        if ($splitRequestUri[1] == 'uploads') {
            $this->clubId = $splitRequestUri[2];
            $this->clubUrlIdentifier = '';
            $this->setClubDetails($event);
            $this->clubUrlIdentifier = 'article_images/';
        }

        $splitUrl = strpos($requestUri, '/backend') > -1 ? '/backend' : (strpos($requestUri, '/internal') > -1 ? '/internal' : (strpos($requestUri, '/public') > -1 ? '/public' : (strpos($requestUri, '/files') > -1 ? '/files' : (strpos($requestUri, '/help') > -1 ? '/help' : '/'))));
        $urlSplit = explode($splitUrl, $requestUri);
        $urlPattern = isset($urlSplit[1]) ? trim($urlSplit[1], '/') : '';
        $identifierData = $splitUrl == '/' ? $urlSplit[1] : $urlSplit[0];
        if ($this->clubDomainFlag) {
            $this->clubUrlIdentifier = $clubDetails['urlIdentifier'];
        } else {
            $this->clubUrlIdentifier = trim(str_replace('/app_dev.php/', '', $identifierData), '/');
        }

        //Set current sprint value
        $this->parameters['currentSprint'] = $this->container->getParameter('currentSprint');
        $this->parameters['clubUrlIdentifier'] = $this->clubUrlIdentifier;
        /* Return if there is no club identifier */
        if ($this->clubUrlIdentifier == '') {
            return true;
        }

        $appDetails = $this->setApplicationArea($baseUrl, $env, $request);
        
        $applicationArea = $appDetails['applicationArea'];
        $isCmsFrontend = $appDetails['isCmsFrontend'];

        $this->parameters['applicationArea'] = $applicationArea;
        $this->parameters['isWebsiteFrontend'] = $isCmsFrontend;
        /* Set current module */
        if ($urlPattern != '') {
            $urlPatternArray = explode('/', $urlPattern);
            $this->module = $urlPatternArray[0];
        }
        FgUtility::$ROOT_PATH = $this->container->getParameter('kernel.root_dir');
        //To check uploaded path
        if ($splitRequestUri[1] != 'uploads') {
            $this->setClubDetails($event);            
        }
        $this->parameters['publicConfig'] = array();
        /* FAIR-2313 Frontend view layout */
        if ($applicationArea != 'internal' && $applicationArea != 'help' && $applicationArea != 'files' && $applicationArea != 'backend' && (current(explode('/', $this->parameters['applicationArea'])) != 'confirmClub')) {
            $conn = $this->container->get('database_connection');
            $cachingEnabled = $this->container->getParameter('caching_enabled');
            if ($this->session->get('themePreviewFlag') && strpos($requestUri, '/themepreview') > 0) {
                $this->parameters['publicConfig'] = $this->container->get('doctrine')->getManager()->getRepository('CommonUtilityBundle:FgTmThemeConfiguration')->getAllActiveThemeConfig($conn, $this->container, $this->clubId, $this->parameters['clubCacheKey'], $this->parameters['cacheLifeTime'], $cachingEnabled, $this->session->get('themePreviewConfigId'));
            } else {
                $this->parameters['publicConfig'] = $this->container->get('doctrine')->getManager()->getRepository('CommonUtilityBundle:FgTmThemeConfiguration')->getAllActiveThemeConfig($conn, $this->container, $this->clubId, $this->parameters['clubCacheKey'], $this->parameters['cacheLifeTime'], $cachingEnabled);
            }
            $this->checkThemeFiles($cachingEnabled);
        }

        if (strpos($requestUri, '/themepreview') > 0) {
            $this->session->set("themePreviewFlag", 1);
            if ($event->getRequest()->get('configId') != '') {
                $this->session->set("themePreviewConfigId", $event->getRequest()->get('configId'));
            }
        }

        $this->setSeoSettings();
    }

    /**
     * Set all details of the current club.
     */
    public function setClubDetails($event)
    {
        $entityManager = $this->container->get('doctrine')->getManager();
        $adminEntityManager = $this->container->get('fg.admin.connection')->getAdminManager();
        
        $context = $this->container->get('router')->getContext();
        $domainCacheKey = $this->container->getParameter('database_name');
        $cacheLifeTime = $this->container->getParameter('cache_lifetime');
        $cachingEnabled = $this->container->getParameter('caching_enabled');
        /* Check the club exists */
        
        $clubDetails = $adminEntityManager->getRepository('AdminUtilityBundle:FgClub')->getClubDetails($domainCacheKey, $cacheLifeTime, $cachingEnabled, $this->clubUrlIdentifier, $this->clubId);

        if ($clubDetails) {
            
            /******* Set the club settings data to the club array *******/
            $clubSettingDetails = $entityManager->getRepository('CommonUtilityBundle:FgClubSettings')->getClubSettings($domainCacheKey, $cacheLifeTime, $cachingEnabled, $clubDetails['urlIdentifier'], $clubDetails['id']);
            $clubDetails = array_merge($clubDetails, $clubSettingDetails);
            /***********************************************************/
            
            
            /******* Set the club logo data to the parameter array *******/
            if ($clubDetails['clubType'] == 'federation' || $clubDetails['clubType'] == 'sub_federation') {
                 $this->parameters['federation_icon'][$clubDetails['id']] = ($clubDetails['federationIcon']) ? '/uploads/' . $clubDetails['id'] . '/admin/federation_icon/' . $clubDetails['federationIcon'] : '/fgassets/global/img/fedicon.png';
            }
            /***********************************************************/

            $parentClubId = $clubDetails['parentClubId'];
            $this->setClubParameters($clubDetails);
            if ($parentClubId > 1) { //Not a federation club.
                $this->setFederationdetails($entityManager, $parentClubId, $domainCacheKey, $cacheLifeTime);
            } else if ($clubDetails['clubType'] != 'standard_club') { //If it is a federation, the club id and federation id will be same. Not needed for
                $this->parameters['federation_id'] = $this->clubId;
            }
            /* Set cache key for logged in club */
            $clubCacheKey = $this->setCacheKey($cacheLifeTime);
            /* Get all club languages */
            $localeResult = $entityManager->getRepository('CommonUtilityBundle:FgClubLanguageSettings')->getClubLanguages($this->clubId, $clubCacheKey, $cacheLifeTime, $cachingEnabled);
            if (count($localeResult)) {
                $clubLangArray = array();
                foreach ($localeResult as $key => $rowLocale) {
                    $clubLangArray[$rowLocale['correspondanceLang']]['title'] = trim($rowLocale['clubTitle']);
                    $clubLangArray[$rowLocale['correspondanceLang']]['signature'] = trim($rowLocale['clubSignature']);
                    $clubLangArray[$rowLocale['correspondanceLang']]['logo'] = trim($rowLocale['clubLogo']);
                    /* Set the Locale setting */
                    if ($key == 0) {
                        $this->setLocaleSettings($rowLocale);
                        $this->setClubLocale($event, $rowLocale['systemLang']);
                        $this->parameters['club_default_lang'] = $rowLocale['correspondanceLang'];
                    }
                    if (!in_array($rowLocale['correspondanceLang'], $this->parameters['club_languages'])) {
                        $this->parameters['club_languages'][] = $rowLocale['correspondanceLang'];
                        $this->parameters['club_languages_det'][$rowLocale['correspondanceLang']] = $rowLocale;
                    }
                }
                $this->parameters['club_details'] = $clubLangArray;
            }

            /* For getting the ids of workgroup category executive board role and team */

            $catRoleIds = $entityManager->getRepository('CommonUtilityBundle:FgRmCategory')->getExecutiveBoardRoleCatIds($this->clubId, $clubCacheKey, $cacheLifeTime);
            $this->parameters['club_executiveboard_id'] = isset($catRoleIds['roleId']) ? $catRoleIds['roleId'] : 0;
            $this->parameters['club_workgroup_id'] = isset($catRoleIds['catId']) ? $catRoleIds['catId'] : 0;
            $catTeamIds = $entityManager->getRepository('CommonUtilityBundle:FgRmCategory')->getTeamCatIds($this->clubId, $clubCacheKey, $cacheLifeTime);
            $this->parameters['club_team_id'] = isset($catTeamIds['catId']) ? $catTeamIds['catId'] : 0;
            if ($this->isCron) {
                $this->parameters['clubUrlIdentifier'] = $clubDetails['urlIdentifier'];
            }
            $this->setContactFields($entityManager);
            /* Set current module */
            $this->setModuleDetails();
        } else {
            /* When wrong clubname in the url */
            throw new NotFoundHttpException(sprintf('Club does not exist', $token));
        }
        /* Master table of current club */
        $this->parameters['clubTable'] = $this->getClubMasterTable();
        $this->parameters['isMainDomain'] = $this->isMainDomain;
        $context->setParameters($this->parameters);

        /* fronend1 checking for internal area. If not booked redirect to backend dashboard */
        if ($this->parameters['applicationArea'] == 'internal' && !in_array('frontend1', $this->parameters['bookedModulesDet'])) {
            $event->setResponse(new RedirectResponse($this->container->get('router')->generate('dashboard', array('url_identifier' => $this->parameters['url_identifier']))));
        }
        if ($this->websiteFrontend || $this->parameters['applicationArea'] === 'website') {
            /* Get the website full navigation details */
            $this->getWebsiteNavigationHeirarchy();            
            if (!in_array('frontend2', $this->parameters['bookedModulesDet']) && in_array('frontend1', $this->parameters['bookedModulesDet']) && $this->parameters['applicationArea'] != 'externalApplication' && current(explode('/', $this->parameters['applicationArea'])) != 'register' && current(explode('/', $this->parameters['applicationArea'])) != 'contactapplicationreg') {                
                $event->setResponse(new RedirectResponse($this->container->get('router')->generate('internal_dashboard')));
            } elseif (!in_array('frontend1', $this->parameters['bookedModulesDet']) && $this->parameters['applicationArea'] != 'externalApplication' && current(explode('/', $this->parameters['applicationArea'])) != 'register' && current(explode('/', $this->parameters['applicationArea'])) != 'contactapplicationreg' && current(explode('/', $this->parameters['applicationArea'])) != 'confirmClub') {                
                //a club which has no frontend (1 & 2) booking, should redirect to backend dashboard (except for pages externalApplication and contact register forms)
                $event->setResponse(new RedirectResponse($this->container->get('router')->generate('dashboard', array('url_identifier' => $this->parameters['url_identifier']))));
            }
        }
    }

    /**
     * Function to set contact fields of a club.
     *
     * @return String
     */
    public function setContactFields($entityManager)
    {
        $corrLangAttrId = $this->container->getParameter('system_field_corress_lang');
        $clubDetails = array('clubType' => $this->parameters['type'], 'clubId' => $this->clubId, 'clubHeirarchy' => $this->parameters['clubHeirarchy'], 'defaultLang' => $this->parameters['default_lang'], 'defaultSystemLang' => $this->parameters['default_system_lang'], 'corrLangAttrId' => $corrLangAttrId, 'clubLanguages' => $this->parameters['club_languages'], 'clubCacheKey' => $this->parameters['clubCacheKey'], 'cacheLifeTime' => $this->parameters['cacheLifeTime']);
        $contactFieldsArray = $entityManager->getRepository('CommonUtilityBundle:FgCmAttribute')->getContactFieldsForRouting($corrLangAttrId, $clubDetails, $this->parameters);
        $this->parameters = array_merge($this->parameters, $contactFieldsArray);
    }

    /**
     * Function to get paramters of a club.
     *
     * @param type $name Name
     *
     * @return String
     */
    public function get($name)
    {
        return (isset($this->parameters[$name])) ? $this->parameters[$name] : '';
    }

    /**
     * Function to set paramters of a club.
     *
     * @param string $title parameter of the menu for settings
     * @param string $value value of the parameter for setting
     *
     * @return String
     */
    public function set($title, $value)
    {
        $this->parameters[$title] = $value;
    }

    /**
     * Function to set current module to use in top navigation.
     *
     * @param type $url URL
     *
     * @return String Modulename
     */
    private function setModuleDetails()
    {
        $moduleArr = array();
        $moduleArr['contact'] = array('contact', 'contactarchive', 'formerfederationmember');
        $moduleArr['sponsor'] = array('sponsor', 'archivedsponsor');

        $authenticatedModules = array('communication', 'document', 'sponsor');
        if ($this->responseEvent && in_array($this->module, $authenticatedModules) && !in_array($this->module, $this->parameters['bookedModulesDet'])) {
            $this->responseEvent->setResponse(new Response('NO ACCESS', 404));
        }

        if (in_array($this->module, $moduleArr['contact'])) {
            $this->parameters['module'] = 'contact';
            $this->parameters['moduleMenu'] = $this->module;
            $this->session->set('moduleMenu_' . $this->clubId, $this->module);
        } else if (in_array($this->module, $moduleArr['sponsor'])) {
            $this->parameters['module'] = 'sponsor';
            $this->parameters['moduleMenu'] = $this->module;
            $this->session->set('moduleMenu_' . $this->clubId, $this->module);
        } else {
            $this->parameters['module'] = $this->module;
        }
    }

    /**
     * Function to get the navigation details of a club
     *
     * @param type $url URL
     *
     * @return String Modulename
     */
    private function getWebsiteNavigationHeirarchy()
    {
        $domainCacheKey = $this->container->getParameter('database_name');
        $cacheLifeTime = $this->container->getParameter('cache_lifetime');
        $cachingEnabled = $this->container->getParameter('caching_enabled');
        $cmsPdo = new CmsPdo($this->container);
        $navigationHeirarchy = $cmsPdo->getNavigationHeirarchy($this->clubId, $domainCacheKey, $cacheLifeTime, $cachingEnabled);
        $this->parameters['navigationHeirarchy'] = $navigationHeirarchy;
    }

    /**
     * Used for setting the contactId to the global variable.
     *
     * @param $contactId logged in contact id
     */
    public function setContactId($contactId)
    {
        $this->contactId = $contactId;
        $this->parameters['contactId'] = $contactId;
    }

    /**
     * Function to set current usr rights.
     *
     * @param type Array
     *
     * @return String Userrights
     */
    public function setAllowedRights($loggedUserRoles)
    {
        $this->parameters['allowedRights'] = $loggedUserRoles;
    }

    /**
     * Function to set master table of club.
     *
     *
     * @return String Club master table name
     */
    private function getClubMasterTable()
    {
        $clubTable = '';
        switch ($this->parameters['type']) {
            case 'federation':case 'sub_federation':
                $clubTable = 'master_federation_' . $this->clubId;
                break;
            default:
                $clubTable = 'master_club_' . $this->clubId;
                break;
        }

        return $clubTable;
    }

    /**
     * Function to set start date, enddate, label for current and next fiscal year for a club.
     *
     * @return $fiscalYear
     */
    public function getFiscalYear()
    {
        $today = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        /* Replace year of fiscal year date with current year */
        $fiscalYearStartDate = preg_replace('~(\d{4})~', date('Y'), $this->parameters['clubFiscalYear']);
        /* Get timestamp value of fiscal year date in current year */
        $fiscalYearDateArray = explode('-', $fiscalYearStartDate);
        $fiscalYearNow = mktime(0, 0, 0, $fiscalYearDateArray[1], $fiscalYearDateArray[2], $fiscalYearDateArray[0]);
        /* Get timestamp value of fiscal year date in current year */
        /* If fiscal year date of current year is not yest started set the fiscal year start date to last year */
        if ($fiscalYearNow > $today) {
            $fiscalYearStartDate = date('Y-m-d', strtotime($this->parameters['clubFiscalYear'] . ' -1 year'));
        }
        $fiscalYear = array();
        $fiscalYear['current']['start'] = $fiscalYearStartDate;
        $currentStartYear = substr(strstr($fiscalYearStartDate, '-', true), -2);
        /* Get next fiscal year start date */
        $nextfiscalYearStartDate = date('Y-m-d', strtotime($fiscalYearStartDate . ' +1 year'));
        /* Get current fiscal year end date */
        $currentFiscalYearEndDate = date('Y-m-d', strtotime($nextfiscalYearStartDate . ' -1 day'));
        $currentEndYear = substr(strstr($currentFiscalYearEndDate, '-', true), -2);
        $fiscalYear['current']['end'] = $currentFiscalYearEndDate;
        $fiscalYear['next']['start'] = $nextfiscalYearStartDate;
        /* Get next fiscal year end date */
        $fiscalYear['next']['end'] = date('Y-m-d', strtotime(date('Y-m-d', strtotime($nextfiscalYearStartDate . ' +1 year')) . ' -1 day'));
        /* Get the label for current and next fiscal year to use in sponsor managemnt
         * eg: payment 14/15, payment 14(if startdate and end date is in the same year ie January 1)
         */
        if ($currentStartYear == $currentEndYear) {
            $fiscalYear['current']['label'] = $currentStartYear;
            $fiscalYear['next']['label'] = $currentStartYear + 1;
        } else {
            $fiscalYear['current']['label'] = $currentStartYear . '/' . $currentEndYear;
            $fiscalYear['next']['label'] = $currentEndYear . '/' . ($currentEndYear + 1);
        }

        return $fiscalYear;
    }

    /**
     * Function to get Amount with currency value.
     *
     * @param float $amount Amount value
     * @param bool $decimalMarkerOnly Set to true if you need only decimal formatter no thoudsand seperator
     *
     * @return string Amount with curreny added
     */
    public function getAmountWithCurrency($amount, $decimalMarkerOnly = false)
    {
        if ($decimalMarkerOnly) {
            $amount = $this->formatDecimalMark($amount);
        } else {
            $amount = $this->formatNumber($amount);
        }
        if ($this->parameters['clubCurrencyPosition'] == 'right') {
            $currencyFormat = $amount . ' ' . $this->parameters['clubCurrency'];
        } else {
            $currencyFormat = $this->parameters['clubCurrency'] . ' ' . $amount;
        }

        return $currencyFormat;
    }

    /**
     * Set All club details.
     *
     * @param array $clubDetails
     */
    private function setClubParameters($clubDetails)
    {
        $this->clubId = $this->parameters['id'] = $clubDetails['id'];
        $this->clubUrlIdentifier = $this->parameters['url_identifier'] = $clubDetails['urlIdentifier'];
        //echo '<pre>';print_r($clubDetails);exit;
        $this->parameters['title'] = $clubDetails['title'];
        //$this->parameters['default_lang'] = $clubDetails['shortName'];
        //$this->parameters['default_system_lang'] = $clubDetails['systemLanguageCode'];
        $this->parameters['type'] = $clubDetails['clubType'];
        $bookedModulesDet = count($clubDetails['bookedModules']) > 0 ? explode(',', $clubDetails['bookedModules']) : array(); /* For setting the booked modules */
        $bookedModulesDet[] = 'contact';
        $this->parameters['bookedModulesDet'] = $bookedModulesDet;
        $this->parameters['clubCurrency'] = $clubDetails['currency'] == '' ? 'CHF' : $clubDetails['currency'];
        $this->parameters['clubCurrencyPosition'] = $clubDetails['currencyPosition'] == '' ? 'left' : $clubDetails['currencyPosition'];
        $this->parameters['clubFiscalYear'] = ($clubDetails['fiscalYear'] ? $clubDetails['fiscalYear']->format('Y-m-d') : '');
        $this->parameters['hasSubfederation'] = $clubDetails['hasSubfederation'];
        $this->parameters['logo'] = $clubDetails['logo'];
        $this->parameters['signature'] = $clubDetails['signature'];
        $this->parameters['settingsUpdated'] = $clubDetails['settingsUpdated']->format('U');
        $this->parameters['clubMembershipAvailable'] = $clubDetails['clubMembershipAvailable'];
        $this->parameters['fedMembershipMandatory'] = $clubDetails['fedMembershipMandatory'];
        $this->parameters['assignFedmembershipWithApplication'] = $clubDetails['assignFedmembershipWithApplication'];
        $this->parameters['addExistingFedMemberClub'] = $clubDetails['addExistingFedMemberClub'];
        $this->parameters['fedAdminAccess'] = $clubDetails['fedAdminAccess'];
        $this->parameters['hasPromobox'] = $clubDetails['hasPromobox'];
        if (in_array($this->clubId, $this->container->getParameter('external_application_clubids'))) {
            $this->parameters['externalApplicationAccess'] = 1;
        }
    }

    /**
     * Set Federation related details of a club.
     *
     * @param type $parentClubId
     */
    private function setFederationdetails($entityManager, $parentClubId, $domainCacheKey, $cacheLifeTime)
    {
        $clubHeirarchy = $clubHeirarchyDet = array();
        /* If the club is not a standard club, get the parent details  */
        $clubPdo = new \Common\UtilityBundle\Repository\Pdo\ClubPdo($this->container);
        $resultClubs = $clubPdo->getClubLevels($parentClubId, $domainCacheKey, $cacheLifeTime);
        foreach ($resultClubs as $result) {
            $clubHeirarchyDet[$result['Club_id']] = array('title' => $result['title'], 'club_type' => $result['club_type'], 'subfed_lvel' => $result['subfed_level']);
            $clubHeirarchy[] = $result['Club_id'];
            switch ($result['club_type']) {
                case 'federation':
                    $this->parameters['federation_name'] = $result['title'];
                    $this->parameters['federation_id'] = $this->federationId = $result['Club_id'];
                    $this->parameters['federation_icon'][$this->parameters['federation_id']] = ($result['federationIcon']) ? '/uploads/' . $this->parameters['federation_id'] . '/admin/federation_icon/' . $result['federationIcon'] : '/fgassets/global/img/fedicon.png';
                    break;
                case 'sub_federation':
                    $this->parameters['sub_federation_name'] = $result['title'];
                    $this->parameters['sub_federation_id'] = $this->subFederationId = $result['Club_id'];
                    $this->parameters['federation_icon'][$this->parameters['sub_federation_id']] = ($result['federationIcon']) ? '/uploads/' . $this->parameters['sub_federation_id'] . '/admin/federation_icon/' . $result['federationIcon'] : '/fgassets/global/img/fedicon.png';
                    break;
            }
        }
        $this->parameters['clubHeirarchyDet'] = $clubHeirarchyDet;
        $this->parameters['clubHeirarchy'] = $clubHeirarchy;
    }

    /**
     * Initialize parameters for club details with default values.
     */
    private function initClubParamaters()
    {
        $this->parameters['id'] = $this->parameters['federation_id'] = $this->parameters['sub_federation_id'] = 0;
        $this->parameters['clubHeirarchy'] = $this->parameters['clubHeirarchyDet'] = $this->parameters['club_languages'] = $this->parameters['club_languages_det'] = $this->parameters['bookedModulesDet'] = $this->parameters['club_title_details'] = array();
        $this->parameters['url_identifier'] = $this->parameters['type'] = $this->parameters['clubTable'] = $this->parameters['default_lang'] = '';
        $this->parameters['default_system_lang'] = $this->parameters['title'] = $this->parameters['sub_federation_name'] = $this->parameters['federation_name'] = '';
        $this->parameters['club_executiveboard_id'] = $this->parameters['club_workgroup_id'] = $this->parameters['club_team_id'] = 0;
        $this->parameters['singular'] = $this->container->getParameter('singular');
        $this->parameters['plural'] = $this->container->getParameter('plural');
        $this->parameters['clubCount'] = $this->parameters['subscriberCount'] = $this->parameters['activeContacts'] = 0;
        $this->parameters['archiveContacts'] = $this->parameters['formerfedContacts'] = 0;
        $this->parameters['teamDocCount'] = $this->parameters['workgroupDocCount'] = $this->parameters['contactDocCount'] = 0;
        $this->parameters['clubDocCount'] = $this->parameters['sponsorCount'] = $this->parameters['archivedSponsorCount'] = 0;
        $this->parameters['applicationArea'] = $this->parameters['clubCurrency'] = '';
        $this->parameters['clubCurrencyPosition'] = $this->parameters['clubFiscalYear'] = '';
        $this->parameters['contactId'] = 1;
        $this->parameters['settingsUpdated'] = '';
        $this->parameters['federation_icon'] = array();
        $this->parameters['navigationHeirarchy'] = array();
        $this->parameters['isWebsiteFrontend'] = false;
    }

    /**
     * Function to set cache key for the logged in club
     *
     * @param integer $cacheLifeTime Cache expiration time
     *
     * @return String
     */
    private function setCacheKey($cacheLifeTime)
    {
        $domainCacheKey = $this->container->getParameter('database_name');
        $clubCacheKey = '_{{cache_area}}_';
        $heirarchy = $this->parameters['clubHeirarchy'];
        $assignHeirarchy = '';
        if (count($heirarchy)) {
            $assignHeirarchy = implode('_', $heirarchy);
        }
        $heirarchyCacheKey = $assignHeirarchy ? $assignHeirarchy . '_' . $this->clubId : $this->clubId;
        $cachekey = $domainCacheKey . $clubCacheKey . $heirarchyCacheKey;
        $this->parameters['clubCacheKey'] = $cachekey;
        $this->parameters['cacheLifeTime'] = $cacheLifeTime;
        $this->parameters['caching_enabled'] = $this->container->getParameter('caching_enabled');

        return $cachekey;
    }

    /**
     * Function to set start date, enddate, label for current and next fiscal year for a club.
     * @param date $startDate start date of booking
     *
     * @return $fiscalYear
     */
    public function getFiscalYearStartDate($startDte)
    {
        $startDateYear = date("Y", strtotime($startDte));
        $startDate = mktime(0, 0, 0, date("m", strtotime($startDte)), date("d", strtotime($startDte)), $startDateYear);
        /* Replace year of fiscal year date with current year */
        $fiscalYearStartDate = preg_replace('~(\d{4})~', $startDateYear, $this->parameters['clubFiscalYear']);
        /* Get timestamp value of fiscal year date in current year */
        $fiscalYearDateArray = explode('-', $fiscalYearStartDate);
        $fiscalYearNow = mktime(0, 0, 0, $fiscalYearDateArray[1], $fiscalYearDateArray[2], $fiscalYearDateArray[0]);
        /* Get timestamp value of fiscal year date in current year */
        /* If fiscal year date of current year is not yest started set the fiscal year start date to last year */

        if ($fiscalYearNow > $startDate) {
            $fiscalYearStartDate = date('Y-m-d', strtotime($fiscalYearStartDate . ' -1 year'));
        }
        $fiscalYear = array();
        $fiscalYear['start'] = $fiscalYearStartDate;
        $currentStartYear = strstr($fiscalYearStartDate, '-', true);
        /* Get next fiscal year start date */
        $nextfiscalYearStartDate = date('Y-m-d', strtotime($fiscalYearStartDate . ' +1 year'));
        /* Get current fiscal year end date */
        $currentFiscalYearEndDate = date('Y-m-d', strtotime($nextfiscalYearStartDate . ' -1 day'));
        $currentEndYear = strstr($currentFiscalYearEndDate, '-', true);
        $fiscalYear['end'] = $currentFiscalYearEndDate;

        /* Get the label for current and next fiscal year to use in sponsor managemnt
         * eg: payment 14/15, payment 14(if startdate and end date is in the same year ie January 1)
         */
        if ($currentStartYear == $currentEndYear) {
            $fiscalYear['label'] = $currentStartYear;
        } else {
            $fiscalYear['label'] = $currentStartYear . '/' . $currentEndYear;
        }

        return $fiscalYear;
    }

    /**
     * Function to set locale settings of the contact according to the club settings
     * This will be overridden while the contact is logged in
     *
     * @return $fiscalYear
     */
    public function setLocaleSettings($rowLocale)
    {
        $settings['correspondance_lang'] = $rowLocale['correspondanceLang'];
        $settings['system_lang'] = $rowLocale['systemLang'];
        $settings['date_format'] = $rowLocale['dateFormat'];
        $settings['time_format'] = $rowLocale['timeFormat'];
        $settings['thousand_separator'] = $rowLocale['thousandSeparator'];
        $settings['decimal_marker'] = $rowLocale['decimalMarker'];

        FgSettings::setLocaleSettings($settings);

        $this->parameters['default_lang'] = FgSettings::getCorrespondenceLanguage();
        $this->parameters['default_system_lang'] = FgSettings::getSystemLanguage();

        $this->parameters['phpdate'] = FgSettings::getPhpDateFormat();
        $this->parameters['phpdatetime'] = FgSettings::getPhpDateTimeFormat();
        $this->parameters['phptime'] = FgSettings::getPhpTimeFormat();

        $this->parameters['mysqldate'] = FgSettings::getMysqlDateFormat();
        $this->parameters['mysqldatetime'] = FgSettings::getMysqlDateTimeFormat();
        $this->parameters['mysqltime'] = FgSettings::getMysqlTimeFormat();

        $this->parameters['jquerydate'] = FgSettings::getJqueryDateFormat();
        $this->parameters['jquerydatetime'] = FgSettings::getJqueryDateTimeFormat();
        $this->parameters['jquerytime'] = FgSettings::getJqueryTimeFormat();

        $this->parameters['momentdate'] = FgSettings::getMomentDateFormat();
        $this->parameters['momentdatetime'] = FgSettings::getMomentDateTimeFormat();
        $this->parameters['momenttime'] = FgSettings::getMomentTimeFormat();

        $this->parameters['decimalmarker'] = FgSettings::getDecimalMarker();
        $this->parameters['thousandseperator'] = FgSettings::getThousandSeperator();
    }

    /**
     * Function to convert the date, datetime, time formats according to
     * the parameters
     *
     * @param $value The value to be converted
     * @param $formatType
     *      date => Date only
     *      datetime => Date and Time
     *      time => Time only
     * @param $currentFormat The current format
     *
     * @return $formatedstring
     */
    public function formatDate($value, $formatType = 'date', $currentFormat = 'Y-m-d H:i:s')
    {
        switch ($formatType) {
            case 'date':
                $requiredFormat = $this->parameters['phpdate'];
                break;
            case 'datetime':
                $requiredFormat = $this->parameters['phpdatetime'];
                break;
            case 'time':
                $requiredFormat = $this->parameters['phptime'];
                break;
            default:
                $requiredFormat = 'd/m/Y';
                break;
        }

        $date = date_create_from_format($currentFormat, $value);
        if (false === $date) {
            return $value;
        } else {
            return date_format($date, $requiredFormat);
        }
    }

    /**
     * Function to get Number with decimal and thousend
     *
     * @param int/float $number value
     *
     * @return string number with decimal marker and thousend seperator.
     */
    public function formatNumber($number, $decimalPoints = 2)
    {
        //$decimals = (filter_var($number, FILTER_VALIDATE_FLOAT)) ? 2 : 0;
        $decimals = (preg_match('/^[0-9]+$/', $number)) ? 0 : $decimalPoints;
        $number = number_format($number, $decimals, FgSettings::getDecimalMarker(), FgSettings::getThousandSeperator());

        return $number;
    }

    /**
     * Function to get Number with decimal marker
     *
     * @param int/float $number value
     *
     * @return string number with decimal marker and thousend seperator.
     */
    public function formatDecimalMark($number)
    {
        //$decimals = (filter_var($number, FILTER_VALIDATE_FLOAT)) ? 2 : 0;
        $decimals = (preg_match('/^[0-9]+$/', $number)) ? 0 : 2;
        $number = number_format($number, $decimals, FgSettings::getDecimalMarker(), '');

        return $number;
    }

    /**
     * Function to unformat number with decimal point
     *
     * @param int/float $number value
     *
     * @return string number with out decimal marker
     */
    public function unFormatNumber($number)
    {

        $number = str_replace(FgSettings::getDecimalMarker(), '.', $number);
        //$number=str_replace(FgSettings::getThousandSeperator(), '', $number);

        return $number;
    }

    /**
     * Used for setting the contact locale setting to the global variable.
     *
     * @param $parameters Array of key values
     */
    public function setParameters($parameter)
    {
        foreach ($parameter as $key => $value) {
            $this->parameters[$key] = $value;
        }
    }

    /**
     * Used to set locale.
     *
     * @param $event Response event
     */
    public function setClubLocale($event, $locale)
    {
        $this->container->get('translator')->setLocale($locale);
        if ($event) {
            $event->getRequest()->setLocale($locale);
        }
        \Locale::setDefault($locale);
    }

    /**
     * Method used to get club logo path. If not exist, fairgate logo is used
     *
     * @param boolean $setDefaultLogo if set true, return defaultlogo in case of no logo is uploaded/ if set false, return null in case of no logo is uploaded
     * 
     * @return string $clubLogo
     */
    public function getClubLogoPath($setDefaultLogo = true)
    {
        //get club logo
        $rootPath = FgUtility::getRootPath($this->container);
        $clubLogoFile = '/uploads/' . $this->parameters['id'] . '/admin/clublogo/' . $this->parameters['logo'];
        if (is_file($rootPath . $clubLogoFile) && file_exists($rootPath . $clubLogoFile)) {
            $clubLogo = $clubLogoFile;
        } else {
            $clubLogo = ($setDefaultLogo) ? '/fgassets/internal/img/logo-comn-login.png' : '';
        }

        return $clubLogo;
    }

    /**
     * This function will check if the next/previous id is available for the given key
     * If available return the data
     *
     * @param string  $currentId  The current ID
     * @param string  $key  The key for Next/previous  implementation
     * @param string  $path  The path to which the page. Will be route string
     * @param string  $parameterName  The name of the parameter
     * @param array  $extraParameters  Extra parameters if there is any
     *
     * @return array Array next/previous ids
     */
    public function getNextPrevious($currentId, $key, $path, $parameterName, $extraParameters = array())
    {
        $session = $this->container->get("session");
        $setIds = $session->get($key);
        $setIdArray = explode(',', $setIds);
        $navigationLinks = array();
        if (count($setIdArray) > 0) {
            $index = array_search($currentId, $setIdArray);
            $previousId = $setIdArray[$index - 1];
            $nextId = $setIdArray[$index + 1];
            $parameterPrevId = array($parameterName => $previousId);
            $parameterNextId = array($parameterName => $nextId);

            if ($previousId > 0) {
                if (count($extraParameters) > 0) {
                    $parameterPrevId = array_merge($extraParameters, $parameterPrevId);
                }
                $navigationLinks['prev'] = $this->container->get('router')->generate($path, $parameterPrevId, true);
            }
            if ($nextId > 0) {
                if (count($extraParameters) > 0) {
                    $parameterNextId = array_merge($extraParameters, $parameterNextId);
                }
                $navigationLinks['next'] = $this->container->get('router')->generate($path, $parameterNextId, true);
            }
        }
        return $navigationLinks;
    }

    /**
     * This function to regenerate the files if not exists
     *
     * @param boolean $cachingEnabled  Enable/Disable setting of caching
     *
     * @return void
     */
    private function checkThemeFiles($cachingEnabled)
    {
        $publicConfig = $this->parameters['publicConfig'];
        $rootPath = FgUtility::getRootPath($this->container);
        $themeFolder = FgUtility::getUploadFilePath($this->clubId, 'cms_themecss');
        $colorSchemeFolder = FgUtility::getUploadFilePath($publicConfig['colorSchemeClubId'], 'cms_themecss');
        $themeFolder = $rootPath . '/' . $themeFolder . '/' . $publicConfig['theme'] . '/';
        $colorSchemeFolder = $rootPath . '/' . $colorSchemeFolder . '/' . $publicConfig['theme'] . '/';
        $recreateCssFileFlag = 0;
        $recreateThemeFileFlag = 0;

        if (($publicConfig['cssFile'] == '') || (!file_exists($themeFolder . $publicConfig['cssFile']))) {
            $recreateCssFileFlag = 1;
            $cmsTheme = new FgCmsTheme($this->container);
            $cssThemeFileName = $cmsTheme->createCss($publicConfig['themeConfigId'], 'theme');
        }
        if (($publicConfig['cssColorScheme'] == '') || (!file_exists($colorSchemeFolder . $publicConfig['cssColorScheme']))) {
            $recreateThemeFileFlag = 1;
            $cmsTheme = new FgCmsTheme($this->container);
            $cssColorFileName = $cmsTheme->createCss($publicConfig['themeConfigId'], 'color', $publicConfig['colorSchemeId']);
        }
        if ($recreateCssFileFlag == 1 || $recreateThemeFileFlag == 1) {
            $currentPublicConfig = $this->parameters['publicConfig'];
            if ($recreateCssFileFlag) {
                $currentPublicConfig['cssFile'] = $cssThemeFileName;
            }
            if ($recreateThemeFileFlag) {
                $currentPublicConfig['cssColorScheme'] = $cssColorFileName;
            }
            $this->parameters['publicConfig'] = $currentPublicConfig;
        }
    }

    /**
     * The function to check if the current route is public
     *
     * @param string $baseUrl  The current base url
     *
     * return bool
     */
    public function isPublicRoute($baseUrl)
    {

        if (strpos($baseUrl, '/subscribe/newsletter') > 0 || strpos($baseUrl, '/subscribe/newsletter/save') > 0) {
            return true;
        }

        return false;
    }

    /**
     * This function set the website meta and analytic codes
     *
     * @return void
     */
    private function setSeoSettings()
    {
        $em = $this->container->get('doctrine')->getManager();
        $webSiteDetails = $em->getRepository('CommonUtilityBundle:FgWebSettings')->getWebSettings($this->clubId, $this->parameters['clubCacheKey'], $this->parameters['cacheLifeTime'], $this->container->getParameter('caching_enabled'));
        $faviconsFolder = FgUtility::getUploadFilePath($this->clubId, 'cms_favicons');
        $appleTouchFolder = FgUtility::getUploadFilePath($this->clubId, 'apple_touch_icon');
        $fallbackFolder = FgUtility::getUploadFilePath($this->clubId, 'cms_websettings');
        $webDir = FgUtility::getWebDir();
        $this->parameters['favIcon'] = $this->isFileExists($webDir . $faviconsFolder . '/favicon.ico', $faviconsFolder . '/favicon.ico');
        $this->parameters['favIcon32'] = $this->isFileExists($webDir . $faviconsFolder . '/favicon-32x32.png', $faviconsFolder . '/favicon-32x32.png');
        $this->parameters['favIcon16'] = $this->isFileExists($webDir . $faviconsFolder . '/favicon-16x16.png', $faviconsFolder . '/favicon-16x16.png');
        $this->parameters['appleIcon'] = $this->isFileExists($webDir . $appleTouchFolder . '/apple-touch-icon.png', $appleTouchFolder . '/apple-touch-icon.png');
        $this->parameters['manifest'] = $this->isFileExists($webDir . $appleTouchFolder . '/manifest.json', $appleTouchFolder . '/manifest.json');
        $this->parameters['msapplication'] = $this->isFileExists($webDir . $appleTouchFolder . '/browserconfig.xml', $appleTouchFolder . '/browserconfig.xml');
        $this->parameters['mstile'] = $this->isFileExists($webDir . $appleTouchFolder . '/mstile-150x150.png', $appleTouchFolder . '/mstile-150x150.png');
        $this->parameters['andriodChrome-192'] = $this->isFileExists($webDir . $appleTouchFolder . '/android-chrome-192x192.png', $appleTouchFolder . '/android-chrome-192x192.png');
        $this->parameters['andriodChrome-384'] = $this->isFileExists($webDir . $appleTouchFolder . '/andriod-chrome-384x384.png', $appleTouchFolder . '/andriod-chrome-384x384.png');

        $this->parameters['metaDescription'] = $webSiteDetails['siteDescription'];
        $this->parameters['fallbackImage'] = $this->isFileExists($webDir . $fallbackFolder . '/' . $webSiteDetails['fallbackImage'], $fallbackFolder . '/' . $webSiteDetails['fallbackImage']);
        $this->parameters['fallbackImageName'] = $webSiteDetails['fallbackImage'];

        $this->parameters['fairgateAnalyticKey'] = $this->container->getParameter('fairgateAnalyticKey');
        $this->parameters['fairgateAnalyticScreenNameArray'] = $this->container->getParameter('fairgateAnalyticScreenNameArray');
        $this->parameters['clubDomainFlag'] = $this->clubDomainFlag;
        $this->parameters['clubAnalyticKey'] = $webSiteDetails['googleAnalyticsTrackid'];
    }

    /**
     * This function  used to check the file exists in the file path
     * 
     * @param string $originalFile  FullFilepath
     * @param string $fileName  Filename
     *
     * @return filename if exists
     */
    private function isFileExists($originalFile, $fileName)
    {
        if (file_exists($originalFile)) {
            return $fileName;
        }

        return '';
    }

    /**
     * This function used for settings the domain related settings
     * 
     * @param object $request
     * @param object $env
     *
     * @return $clubDetails club details
     */
    private function setDomainDetails($request, $env)
    {
        $clubDetails = array();
        $domainName = $request->getHttpHost();
        $this->parameters['currentDomainName'] = $domainName;
        if ($env == 'domain') {
            $apiDomains = $this->container->getParameter('apiDomains'); #for Api
            $splitRequestUri = explode('/', $requestUri);
            if (in_array($domainName, $apiDomains) && $splitRequestUri[1] != 'api') {
                echo "You are not permitted ";
                exit();
            }
            $clubDetails = $this->container->get('doctrine')->getManager()->getRepository('CommonUtilityBundle:FgDnClubDomains')->getClubDetails($domainName);
            if (count($clubDetails) == 0) {
                throw new NotFoundHttpException(sprintf('Club does not existsss'));
            }
            $this->clubDomainFlag = true;
            $this->clubUrlIdentifier = $clubDetails['urlIdentifier'];
            if ($clubDetails['domainType'] == 'main') {
                $this->isMainDomain = 1;
            }
        }
        return $clubDetails;
    }

    /**
     * This function used for settings up application area
     * 
     * @param object $baseUrl
     * @param object $env
     * @param object $request
     *
     * @return $clubDetails club details
     */
    private function setApplicationArea($baseUrl, $env, $request)
    {
        $applicationArea = '';
        $moduleArr = array('/backend/', '/internal/', '/website/', '/files/', '/help/', '/uploads/', '/public/');

        foreach ($moduleArr as $area) {
            if (strpos($baseUrl, $area) > 0) {               
                $applicationArea = str_replace('/', '', $area);              
                break;
            }
        }

        if ($applicationArea == 'public' || $this->isPublicRoute($baseUrl)) {
            $applicationArea = 'public';
            if (strpos($baseUrl, '/fgInternalVariables.js') > 0) {
                $referedFrontend = true;
                foreach ($moduleArr as $key => $val) {
                    if (stripos($request->headers->get('referer'), $val) > 0) {
                        $referedFrontend = false;
                    }
                }
                $isCmsFrontend = $referedFrontend ? 1 : 0;
            }
        } else if ($applicationArea == '') {
            //for domain urls (frontend), applicationArea should be '' 
            if ($env == 'domain') {
                $applicationArea = '';
            } else {
                $urlIdentifiers = explode($this->clubUrlIdentifier, $baseUrl);
                $applicationArea = trim(str_replace('/app_dev.php/', '', $urlIdentifiers[1]), '/');
            }
            $this->websiteFrontend = true;
            $isCmsFrontend = 1;
        }else{
            $isCmsFrontend = 0;
        }

        return array('applicationArea' => $applicationArea, 'isCmsFrontend' => $isCmsFrontend);
    }
}
